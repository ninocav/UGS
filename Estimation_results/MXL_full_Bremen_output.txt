Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Linux.
www.ApolloChoiceModelling.com

Model name                                  : MXL_full_Bremen
Model description                           : WTP_full_ Bremen
Model run at                                : 2023-04-06 07:51:30
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 187
Number of rows in database                  : 1866
Number of modelled outcomes                 : 1866

Number of cores used                        :  31 
Number of inter-individual draws            : 2000 (sobol)

LL(start)                                   : -1223.84
LL at equal shares, LL(0)                   : -2050.01
LL at observed shares, LL(C)                : -1551.26
LL(final)                                   : -1026.79
Rho-squared vs equal shares                  :  0.4991 
Adj.Rho-squared vs equal shares              :  0.4943 
Rho-squared vs observed shares               :  0.3381 
Adj.Rho-squared vs observed shares           :  0.3316 
AIC                                         :  2073.58 
BIC                                         :  2128.89 

Estimated parameters                        :  10
Time taken (hh:mm:ss)                       :  00:03:48.42 
     pre-estimation                         :  00:02:23.47 
     estimation                             :  00:00:42.49 
     post-estimation                        :  00:00:42.46 
Iterations                                  :  64  
Min abs eigenvalue of Hessian               :  0.012618 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
               Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1        -25.5960      4.7758      -5.360      5.5806        -4.587
mu_asc2        -29.1468      5.1027      -5.712      6.0070        -4.852
mu_natural      20.6682      2.6815       7.708      3.2793         6.303
mu_walking      -2.5448      0.3649      -6.974      0.4137        -6.151
mu_rent         -2.7026      0.1820     -14.852      0.2244       -12.043
sig_asc1        29.3361      4.4774       6.552      5.5257         5.309
sig_asc2        40.1506      5.0957       7.879      7.2778         5.517
sig_natural     14.0397      2.2177       6.331      2.8452         4.934
sig_walking      1.7002      0.2487       6.836      0.2772         6.134
sig_rent         0.9836      0.1814       5.424      0.2140         4.596


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  1866.00 1866.00 1866.00
Times chosen                      254.00  324.00 1288.00
Percentage chosen overall          13.61   17.36   69.02
Percentage chosen when available   13.61   17.36   69.02


Classical covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         22.8084   14.716533   -10.02757    1.015855     0.51739    -17.0930    -14.9874    -6.56354   -0.712462
mu_asc2         14.7165   26.038029    -8.30280    0.706730     0.38426    -11.3909    -20.4382    -6.09803   -0.508736
mu_natural     -10.0276   -8.302803     7.19034   -0.738568    -0.29744      9.5758      9.5974     4.04746    0.496702
mu_walking       1.0159    0.706730    -0.73857    0.133146     0.03204     -1.0183     -0.9602    -0.39217   -0.087311
mu_rent          0.5174    0.384262    -0.29744    0.032038     0.03311     -0.4777     -0.5388    -0.21536   -0.021991
sig_asc1       -17.0930  -11.390901     9.57583   -1.018288    -0.47768     20.0469     16.2589     6.55860    0.678742
sig_asc2       -14.9874  -20.438182     9.59739   -0.960173    -0.53878     16.2589     25.9663     7.48424    0.650403
sig_natural     -6.5635   -6.098030     4.04746   -0.392172    -0.21536      6.5586      7.4842     4.91827    0.264038
sig_walking     -0.7125   -0.508736     0.49670   -0.087311    -0.02199      0.6787      0.6504     0.26404    0.061852
sig_rent         0.1465   -0.004632    -0.06134    0.003197     0.01910     -0.1644     -0.2076    -0.08440   -0.002492
               sig_rent
mu_asc1        0.146550
mu_asc2       -0.004632
mu_natural    -0.061338
mu_walking     0.003197
mu_rent        0.019099
sig_asc1      -0.164366
sig_asc2      -0.207558
sig_natural   -0.084397
sig_walking   -0.002492
sig_rent       0.032889

Robust covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         31.1429    29.07580    -16.5925    1.668693     0.86972    -27.1937    -33.1828    -13.1404   -1.154073
mu_asc2         29.0758    36.08369    -15.2793    1.290471     0.68718    -25.8433    -37.4591    -13.2358   -0.906947
mu_natural     -16.5925   -15.27928     10.7538   -1.124943    -0.53561     17.2375     20.1817      8.1488    0.760687
mu_walking       1.6687     1.29047     -1.1249    0.171173     0.05404     -1.7232     -1.8141     -0.7669   -0.114341
mu_rent          0.8697     0.68718     -0.5356    0.054037     0.05036     -0.8900     -1.1246     -0.4361   -0.036830
sig_asc1       -27.1937   -25.84329     17.2375   -1.723170    -0.89004     30.5329     36.9424     14.1542    1.165100
sig_asc2       -33.1828   -37.45909     20.1817   -1.814140    -1.12463     36.9424     52.9663     18.0531    1.240191
sig_natural    -13.1404   -13.23575      8.1488   -0.766944    -0.43610     14.1542     18.0531      8.0953    0.520027
sig_walking     -1.1541    -0.90695      0.7607   -0.114341    -0.03683      1.1651      1.2402      0.5200    0.076831
sig_rent         0.2638     0.08940     -0.1527    0.007174     0.03061     -0.3096     -0.5001     -0.1686   -0.004468
               sig_rent
mu_asc1        0.263778
mu_asc2        0.089398
mu_natural    -0.152673
mu_walking     0.007174
mu_rent        0.030608
sig_asc1      -0.309640
sig_asc2      -0.500081
sig_natural   -0.168638
sig_walking   -0.004468
sig_rent       0.045810

Classical correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1          1.0000    0.603885     -0.7830     0.58294      0.5954     -0.7994     -0.6158     -0.6197    -0.59984
mu_asc2          0.6039    1.000000     -0.6068     0.37956      0.4138     -0.4986     -0.7860     -0.5389    -0.40088
mu_natural      -0.7830   -0.606801      1.0000    -0.75484     -0.6096      0.7976      0.7024      0.6806     0.74481
mu_walking       0.5829    0.379564     -0.7548     1.00000      0.4825     -0.6233     -0.5164     -0.4846    -0.96212
mu_rent          0.5954    0.413846     -0.6096     0.48252      1.0000     -0.5863     -0.5811     -0.5337    -0.48593
sig_asc1        -0.7994   -0.498575      0.7976    -0.62328     -0.5863      1.0000      0.7126      0.6605     0.60954
sig_asc2        -0.6158   -0.786020      0.7024    -0.51639     -0.5811      0.7126      1.0000      0.6623     0.51322
sig_natural     -0.6197   -0.538864      0.6806    -0.48463     -0.5337      0.6605      0.6623      1.0000     0.47872
sig_walking     -0.5998   -0.400877      0.7448    -0.96212     -0.4859      0.6095      0.5132      0.4787     1.00000
sig_rent         0.1692   -0.005006     -0.1261     0.04831      0.5788     -0.2024     -0.2246     -0.2098    -0.05524
               sig_rent
mu_asc1        0.169204
mu_asc2       -0.005006
mu_natural    -0.126132
mu_walking     0.048309
mu_rent        0.578760
sig_asc1      -0.202424
sig_asc2      -0.224598
sig_natural   -0.209843
sig_walking   -0.055241
sig_rent       1.000000

Robust correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1          1.0000     0.86736     -0.9067     0.72274      0.6945     -0.8819     -0.8170     -0.8276    -0.74608
mu_asc2          0.8674     1.00000     -0.7757     0.51925      0.5098     -0.7786     -0.8568     -0.7744    -0.54470
mu_natural      -0.9067    -0.77565      1.0000    -0.82915     -0.7278      0.9513      0.8456      0.8734     0.83687
mu_walking       0.7227     0.51925     -0.8291     1.00000      0.5820     -0.7537     -0.6025     -0.6515    -0.99704
mu_rent          0.6945     0.50978     -0.7278     0.58202      1.0000     -0.7178     -0.6886     -0.6830    -0.59211
sig_asc1        -0.8819    -0.77859      0.9513    -0.75375     -0.7178      1.0000      0.9186      0.9003     0.76069
sig_asc2        -0.8170    -0.85684      0.8456    -0.60250     -0.6886      0.9186      1.0000      0.8718     0.61478
sig_natural     -0.8276    -0.77442      0.8734    -0.65152     -0.6830      0.9003      0.8718      1.0000     0.65939
sig_walking     -0.7461    -0.54470      0.8369    -0.99704     -0.5921      0.7607      0.6148      0.6594     1.00000
sig_rent         0.2208     0.06953     -0.2175     0.08101      0.6373     -0.2618     -0.3210     -0.2769    -0.07531
               sig_rent
mu_asc1         0.22084
mu_asc2         0.06953
mu_natural     -0.21752
mu_walking      0.08101
mu_rent         0.63726
sig_asc1       -0.26182
sig_asc2       -0.32104
sig_natural    -0.27692
sig_walking    -0.07531
sig_rent        1.00000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
  12959           0.1842591
 626200           0.2199872
  16565           0.2516383
  19182           0.2614125
  16976           0.2635018
   1586           0.2755403
  14023           0.2756693
  16974           0.2759331
  16141           0.2848124
 137000           0.2900369
   3981           0.2942744
  12832           0.2947669
  18922           0.2990317
   2821           0.3017130
  11736           0.3113886
  16663           0.3305003
   5566           0.3415980
    135           0.3457636
 297500           0.3476059
 246900           0.3553891

Changes in parameter estimates from starting values:
                Initial    Estimate  Difference
mu_asc1         -10.000    -25.5960    -15.5960
mu_asc2         -10.000    -29.1468    -19.1468
mu_natural       10.000     20.6682     10.6682
mu_walking       -3.000     -2.5448      0.4552
mu_rent           0.000     -2.7026     -2.7026
sig_asc1          5.000     29.3361     24.3361
sig_asc2          5.000     40.1506     35.1506
sig_natural      10.000     14.0397      4.0397
sig_walking       5.000      1.7002     -3.2998
sig_rent          2.000      0.9836     -1.0164

Settings and functions used in model definition:

apollo_control
--------------
                       Value                
modelName              "MXL_full_Bremen"    
modelDescr             "WTP_full_ Bremen"   
indivID                "id"                 
mixing                 "TRUE"               
HB                     "FALSE"              
nCores                 "31"                 
outputDirectory        "Estimation_results/"
debug                  "FALSE"              
workInLogs             "FALSE"              
seed                   "13"                 
noValidation           "FALSE"              
noDiagnostics          "FALSE"              
calculateLLC           "TRUE"               
panelData              "TRUE"               
analyticGrad           "TRUE"               
analyticGrad_manualSet "FALSE"              

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                Value
mu_asc1     25.611959
mu_asc2     28.951567
mu_natural  20.703425
mu_walking   2.551202
mu_rent      2.706716
sig_asc1    29.525110
sig_asc2    40.237733
sig_natural 14.078577
sig_walking  1.703855
sig_rent     0.979275

Scaling used in computing Hessian
--------------
                 Value
mu_asc1     25.5960178
mu_asc2     29.1467837
mu_natural  20.6681774
mu_walking   2.5447953
mu_rent      2.7025708
sig_asc1    29.3361360
sig_asc2    40.1506271
sig_natural 14.0396990
sig_walking  1.7001827
sig_rent     0.9836441


apollo_randCoeff
----------------
function(apollo_beta, apollo_inputs){
    randcoeff = list()
    
    randcoeff[["b_mu_asc1"]] = mu_asc1 + sig_asc1 * draws_asc1
    randcoeff[["b_mu_asc2"]] = mu_asc2 + sig_asc2 * draws_asc2
    randcoeff[["b_mu_natural"]] = mu_natural + sig_natural * draws_natural
    randcoeff[["b_mu_walking"]] = mu_walking + sig_walking * draws_walking
    randcoeff[["b_mu_rent"]] = -exp(mu_rent + sig_rent * draws_rent)
    
    return(randcoeff)
  }
<bytecode: 0x5582857ada18>


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = -(b_mu_rent)* (b_mu_asc1 + b_mu_natural * Naturnähe_1 + b_mu_walking * Erreichbarkeit_1 - Miete_1)
    
    V[['alt2']] = -(b_mu_rent)* (b_mu_asc2 + b_mu_natural * Naturnähe_2 + b_mu_walking * Erreichbarkeit_2 - Miete_2)
    
    V[['alt3']] = -(b_mu_rent)* (b_mu_natural * Naturnähe_3 + b_mu_walking * Erreichbarkeit_3 - Miete_3)
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x5581acd53568>
