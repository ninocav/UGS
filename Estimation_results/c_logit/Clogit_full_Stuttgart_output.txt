Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Windows.
www.ApolloChoiceModelling.com

Model name                                  : Clogit_full_Stuttgart
Model description                           : ClogitWTP_full_ Stuttgart
Model run at                                : 2023-04-19 14:05:00
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 211
Number of rows in database                  : 2107
Number of modelled outcomes                 : 2107

Number of cores used                        :  1 
Model without mixing

LL(start)                                   : -1954.42
LL at equal shares, LL(0)                   : -2314.78
LL at observed shares, LL(C)                : -1816.62
LL(final)                                   : -1569.39
Rho-squared vs equal shares                  :  0.322 
Adj.Rho-squared vs equal shares              :  0.3199 
Rho-squared vs observed shares               :  0.1361 
Adj.Rho-squared vs observed shares           :  0.1333 
AIC                                         :  3148.79 
BIC                                         :  3177.05 

Estimated parameters                        :  5
Time taken (hh:mm:ss)                       :  00:00:7.68 
     pre-estimation                         :  00:00:5.64 
     estimation                             :  00:00:1.44 
     post-estimation                        :  00:00:0.6 
Iterations                                  :  35  
Min abs eigenvalue of Hessian               :  0.003919 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
              Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1      -70.22991   11.960192      -5.872   41.002560        -1.713
mu_asc2      -58.19925   10.375174      -5.609   33.678397        -1.728
mu_natural    28.37946    4.612472       6.153   14.090877         2.014
mu_walking    -1.10199    0.210931      -5.224    0.534794        -2.061
mu_rent       -0.01596    0.002216      -7.200    0.007778        -2.052


Overview of choices for MNL model component :
                                    alt1   alt2    alt3
Times available                  2107.00 2107.0 2107.00
Times chosen                      306.00  392.0 1409.00
Percentage chosen overall          14.52   18.6   66.87
Percentage chosen when available   14.52   18.6   66.87


Classical covariance matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1      143.04620   111.19940  -47.985023     1.41437   -0.024547
mu_asc2      111.19940   107.64424  -41.542815     1.17291   -0.020991
mu_natural   -47.98502   -41.54282   21.274894    -0.66401    0.009435
mu_walking     1.41437     1.17291   -0.664014     0.04449 -3.2889e-04
mu_rent       -0.02455    -0.02099    0.009435 -3.2889e-04   4.912e-06

Robust covariance matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1      1681.2099   1366.4730   -549.3321   10.476684   -0.313117
mu_asc2      1366.4730   1134.2344   -449.0062    8.450765   -0.255469
mu_natural   -549.3321   -449.0062    198.5528   -4.672695    0.106688
mu_walking     10.4767      8.4508     -4.6727    0.286005   -0.002381
mu_rent        -0.3131     -0.2555      0.1067   -0.002381   6.050e-05

Classical correlation matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1         1.0000      0.8961     -0.8698      0.5606     -0.9261
mu_asc2         0.8961      1.0000     -0.8681      0.5360     -0.9129
mu_natural     -0.8698     -0.8681      1.0000     -0.6825      0.9229
mu_walking      0.5606      0.5360     -0.6825      1.0000     -0.7035
mu_rent        -0.9261     -0.9129      0.9229     -0.7035      1.0000

Robust correlation matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1         1.0000      0.9896     -0.9508      0.4778     -0.9818
mu_asc2         0.9896      1.0000     -0.9462      0.4692     -0.9753
mu_natural     -0.9508     -0.9462      1.0000     -0.6201      0.9735
mu_walking      0.4778      0.4692     -0.6201      1.0000     -0.5725
mu_rent        -0.9818     -0.9753      0.9735     -0.5725      1.0000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
  15899         0.008069181
 204500         0.047919028
  17236         0.075046489
  14392         0.110039013
 230500         0.119068743
  14140         0.120590463
    249         0.144689656
  11866         0.173430667
  17044         0.183897796
 371900         0.193780209
 192900         0.193885707
  20056         0.209074306
  20005         0.233981966
  13488         0.240271855
  18300         0.246333314
  19849         0.254997242
 199800         0.256289606
   5365         0.259628623
  18451         0.265899817
  17276         0.270141699

Changes in parameter estimates from starting values:
               Initial    Estimate  Difference
mu_asc1      -10.00000   -70.22991   -60.22991
mu_asc2      -10.00000   -58.19925   -48.19925
mu_natural    10.00000    28.37946    18.37946
mu_walking    -2.00000    -1.10199     0.89801
mu_rent       -0.05000    -0.01596     0.03404

Settings and functions used in model definition:

apollo_control
--------------
                       Value                        
modelName              "Clogit_full_Stuttgart"      
modelDescr             "ClogitWTP_full_ Stuttgart"  
indivID                "id"                         
mixing                 "FALSE"                      
HB                     "FALSE"                      
nCores                 "1"                          
outputDirectory        "Estimation_results/c_logit/"
debug                  "FALSE"                      
workInLogs             "FALSE"                      
seed                   "13"                         
noValidation           "FALSE"                      
noDiagnostics          "FALSE"                      
calculateLLC           "TRUE"                       
panelData              "TRUE"                       
analyticGrad           "TRUE"                       
analyticGrad_manualSet "FALSE"                      

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                 Value
mu_asc1    69.45821284
mu_asc2    58.63218909
mu_natural 28.58061576
mu_walking  1.09365442
mu_rent     0.01598139

Scaling used in computing Hessian
--------------
                 Value
mu_asc1    70.22991325
mu_asc2    58.19925093
mu_natural 28.37946153
mu_walking  1.10199368
mu_rent     0.01595801


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = -(mu_rent)* (mu_asc1 + mu_natural * Naturnähe_1 + mu_walking * Erreichbarkeit_1 - Miete_1)
    
    V[['alt2']] = -(mu_rent)* (mu_asc2 + mu_natural * Naturnähe_2 + mu_walking * Erreichbarkeit_2 - Miete_2)
    
    V[['alt3']] = -(mu_rent)* (mu_natural * Naturnähe_3 + mu_walking * Erreichbarkeit_3 - Miete_3)
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    #P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x000001d9f0d8d2c0>
