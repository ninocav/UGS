Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Windows.
www.ApolloChoiceModelling.com

Model name                                  : Clogit_ps_Frankfurt
Model description                           : ClogitWTP_ps_ Frankfurt
Model run at                                : 2023-04-19 14:33:56
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 369
Number of rows in database                  : 3681
Number of modelled outcomes                 : 3681

Number of cores used                        :  1 
Model without mixing

LL(start)                                   : -3611.75
LL at equal shares, LL(0)                   : -4043.99
LL at observed shares, LL(C)                : -3334.3
LL(final)                                   : -2754.61
Rho-squared vs equal shares                  :  0.3188 
Adj.Rho-squared vs equal shares              :  0.3176 
Rho-squared vs observed shares               :  0.1739 
Adj.Rho-squared vs observed shares           :  0.1724 
AIC                                         :  5519.23 
BIC                                         :  5550.28 

Estimated parameters                        :  5
Time taken (hh:mm:ss)                       :  00:00:7.2 
     pre-estimation                         :  00:00:5.91 
     estimation                             :  00:00:0.75 
     post-estimation                        :  00:00:0.54 
Iterations                                  :  15  
Min abs eigenvalue of Hessian               :  222.5917 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
              Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1       -0.89804    0.056030      -16.03    0.090767        -9.894
mu_asc2       -0.88414    0.055751      -15.86    0.095875        -9.222
mu_natural     0.51469    0.022003       23.39    0.038910        13.228
mu_walking    -0.02929    0.002717      -10.78    0.006907        -4.241
mu_rent       -0.02188    0.001791      -12.22    0.003050        -7.172


Overview of choices for MNL model component :
                                    alt1   alt2    alt3
Times available                  3681.00 3681.0 3681.00
Times chosen                      632.00  703.0 2346.00
Percentage chosen overall          17.17   19.1   63.73
Percentage chosen when available   17.17   19.1   63.73


Classical covariance matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1       0.003139    0.001329 -2.2003e-04  -5.231e-05  -2.908e-05
mu_asc2       0.001329    0.003108 -3.3068e-04  -5.094e-05  -3.047e-05
mu_natural -2.2003e-04 -3.3068e-04  4.8415e-04  -1.049e-05   5.886e-06
mu_walking  -5.231e-05  -5.094e-05  -1.049e-05   7.381e-06   9.562e-08
mu_rent     -2.908e-05  -3.047e-05   5.886e-06   9.562e-08   3.208e-06

Robust covariance matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1       0.008239    0.006536 -2.8302e-04 -2.9017e-04  -8.244e-05
mu_asc2       0.006536    0.009192 -9.1364e-04 -2.7930e-04  -6.162e-05
mu_natural -2.8302e-04 -9.1364e-04    0.001514  -8.088e-05   1.228e-05
mu_walking -2.9017e-04 -2.7930e-04  -8.088e-05   4.771e-05   2.758e-06
mu_rent     -8.244e-05  -6.162e-05   1.228e-05   2.758e-06   9.305e-06

Classical correlation matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1         1.0000      0.4256     -0.1785    -0.34362    -0.28976
mu_asc2         0.4256      1.0000     -0.2696    -0.33630    -0.30517
mu_natural     -0.1785     -0.2696      1.0000    -0.17545     0.14936
mu_walking     -0.3436     -0.3363     -0.1755     1.00000     0.01965
mu_rent        -0.2898     -0.3052      0.1494     0.01965     1.00000

Robust correlation matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1        1.00000      0.7511    -0.08014     -0.4628     -0.2977
mu_asc2        0.75106      1.0000    -0.24491     -0.4218     -0.2107
mu_natural    -0.08014     -0.2449     1.00000     -0.3009      0.1035
mu_walking    -0.46282     -0.4218    -0.30093      1.0000      0.1309
mu_rent       -0.29774     -0.2107     0.10347      0.1309      1.0000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
  19077          0.07007516
 166900          0.08525284
 468900          0.08990971
 184400          0.09236095
  18873          0.09986999
 275600          0.10968837
 239400          0.12139356
  13697          0.12431254
  12324          0.13524944
  16841          0.14148970
  15699          0.18233577
  10129          0.18773981
  12788          0.18787129
  14899          0.19412527
 260800          0.19572668
    259          0.19744999
   2030          0.19913174
   1657          0.21087234
   1594          0.21674810
  14210          0.21856184

Changes in parameter estimates from starting values:
               Initial    Estimate  Difference
mu_asc1       -1.00000    -0.89804     0.10196
mu_asc2       -1.00000    -0.88414     0.11586
mu_natural     1.00000     0.51469    -0.48531
mu_walking    -0.01000    -0.02929    -0.01929
mu_rent       -0.10000    -0.02188     0.07812

Settings and functions used in model definition:

apollo_control
--------------
                       Value                                  
modelName              "Clogit_ps_Frankfurt"                  
modelDescr             "ClogitWTP_ps_ Frankfurt"              
indivID                "id"                                   
mixing                 "FALSE"                                
HB                     "FALSE"                                
nCores                 "1"                                    
outputDirectory        "Estimation_results/c_logit/prefspace/"
debug                  "FALSE"                                
workInLogs             "FALSE"                                
seed                   "13"                                   
noValidation           "FALSE"                                
noDiagnostics          "FALSE"                                
calculateLLC           "TRUE"                                 
panelData              "TRUE"                                 
analyticGrad           "TRUE"                                 
analyticGrad_manualSet "FALSE"                                

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                Value
mu_asc1    0.89813225
mu_asc2    0.88429815
mu_natural 0.51480467
mu_walking 0.02929306
mu_rent    0.02187844

Scaling used in computing Hessian
--------------
                Value
mu_asc1    0.89803890
mu_asc2    0.88414367
mu_natural 0.51469209
mu_walking 0.02929332
mu_rent    0.02187829


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = mu_asc1 + mu_natural * Naturnähe_1 + mu_walking * Erreichbarkeit_1 + mu_rent* Miete_1
    
    V[['alt2']] = mu_asc2 + mu_natural * Naturnähe_2 + mu_walking * Erreichbarkeit_2 + mu_rent* Miete_2
    
    V[['alt3']] = mu_natural * Naturnähe_3 + mu_walking * Erreichbarkeit_3 + mu_rent * Miete_3
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    #P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x000001dadfb97e10>
