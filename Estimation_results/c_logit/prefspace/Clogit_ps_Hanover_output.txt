Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Windows.
www.ApolloChoiceModelling.com

Model name                                  : Clogit_ps_Hanover
Model description                           : ClogitWTP_ps_ Hanover
Model run at                                : 2023-04-19 14:34:23
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 289
Number of rows in database                  : 2879
Number of modelled outcomes                 : 2879

Number of cores used                        :  1 
Model without mixing

LL(start)                                   : -2780.1
LL at equal shares, LL(0)                   : -3162.9
LL at observed shares, LL(C)                : -2497.17
LL(final)                                   : -2170.88
Rho-squared vs equal shares                  :  0.3136 
Adj.Rho-squared vs equal shares              :  0.3121 
Rho-squared vs observed shares               :  0.1307 
Adj.Rho-squared vs observed shares           :  0.1287 
AIC                                         :  4351.76 
BIC                                         :  4381.59 

Estimated parameters                        :  5
Time taken (hh:mm:ss)                       :  00:00:7.45 
     pre-estimation                         :  00:00:5.66 
     estimation                             :  00:00:0.66 
     post-estimation                        :  00:00:1.13 
Iterations                                  :  15  
Min abs eigenvalue of Hessian               :  180.7313 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
              Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1       -1.00887    0.062339     -16.184    0.105756        -9.540
mu_asc2       -0.96686    0.063052     -15.334    0.105859        -9.134
mu_natural     0.43254    0.024124      17.930    0.045362         9.535
mu_walking    -0.01589    0.002136      -7.437    0.004946        -3.212
mu_rent       -0.02135    0.002431      -8.781    0.004267        -5.004


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  2879.00 2879.00 2879.00
Times chosen                      458.00  502.00 1919.00
Percentage chosen overall          15.91   17.44   66.66
Percentage chosen when available   15.91   17.44   66.66


Classical covariance matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1       0.003886    0.001574 -1.8345e-04  -4.855e-05  -4.183e-05
mu_asc2       0.001574    0.003976 -3.2356e-04  -5.174e-05  -5.146e-05
mu_natural -1.8345e-04 -3.2356e-04  5.8197e-04  -2.608e-06   1.115e-05
mu_walking  -4.855e-05  -5.174e-05  -2.608e-06   4.563e-06   1.837e-07
mu_rent     -4.183e-05  -5.146e-05   1.115e-05   1.837e-07   5.911e-06

Robust covariance matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1       0.011184    0.008264   8.372e-05 -2.2161e-04 -1.2935e-04
mu_asc2       0.008264    0.011206 -4.9609e-04 -1.8702e-04 -1.2968e-04
mu_natural   8.372e-05 -4.9609e-04    0.002058  -5.656e-05   2.190e-05
mu_walking -2.2161e-04 -1.8702e-04  -5.656e-05   2.446e-05   5.004e-06
mu_rent    -1.2935e-04 -1.2968e-04   2.190e-05   5.004e-06   1.820e-05

Classical correlation matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1         1.0000      0.4004    -0.12198    -0.36453    -0.27599
mu_asc2         0.4004      1.0000    -0.21272    -0.38413    -0.33568
mu_natural     -0.1220     -0.2127     1.00000    -0.05061     0.19014
mu_walking     -0.3645     -0.3841    -0.05061     1.00000     0.03536
mu_rent        -0.2760     -0.3357     0.19014     0.03536     1.00000

Robust correlation matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1        1.00000      0.7382     0.01745     -0.4237     -0.2867
mu_asc2        0.73819      1.0000    -0.10331     -0.3572     -0.2871
mu_natural     0.01745     -0.1033     1.00000     -0.2521      0.1131
mu_walking    -0.42369     -0.3572    -0.25210      1.0000      0.2371
mu_rent       -0.28667     -0.2871     0.11314      0.2371      1.0000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
   3702          0.07541058
 422700          0.08093509
  10569          0.08328860
   4698          0.08542894
 218200          0.08791957
   3534          0.08989360
   3057          0.09796715
  14369          0.11008010
  16177          0.13474422
 437000          0.14470926
   5605          0.15629803
  14965          0.15641442
 196700          0.15846281
  11230          0.17651753
 454400          0.18213452
  19448          0.18561652
   4771          0.18790272
  19412          0.18906544
  15721          0.19515810
 288900          0.20014251

Changes in parameter estimates from starting values:
               Initial    Estimate  Difference
mu_asc1       -1.00000    -1.00887   -0.008872
mu_asc2       -1.00000    -0.96686    0.033136
mu_natural     1.00000     0.43254   -0.567457
mu_walking    -0.01000    -0.01589   -0.005887
mu_rent       -0.10000    -0.02135    0.078651

Settings and functions used in model definition:

apollo_control
--------------
                       Value                                  
modelName              "Clogit_ps_Hanover"                    
modelDescr             "ClogitWTP_ps_ Hanover"                
indivID                "id"                                   
mixing                 "FALSE"                                
HB                     "FALSE"                                
nCores                 "1"                                    
outputDirectory        "Estimation_results/c_logit/prefspace/"
debug                  "FALSE"                                
workInLogs             "FALSE"                                
seed                   "13"                                   
noValidation           "FALSE"                                
noDiagnostics          "FALSE"                                
calculateLLC           "TRUE"                                 
panelData              "TRUE"                                 
analyticGrad           "TRUE"                                 
analyticGrad_manualSet "FALSE"                                

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                Value
mu_asc1    1.00894893
mu_asc2    0.96693544
mu_natural 0.43257049
mu_walking 0.01588760
mu_rent    0.02134897

Scaling used in computing Hessian
--------------
                Value
mu_asc1    1.00887234
mu_asc2    0.96686385
mu_natural 0.43254340
mu_walking 0.01588739
mu_rent    0.02134854


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = mu_asc1 + mu_natural * Naturnähe_1 + mu_walking * Erreichbarkeit_1 + mu_rent* Miete_1
    
    V[['alt2']] = mu_asc2 + mu_natural * Naturnähe_2 + mu_walking * Erreichbarkeit_2 + mu_rent* Miete_2
    
    V[['alt3']] = mu_natural * Naturnähe_3 + mu_walking * Erreichbarkeit_3 + mu_rent * Miete_3
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    #P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x000001dadfb97e10>
