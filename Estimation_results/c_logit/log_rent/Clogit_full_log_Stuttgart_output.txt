Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Windows.
www.ApolloChoiceModelling.com

Model name                                  : Clogit_full_log_Stuttgart
Model description                           : ClogitWTP_full_log Stuttgart
Model run at                                : 2023-04-26 09:11:31
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 211
Number of rows in database                  : 2107
Number of modelled outcomes                 : 2107

Number of cores used                        :  1 
Model without mixing

LL(start)                                   : -1561.72
LL at equal shares, LL(0)                   : -2314.78
LL at observed shares, LL(C)                : -1816.62
LL(final)                                   : -1521.49
Rho-squared vs equal shares                  :  0.3427 
Adj.Rho-squared vs equal shares              :  0.3405 
Rho-squared vs observed shares               :  0.1625 
Adj.Rho-squared vs observed shares           :  0.1597 
AIC                                         :  3052.97 
BIC                                         :  3081.24 

Estimated parameters                        :  5
Time taken (hh:mm:ss)                       :  00:00:7.97 
     pre-estimation                         :  00:00:5.88 
     estimation                             :  00:00:1.61 
     post-estimation                        :  00:00:0.48 
Iterations                                  :  24  
Min abs eigenvalue of Hessian               :  0.157648 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
              Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1       -0.03504    0.004480      -7.821    0.007173        -4.885
mu_asc2       -0.02756    0.003962      -6.957    0.005966        -4.620
mu_natural     0.01486    0.001786       8.320    0.002789         5.328
mu_walking -6.2134e-04   9.947e-05      -6.247  2.6700e-04        -2.327
mu_rent      -28.62081    2.518578     -11.364    3.661961        -7.816


Overview of choices for MNL model component :
                                    alt1   alt2    alt3
Times available                  2107.00 2107.0 2107.00
Times chosen                      306.00  392.0 1409.00
Percentage chosen overall          14.52   18.6   66.87
Percentage chosen when available   14.52   18.6   66.87


Classical covariance matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1      2.007e-05   1.352e-05  -5.700e-06   1.256e-07   -0.009287
mu_asc2      1.352e-05   1.570e-05  -5.080e-06   9.699e-08   -0.007946
mu_natural  -5.700e-06  -5.080e-06   3.191e-06  -9.014e-08    0.003733
mu_walking   1.256e-07   9.699e-08  -9.014e-08   9.894e-09 -1.3529e-04
mu_rent      -0.009287   -0.007946    0.003733 -1.3529e-04    6.343237

Robust covariance matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1      5.145e-05   3.737e-05  -9.654e-06  -6.079e-07   -0.020464
mu_asc2      3.737e-05   3.559e-05  -8.233e-06  -4.358e-07   -0.015477
mu_natural  -9.654e-06  -8.233e-06   7.781e-06  -2.575e-07    0.007401
mu_walking  -6.079e-07  -4.358e-07  -2.575e-07   7.129e-08  -5.236e-05
mu_rent       -0.02046    -0.01548    0.007401  -5.236e-05   13.409958

Classical correlation matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1         1.0000      0.7617     -0.7123      0.2818     -0.8231
mu_asc2         0.7617      1.0000     -0.7179      0.2461     -0.7963
mu_natural     -0.7123     -0.7179      1.0000     -0.5073      0.8296
mu_walking      0.2818      0.2461     -0.5073      1.0000     -0.5400
mu_rent        -0.8231     -0.7963      0.8296     -0.5400      1.0000

Robust correlation matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1         1.0000      0.8734     -0.4825    -0.31741    -0.77912
mu_asc2         0.8734      1.0000     -0.4948    -0.27359    -0.70847
mu_natural     -0.4825     -0.4948      1.0000    -0.34566     0.72448
mu_walking     -0.3174     -0.2736     -0.3457     1.00000    -0.05355
mu_rent        -0.7791     -0.7085      0.7245    -0.05355     1.00000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
  15899          0.04685057
 204500          0.05840972
  14392          0.07665822
  17236          0.12500678
    249          0.12814945
  14140          0.14302619
  11866          0.14949273
 230500          0.17817559
  20056          0.18250761
 192900          0.18988717
 371900          0.19096532
  17044          0.19226673
  20005          0.20505998
  17276          0.21831683
  13488          0.22419466
  18300          0.23618389
   5365          0.23983715
 193000          0.25021028
 199800          0.25035412
 264800          0.27186588

Changes in parameter estimates from starting values:
               Initial    Estimate  Difference
mu_asc1       -0.05000    -0.03504     0.01496
mu_asc2       -0.05000    -0.02756     0.02244
mu_natural     0.03000     0.01486    -0.01514
mu_walking -4.0000e-04 -6.2134e-04 -2.2134e-04
mu_rent      -20.00000   -28.62081    -8.62081

Settings and functions used in model definition:

apollo_control
--------------
                       Value                                 
modelName              "Clogit_full_log_Stuttgart"           
modelDescr             "ClogitWTP_full_log Stuttgart"        
indivID                "id"                                  
mixing                 "FALSE"                               
HB                     "FALSE"                               
nCores                 "1"                                   
outputDirectory        "Estimation_results/c_logit/log_rent/"
debug                  "FALSE"                               
workInLogs             "FALSE"                               
seed                   "13"                                  
noValidation           "FALSE"                               
noDiagnostics          "FALSE"                               
calculateLLC           "TRUE"                                
panelData              "TRUE"                                
analyticGrad           "TRUE"                                
analyticGrad_manualSet "FALSE"                               

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                  Value
mu_asc1    3.505647e-02
mu_asc2    2.756563e-02
mu_natural 1.485719e-02
mu_walking 6.213823e-04
mu_rent    2.861571e+01

Scaling used in computing Hessian
--------------
                  Value
mu_asc1    3.503999e-02
mu_asc2    2.756119e-02
mu_natural 1.486280e-02
mu_walking 6.213412e-04
mu_rent    2.862081e+01


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = -(mu_rent)* (mu_asc1 + mu_natural * Naturnähe_1 + mu_walking * Erreichbarkeit_1 - log(Miete_1))
    
    V[['alt2']] = -(mu_rent)* (mu_asc2 + mu_natural * Naturnähe_2 + mu_walking * Erreichbarkeit_2 - log(Miete_2))
    
    V[['alt3']] = -(mu_rent)* (mu_natural * Naturnähe_3 + mu_walking * Erreichbarkeit_3 - log(Miete_3))
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    #P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x000002239e78ddd8>
