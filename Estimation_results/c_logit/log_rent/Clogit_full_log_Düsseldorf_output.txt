Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Windows.
www.ApolloChoiceModelling.com

Model name                                  : Clogit_full_log_Düsseldorf
Model description                           : ClogitWTP_full_log Düsseldorf
Model run at                                : 2023-04-26 09:09:39
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 327
Number of rows in database                  : 3252
Number of modelled outcomes                 : 3252

Number of cores used                        :  1 
Model without mixing

LL(start)                                   : -2418.67
LL at equal shares, LL(0)                   : -3572.69
LL at observed shares, LL(C)                : -2948.89
LL(final)                                   : -2376.81
Rho-squared vs equal shares                  :  0.3347 
Adj.Rho-squared vs equal shares              :  0.3333 
Rho-squared vs observed shares               :  0.194 
Adj.Rho-squared vs observed shares           :  0.1923 
AIC                                         :  4763.62 
BIC                                         :  4794.05 

Estimated parameters                        :  5
Time taken (hh:mm:ss)                       :  00:00:7.13 
     pre-estimation                         :  00:00:5.87 
     estimation                             :  00:00:0.73 
     post-estimation                        :  00:00:0.53 
Iterations                                  :  15  
Min abs eigenvalue of Hessian               :  0.318644 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
              Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1      -0.041604    0.005540      -7.510    0.008211        -5.067
mu_asc2      -0.040583    0.005425      -7.480    0.007412        -5.475
mu_natural    0.028834    0.003023       9.537    0.004504         6.401
mu_walking   -0.001462  1.8455e-04      -7.920  3.8324e-04        -3.814
mu_rent     -19.768734    1.771510     -11.159    2.483767        -7.959


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  3252.00 3252.00 3252.00
Times chosen                      559.00  623.00 2070.00
Percentage chosen overall          17.19   19.16   63.65
Percentage chosen when available   17.19   19.16   63.65


Classical covariance matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1      3.069e-05   2.478e-05  -1.344e-05   4.481e-07   -0.008336
mu_asc2      2.478e-05   2.943e-05  -1.335e-05   4.268e-07   -0.008123
mu_natural  -1.344e-05  -1.335e-05   9.141e-06  -3.790e-07    0.004910
mu_walking   4.481e-07   4.268e-07  -3.790e-07   3.406e-08 -2.2323e-04
mu_rent      -0.008336   -0.008123    0.004910 -2.2323e-04    3.138249

Robust covariance matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1      6.742e-05   5.419e-05  -2.471e-05   9.044e-08   -0.016151
mu_asc2      5.419e-05   5.494e-05  -2.346e-05   2.410e-07   -0.014163
mu_natural  -2.471e-05  -2.346e-05   2.029e-05  -9.142e-07    0.009678
mu_walking   9.044e-08   2.410e-07  -9.142e-07   1.469e-07 -3.6345e-04
mu_rent       -0.01615    -0.01416    0.009678 -3.6345e-04    6.169100

Classical correlation matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1         1.0000      0.8244     -0.8026      0.4383     -0.8495
mu_asc2         0.8244      1.0000     -0.8142      0.4262     -0.8451
mu_natural     -0.8026     -0.8142      1.0000     -0.6794      0.9168
mu_walking      0.4383      0.4262     -0.6794      1.0000     -0.6828
mu_rent        -0.8495     -0.8451      0.9168     -0.6828      1.0000

Robust correlation matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1        1.00000     0.89042     -0.6681     0.02874     -0.7919
mu_asc2        0.89042     1.00000     -0.7026     0.08482     -0.7693
mu_natural    -0.66809    -0.70257      1.0000    -0.52962      0.8651
mu_walking     0.02874     0.08482     -0.5296     1.00000     -0.3818
mu_rent       -0.79195    -0.76932      0.8651    -0.38182      1.0000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
 231700          0.03367586
  17880          0.06255788
 179900          0.06504896
  14994          0.11282685
  15665          0.13304360
  19373          0.14626669
  17515          0.15038261
  16669          0.17005694
  18563          0.18022120
   4429          0.18335995
 460400          0.18358743
 268800          0.19158409
   3386          0.19592208
  20105          0.19784226
 241400          0.20978035
 181400          0.21159692
 408500          0.21360282
  15212          0.21372406
   2712          0.21653101
  19946          0.22051526

Changes in parameter estimates from starting values:
               Initial    Estimate  Difference
mu_asc1       -0.05000   -0.041604    0.008396
mu_asc2       -0.05000   -0.040583    0.009417
mu_natural     0.03000    0.028834   -0.001166
mu_walking -4.0000e-04   -0.001462   -0.001062
mu_rent      -20.00000  -19.768734    0.231266

Settings and functions used in model definition:

apollo_control
--------------
                       Value                                 
modelName              "Clogit_full_log_Düsseldorf"          
modelDescr             "ClogitWTP_full_log Düsseldorf"       
indivID                "id"                                  
mixing                 "FALSE"                               
HB                     "FALSE"                               
nCores                 "1"                                   
outputDirectory        "Estimation_results/c_logit/log_rent/"
debug                  "FALSE"                               
workInLogs             "FALSE"                               
seed                   "13"                                  
noValidation           "FALSE"                               
noDiagnostics          "FALSE"                               
calculateLLC           "TRUE"                                
panelData              "TRUE"                                
analyticGrad           "TRUE"                                
analyticGrad_manualSet "FALSE"                               

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                  Value
mu_asc1     0.041603961
mu_asc2     0.040582223
mu_natural  0.028834050
mu_walking  0.001461673
mu_rent    19.768465429

Scaling used in computing Hessian
--------------
                  Value
mu_asc1     0.041604254
mu_asc2     0.040582580
mu_natural  0.028833725
mu_walking  0.001461687
mu_rent    19.768733748


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = -(mu_rent)* (mu_asc1 + mu_natural * Naturnähe_1 + mu_walking * Erreichbarkeit_1 - log(Miete_1))
    
    V[['alt2']] = -(mu_rent)* (mu_asc2 + mu_natural * Naturnähe_2 + mu_walking * Erreichbarkeit_2 - log(Miete_2))
    
    V[['alt3']] = -(mu_rent)* (mu_natural * Naturnähe_3 + mu_walking * Erreichbarkeit_3 - log(Miete_3))
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    #P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x000002239e78ddd8>
