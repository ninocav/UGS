Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Windows.
www.ApolloChoiceModelling.com

Model name                                  : Clogit_full_log_Bremen
Model description                           : ClogitWTP_full_log Bremen
Model run at                                : 2023-04-26 09:08:47
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 187
Number of rows in database                  : 1866
Number of modelled outcomes                 : 1866

Number of cores used                        :  1 
Model without mixing

LL(start)                                   : -1306.68
LL at equal shares, LL(0)                   : -2050.01
LL at observed shares, LL(C)                : -1551.26
LL(final)                                   : -1277.17
Rho-squared vs equal shares                  :  0.377 
Adj.Rho-squared vs equal shares              :  0.3746 
Rho-squared vs observed shares               :  0.1767 
Adj.Rho-squared vs observed shares           :  0.1735 
AIC                                         :  2564.34 
BIC                                         :  2592 

Estimated parameters                        :  5
Time taken (hh:mm:ss)                       :  00:00:6.88 
     pre-estimation                         :  00:00:5.68 
     estimation                             :  00:00:0.74 
     post-estimation                        :  00:00:0.46 
Iterations                                  :  17  
Min abs eigenvalue of Hessian               :  0.149243 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
              Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1       -0.05339    0.008394      -6.360    0.011556        -4.620
mu_asc2       -0.04779    0.007747      -6.169    0.011361        -4.207
mu_natural     0.02528    0.003618       6.987    0.004684         5.397
mu_walking -9.6359e-04  1.7536e-04      -5.495  3.6762e-04        -2.621
mu_rent      -21.76869    2.588510      -8.410    3.223791        -6.753


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  1866.00 1866.00 1866.00
Times chosen                      254.00  324.00 1288.00
Percentage chosen overall          13.61   17.36   69.02
Percentage chosen when available   13.61   17.36   69.02


Classical covariance matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1      7.047e-05   5.624e-05  -2.551e-05   6.961e-07   -0.019556
mu_asc2      5.624e-05   6.001e-05  -2.392e-05   6.108e-07   -0.017826
mu_natural  -2.551e-05  -2.392e-05   1.309e-05  -4.043e-07    0.008470
mu_walking   6.961e-07   6.108e-07  -4.043e-07   3.075e-08 -2.9050e-04
mu_rent       -0.01956    -0.01783    0.008470 -2.9050e-04    6.700385

Robust covariance matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1     1.3354e-04  1.1600e-04  -3.559e-05  -5.712e-07    -0.03262
mu_asc2     1.1600e-04  1.2908e-04  -3.649e-05  -8.090e-07    -0.02955
mu_natural  -3.559e-05  -3.649e-05   2.194e-05  -4.361e-07     0.01209
mu_walking  -5.712e-07  -8.090e-07  -4.361e-07   1.351e-07  -2.628e-05
mu_rent       -0.03262    -0.02955     0.01209  -2.628e-05    10.39283

Classical correlation matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1         1.0000      0.8648     -0.8398      0.4729     -0.9000
mu_asc2         0.8648      1.0000     -0.8535      0.4496     -0.8890
mu_natural     -0.8398     -0.8535      1.0000     -0.6372      0.9043
mu_walking      0.4729      0.4496     -0.6372      1.0000     -0.6400
mu_rent        -0.9000     -0.8890      0.9043     -0.6400      1.0000

Robust correlation matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1         1.0000      0.8835     -0.6575    -0.13447    -0.87548
mu_asc2         0.8835      1.0000     -0.6856    -0.19369    -0.80689
mu_natural     -0.6575     -0.6856      1.0000    -0.25327     0.80074
mu_walking     -0.1345     -0.1937     -0.2533     1.00000    -0.02218
mu_rent        -0.8755     -0.8069      0.8007    -0.02218     1.00000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
  12959           0.0186849
  11736           0.1180628
 626200           0.1188004
 302700           0.1354694
  16976           0.1371950
  18140           0.1415716
  16974           0.1486879
  14824           0.1767639
  12832           0.2010366
   1586           0.2127488
  14023           0.2172243
  19182           0.2220718
  12459           0.2424604
  16141           0.2502594
   2821           0.2620457
  11781           0.2834436
   3981           0.3044016
  16565           0.3056238
  16663           0.3123426
    135           0.3184821

Changes in parameter estimates from starting values:
               Initial    Estimate  Difference
mu_asc1       -0.05000    -0.05339   -0.003388
mu_asc2       -0.05000    -0.04779    0.002207
mu_natural     0.03000     0.02528   -0.004721
mu_walking -4.0000e-04 -9.6359e-04 -5.6359e-04
mu_rent      -20.00000   -21.76869   -1.768685

Settings and functions used in model definition:

apollo_control
--------------
                       Value                                 
modelName              "Clogit_full_log_Bremen"              
modelDescr             "ClogitWTP_full_log Bremen"           
indivID                "id"                                  
mixing                 "FALSE"                               
HB                     "FALSE"                               
nCores                 "1"                                   
outputDirectory        "Estimation_results/c_logit/log_rent/"
debug                  "FALSE"                               
workInLogs             "FALSE"                               
seed                   "13"                                  
noValidation           "FALSE"                               
noDiagnostics          "FALSE"                               
calculateLLC           "TRUE"                                
panelData              "TRUE"                                
analyticGrad           "TRUE"                                
analyticGrad_manualSet "FALSE"                               

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                  Value
mu_asc1    5.337668e-02
mu_asc2    4.778937e-02
mu_natural 2.527543e-02
mu_walking 9.638748e-04
mu_rent    2.176670e+01

Scaling used in computing Hessian
--------------
                  Value
mu_asc1     0.053388099
mu_asc2     0.047793387
mu_natural  0.025279364
mu_walking  0.000963588
mu_rent    21.768685413


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = -(mu_rent)* (mu_asc1 + mu_natural * Naturnähe_1 + mu_walking * Erreichbarkeit_1 - log(Miete_1))
    
    V[['alt2']] = -(mu_rent)* (mu_asc2 + mu_natural * Naturnähe_2 + mu_walking * Erreichbarkeit_2 - log(Miete_2))
    
    V[['alt3']] = -(mu_rent)* (mu_natural * Naturnähe_3 + mu_walking * Erreichbarkeit_3 - log(Miete_3))
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    #P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x000002239e78ddd8>
