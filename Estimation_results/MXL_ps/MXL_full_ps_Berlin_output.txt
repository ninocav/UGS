Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Linux.
www.ApolloChoiceModelling.com

Model name                                  : MXL_full_ps_Berlin
Model description                           : PS_full_ Berlin
Model run at                                : 2023-04-19 13:13:50
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 1319
Number of rows in database                  : 13163
Number of modelled outcomes                 : 13163

Number of cores used                        :  31 
Number of inter-individual draws            : 2000 (sobol)

LL(start)                                   : -8660.22
LL at equal shares, LL(0)                   : -14461.03
LL at observed shares, LL(C)                : -11687.99
LL(final)                                   : -7741.97
Rho-squared vs equal shares                  :  0.4646 
Adj.Rho-squared vs equal shares              :  0.4639 
Rho-squared vs observed shares               :  0.3376 
Adj.Rho-squared vs observed shares           :  0.3368 
AIC                                         :  15503.94 
BIC                                         :  15578.79 

Estimated parameters                        :  10
Time taken (hh:mm:ss)                       :  00:15:19.45 
     pre-estimation                         :  00:08:3.88 
     estimation                             :  00:02:4.47 
     post-estimation                        :  00:05:11.1 
Iterations                                  :  26  
Min abs eigenvalue of Hessian               :  99.20158 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
               Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1        -1.05670    0.068373      -15.45    0.078849        -13.40
mu_asc2        -1.13983    0.070482      -16.17    0.079703        -14.30
mu_natural      1.06688    0.039769       26.83    0.048130         22.17
mu_walking     -0.12736    0.006538      -19.48    0.008500        -14.98
mu_rent        -3.33089    0.078670      -42.34    0.075528        -44.10
sig_asc1        1.50325    0.078316       19.19    0.085546         17.57
sig_asc2        1.60949    0.083566       19.26    0.103519         15.55
sig_natural     0.85768    0.039820       21.54    0.045729         18.76
sig_walking    -0.08412    0.004546      -18.51    0.005530        -15.21
sig_rent        1.46184    0.036142       40.45    0.029657         49.29


Overview of choices for MNL model component :
                                     alt1     alt2     alt3
Times available                  13163.00 13163.00 13163.00
Times chosen                      2216.00  2372.00  8575.00
Percentage chosen overall           16.84    18.02    65.14
Percentage chosen when available    16.84    18.02    65.14


Classical covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        0.004675  9.1519e-04  -5.194e-05  -8.361e-05  5.3399e-04   -0.001871 -3.0145e-04 -1.5543e-04  -3.389e-05
mu_asc2      9.1519e-04    0.004968  -9.780e-05  -7.954e-05  5.4076e-04 -2.6861e-04   -0.001984 -1.1832e-04  -4.405e-05
mu_natural   -5.194e-05  -9.780e-05    0.001582  -9.965e-05  -6.405e-05  2.7201e-04  3.2324e-04  5.8388e-04  -5.900e-05
mu_walking   -8.361e-05  -7.954e-05  -9.965e-05   4.274e-05  -2.325e-05  -2.993e-05  -2.349e-05  -4.521e-05   2.389e-05
mu_rent      5.3399e-04  5.4076e-04  -6.405e-05  -2.325e-05    0.006189  7.2828e-04  9.0024e-04  2.4594e-04  -1.129e-05
sig_asc1      -0.001871 -2.6861e-04  2.7201e-04  -2.993e-05  7.2828e-04    0.006133    0.002080  3.9272e-04  -3.187e-05
sig_asc2    -3.0145e-04   -0.001984  3.2324e-04  -2.349e-05  9.0024e-04    0.002080    0.006983  2.5824e-04  -9.902e-06
sig_natural -1.5543e-04 -1.1832e-04  5.8388e-04  -4.521e-05  2.4594e-04  3.9272e-04  2.5824e-04    0.001586  -2.977e-05
sig_walking  -3.389e-05  -4.405e-05  -5.900e-05   2.389e-05  -1.129e-05  -3.187e-05  -9.902e-06  -2.977e-05   2.067e-05
sig_rent    -1.2843e-04  -8.386e-05  2.2176e-04  -6.599e-05   -0.001941  -9.736e-05 -1.7721e-04   3.182e-05  -4.358e-05
               sig_rent
mu_asc1     -1.2843e-04
mu_asc2      -8.386e-05
mu_natural   2.2176e-04
mu_walking   -6.599e-05
mu_rent       -0.001941
sig_asc1     -9.736e-05
sig_asc2    -1.7721e-04
sig_natural   3.182e-05
sig_walking  -4.358e-05
sig_rent       0.001306

Robust covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        0.006217    0.004333  3.1474e-04 -1.5441e-04  4.8012e-04   -0.003190   -0.002586 -3.5568e-04  -8.396e-05
mu_asc2        0.004333    0.006353 -1.1326e-04 -1.2299e-04   2.515e-05   -0.002250   -0.003247 -2.6982e-04  -8.308e-05
mu_natural   3.1474e-04 -1.1326e-04    0.002316 -2.3550e-04  2.4096e-04 -4.3240e-04 -5.8423e-04  9.5526e-04 -1.1642e-04
mu_walking  -1.5441e-04 -1.2299e-04 -2.3550e-04   7.226e-05  -8.140e-05   6.402e-05  1.2560e-04  -6.713e-05   3.727e-05
mu_rent      4.8012e-04   2.515e-05  2.4096e-04  -8.140e-05    0.005704  8.6794e-04    0.001264  1.5403e-04  -2.332e-05
sig_asc1      -0.003190   -0.002250 -4.3240e-04   6.402e-05  8.6794e-04    0.007318    0.006085   8.714e-05   3.236e-05
sig_asc2      -0.002586   -0.003247 -5.8423e-04  1.2560e-04    0.001264    0.006085    0.010716   3.009e-05   9.908e-05
sig_natural -3.5568e-04 -2.6982e-04  9.5526e-04  -6.713e-05  1.5403e-04   8.714e-05   3.009e-05    0.002091  -4.818e-05
sig_walking  -8.396e-05  -8.308e-05 -1.1642e-04   3.727e-05  -2.332e-05   3.236e-05   9.908e-05  -4.818e-05   3.058e-05
sig_rent      4.064e-05  1.6114e-04  3.3386e-04  -9.759e-05   -0.001556 -3.2168e-04 -5.1598e-04   8.691e-05  -6.761e-05
               sig_rent
mu_asc1       4.064e-05
mu_asc2      1.6114e-04
mu_natural   3.3386e-04
mu_walking   -9.759e-05
mu_rent       -0.001556
sig_asc1    -3.2168e-04
sig_asc2    -5.1598e-04
sig_natural   8.691e-05
sig_walking  -6.761e-05
sig_rent     8.7954e-04

Classical correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         1.00000     0.18991    -0.01910    -0.18705     0.09927    -0.34948    -0.05276    -0.05709    -0.10903
mu_asc2         0.18991     1.00000    -0.03489    -0.17262     0.09753    -0.04866    -0.33682    -0.04216    -0.13747
mu_natural     -0.01910    -0.03489     1.00000    -0.38326    -0.02047     0.08734     0.09726     0.36871    -0.32633
mu_walking     -0.18705    -0.17262    -0.38326     1.00000    -0.04520    -0.05846    -0.04299    -0.17365     0.80392
mu_rent         0.09927     0.09753    -0.02047    -0.04520     1.00000     0.11820     0.13694     0.07851    -0.03157
sig_asc1       -0.34948    -0.04866     0.08734    -0.05846     0.11820     1.00000     0.31789     0.12593    -0.08951
sig_asc2       -0.05276    -0.33682     0.09726    -0.04299     0.13694     0.31789     1.00000     0.07761    -0.02606
sig_natural    -0.05709    -0.04216     0.36871    -0.17365     0.07851     0.12593     0.07761     1.00000    -0.16443
sig_walking    -0.10903    -0.13747    -0.32633     0.80392    -0.03157    -0.08951    -0.02606    -0.16443     1.00000
sig_rent       -0.05197    -0.03292     0.15428    -0.27926    -0.68252    -0.03440    -0.05868     0.02211    -0.26525
               sig_rent
mu_asc1        -0.05197
mu_asc2        -0.03292
mu_natural      0.15428
mu_walking     -0.27926
mu_rent        -0.68252
sig_asc1       -0.03440
sig_asc2       -0.05868
sig_natural     0.02211
sig_walking    -0.26525
sig_rent        1.00000

Robust correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         1.00000    0.689430     0.08294    -0.23038    0.080620    -0.47295   -0.316810   -0.098644    -0.19256
mu_asc2         0.68943    1.000000    -0.02953    -0.18153    0.004177    -0.32997   -0.393495   -0.074029    -0.18848
mu_natural      0.08294   -0.029526     1.00000    -0.57562    0.066288    -0.10502   -0.117260    0.434027    -0.43741
mu_walking     -0.23038   -0.181528    -0.57562     1.00000   -0.126791     0.08804    0.142731   -0.172695     0.79286
mu_rent         0.08062    0.004177     0.06629    -0.12679    1.000000     0.13433    0.161696    0.044596    -0.05584
sig_asc1       -0.47295   -0.329971    -0.10502     0.08804    0.134333     1.00000    0.687151    0.022275     0.06840
sig_asc2       -0.31681   -0.393495    -0.11726     0.14273    0.161696     0.68715    1.000000    0.006357     0.17307
sig_natural    -0.09864   -0.074029     0.43403    -0.17270    0.044596     0.02228    0.006357    1.000000    -0.19052
sig_walking    -0.19256   -0.188480    -0.43741     0.79286   -0.055839     0.06840    0.173072   -0.190516     1.00000
sig_rent        0.01738    0.068171     0.23389    -0.38710   -0.694838    -0.12679   -0.168068    0.064082    -0.41226
               sig_rent
mu_asc1         0.01738
mu_asc2         0.06817
mu_natural      0.23389
mu_walking     -0.38710
mu_rent        -0.69484
sig_asc1       -0.12679
sig_asc2       -0.16807
sig_natural     0.06408
sig_walking    -0.41226
sig_rent        1.00000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
  14810           0.1416556
 355900           0.1474075
  15016           0.1609627
   4787           0.1645240
  14750           0.1670304
 541100           0.1710348
  10656           0.1782658
  13293           0.1807567
  17523           0.1854670
 360000           0.1884641
   1329           0.1901937
  13726           0.1904585
   3485           0.1911060
 477600           0.1914795
  13719           0.1930111
   3315           0.1942002
  14163           0.1953339
  12892           0.1955961
 166600           0.1956811
   1952           0.1959513

Changes in parameter estimates from starting values:
                Initial    Estimate  Difference
mu_asc1         -1.0000    -1.05670    -0.05670
mu_asc2         -1.0000    -1.13983    -0.13983
mu_natural       1.0000     1.06688     0.06688
mu_walking      -0.2000    -0.12736     0.07264
mu_rent         -2.0000    -3.33089    -1.33089
sig_asc1         1.0000     1.50325     0.50325
sig_asc2         1.0000     1.60949     0.60949
sig_natural      1.0000     0.85768    -0.14232
sig_walking      0.5000    -0.08412    -0.58412
sig_rent         1.0000     1.46184     0.46184

Settings and functions used in model definition:

apollo_control
--------------
                       Value                       
modelName              "MXL_full_ps_Berlin"        
modelDescr             "PS_full_ Berlin"           
indivID                "id"                        
mixing                 "TRUE"                      
HB                     "FALSE"                     
nCores                 "31"                        
outputDirectory        "Estimation_results/MXL_ps/"
debug                  "FALSE"                     
workInLogs             "FALSE"                     
seed                   "13"                        
noValidation           "FALSE"                     
noDiagnostics          "FALSE"                     
calculateLLC           "TRUE"                      
panelData              "TRUE"                      
analyticGrad           "TRUE"                      
analyticGrad_manualSet "FALSE"                     

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                 Value
mu_asc1     1.05668816
mu_asc2     1.13980053
mu_natural  1.06691235
mu_walking  0.12736291
mu_rent     3.33095005
sig_asc1    1.50324419
sig_asc2    1.60958398
sig_natural 0.85764264
sig_walking 0.08412031
sig_rent    1.46186286

Scaling used in computing Hessian
--------------
                 Value
mu_asc1     1.05669575
mu_asc2     1.13983136
mu_natural  1.06687711
mu_walking  0.12736221
mu_rent     3.33089008
sig_asc1    1.50324535
sig_asc2    1.60949398
sig_natural 0.85767706
sig_walking 0.08412437
sig_rent    1.46184314


apollo_randCoeff
----------------
function(apollo_beta, apollo_inputs){
    randcoeff = list()
    
    randcoeff[["b_mu_asc1"]] = mu_asc1 + sig_asc1 * draws_asc1
    randcoeff[["b_mu_asc2"]] = mu_asc2 + sig_asc2 * draws_asc2
    randcoeff[["b_mu_natural"]] = mu_natural + sig_natural * draws_natural
    randcoeff[["b_mu_walking"]] = mu_walking + sig_walking * draws_walking
    randcoeff[["b_mu_rent"]] = -exp(mu_rent + sig_rent * draws_rent)
    
    return(randcoeff)
  }
<bytecode: 0x564c176bdf48>


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = b_mu_asc1 + b_mu_natural * Naturnähe_1 + b_mu_walking * Erreichbarkeit_1 + b_mu_rent * Miete_1
    
    V[['alt2']] = b_mu_asc2 + b_mu_natural * Naturnähe_2 + b_mu_walking * Erreichbarkeit_2 + b_mu_rent * Miete_2
    
    V[['alt3']] = b_mu_natural * Naturnähe_3 + b_mu_walking * Erreichbarkeit_3 + b_mu_rent * Miete_3
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x564c168daf50>
