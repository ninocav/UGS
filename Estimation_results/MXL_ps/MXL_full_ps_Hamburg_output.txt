Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Linux.
www.ApolloChoiceModelling.com

Model name                                  : MXL_full_ps_Hamburg
Model description                           : PS_full_ Hamburg
Model run at                                : 2023-04-19 14:00:24
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 883
Number of rows in database                  : 8803
Number of modelled outcomes                 : 8803

Number of cores used                        :  31 
Number of inter-individual draws            : 2000 (sobol)

LL(start)                                   : -5644.52
LL at equal shares, LL(0)                   : -9671.08
LL at observed shares, LL(C)                : -7574.6
LL(final)                                   : -4995.49
Rho-squared vs equal shares                  :  0.4835 
Adj.Rho-squared vs equal shares              :  0.4824 
Rho-squared vs observed shares               :  0.3405 
Adj.Rho-squared vs observed shares           :  0.3392 
AIC                                         :  10010.99 
BIC                                         :  10081.82 

Estimated parameters                        :  10
Time taken (hh:mm:ss)                       :  00:09:23.27 
     pre-estimation                         :  00:04:50.72 
     estimation                             :  00:01:27.14 
     post-estimation                        :  00:03:5.41 
Iterations                                  :  30  
Min abs eigenvalue of Hessian               :  47.31412 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
               Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1         -1.1994    0.089132      -13.46    0.103567        -11.58
mu_asc2         -1.1523    0.087755      -13.13    0.096212        -11.98
mu_natural       1.1170    0.048946       22.82    0.056689         19.70
mu_walking      -0.1391    0.008654      -16.08    0.010653        -13.06
mu_rent         -3.4904    0.111691      -31.25    0.125544        -27.80
sig_asc1         1.5330    0.101712       15.07    0.117372         13.06
sig_asc2         1.6045    0.098677       16.26    0.121149         13.24
sig_natural      0.8209    0.052295       15.70    0.061465         13.35
sig_walking      0.1052    0.006451       16.31    0.007281         14.45
sig_rent         1.5754    0.116290       13.55    0.148863         10.58


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  8803.00 8803.00 8803.00
Times chosen                     1363.00 1530.00 5910.00
Percentage chosen overall          15.48   17.38   67.14
Percentage chosen when available   15.48   17.38   67.14


Classical covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        0.007944    0.001633   1.104e-05 -1.7814e-04    0.001496   -0.003422 -5.1704e-04 -3.6493e-04   9.575e-05
mu_asc2        0.001633    0.007701 -2.0733e-04 -1.1619e-04    0.001341 -6.8245e-04   -0.003117 -2.2939e-04   5.491e-05
mu_natural    1.104e-05 -2.0733e-04    0.002396 -1.6688e-04 -1.9383e-04  4.8070e-04  5.5016e-04  9.4530e-04  1.1763e-04
mu_walking  -1.7814e-04 -1.1619e-04 -1.6688e-04   7.489e-05 -1.0093e-04  -2.115e-05  -4.442e-05  -7.230e-05  -5.069e-05
mu_rent        0.001496    0.001341 -1.9383e-04 -1.0093e-04    0.012475  7.7318e-04  8.7302e-04  4.4598e-04   7.885e-05
sig_asc1      -0.003422 -6.8245e-04  4.8070e-04  -2.115e-05  7.7318e-04    0.010345    0.003147  6.1784e-04   3.033e-05
sig_asc2    -5.1704e-04   -0.003117  5.5016e-04  -4.442e-05  8.7302e-04    0.003147    0.009737  9.0423e-04   4.118e-05
sig_natural -3.6493e-04 -2.2939e-04  9.4530e-04  -7.230e-05  4.4598e-04  6.1784e-04  9.0423e-04    0.002735   6.346e-05
sig_walking   9.575e-05   5.491e-05  1.1763e-04  -5.069e-05   7.885e-05   3.033e-05   4.118e-05   6.346e-05   4.162e-05
sig_rent      -0.001818   -0.001430  4.0649e-04  -1.455e-05   -0.007235  7.0808e-04 -3.5255e-04   4.781e-06  -7.196e-08
               sig_rent
mu_asc1       -0.001818
mu_asc2       -0.001430
mu_natural   4.0649e-04
mu_walking   -1.455e-05
mu_rent       -0.007235
sig_asc1     7.0808e-04
sig_asc2    -3.5255e-04
sig_natural   4.781e-06
sig_walking  -7.196e-08
sig_rent       0.013523

Robust covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        0.010726    0.006748  5.2606e-04 -3.6523e-04    0.002691   -0.005135   -0.003489 -6.9406e-04  2.0415e-04
mu_asc2        0.006748    0.009257 -2.3492e-04 -1.5183e-04    0.001624   -0.003821   -0.004702 -6.7012e-04   6.076e-05
mu_natural   5.2606e-04 -2.3492e-04    0.003214 -3.2252e-04  7.2269e-04   -0.001082   -0.001085    0.001127  2.0355e-04
mu_walking  -3.6523e-04 -1.5183e-04 -3.2252e-04  1.1349e-04 -3.6838e-04  2.6190e-04  2.5011e-04  -4.225e-05  -7.116e-05
mu_rent        0.002691    0.001624  7.2269e-04 -3.6838e-04    0.015761 -1.1830e-04  2.7484e-04  8.0008e-04  2.3832e-04
sig_asc1      -0.005135   -0.003821   -0.001082  2.6190e-04 -1.1830e-04    0.013776    0.008962    0.001158 -1.0889e-04
sig_asc2      -0.003489   -0.004702   -0.001085  2.5011e-04  2.7484e-04    0.008962    0.014677    0.001872  -9.767e-05
sig_natural -6.9406e-04 -6.7012e-04    0.001127  -4.225e-05  8.0008e-04    0.001158    0.001872    0.003778   5.531e-05
sig_walking  2.0415e-04   6.076e-05  2.0355e-04  -7.116e-05  2.3832e-04 -1.0889e-04  -9.767e-05   5.531e-05   5.301e-05
sig_rent      -0.003309   -0.002127  -6.803e-05  1.2560e-04   -0.011027    0.001424   -0.001153 -3.8549e-04 -1.0612e-04
               sig_rent
mu_asc1       -0.003309
mu_asc2       -0.002127
mu_natural   -6.803e-05
mu_walking   1.2560e-04
mu_rent       -0.011027
sig_asc1       0.001424
sig_asc2      -0.001153
sig_natural -3.8549e-04
sig_walking -1.0612e-04
sig_rent       0.022160

Classical correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        1.000000     0.20878    0.002531    -0.23095     0.15031    -0.37744    -0.05879    -0.07829     0.16652
mu_asc2        0.208783     1.00000   -0.048269    -0.15300     0.13681    -0.07646    -0.35991    -0.04998     0.09700
mu_natural     0.002531    -0.04827    1.000000    -0.39398    -0.03545     0.09656     0.11391     0.36931     0.37254
mu_walking    -0.230947    -0.15300   -0.393975     1.00000    -0.10442    -0.02402    -0.05202    -0.15975    -0.90793
mu_rent        0.150313     0.13681   -0.035455    -0.10442     1.00000     0.06806     0.07921     0.07635     0.10944
sig_asc1      -0.377435    -0.07646    0.096556    -0.02402     0.06806     1.00000     0.31357     0.11616     0.04622
sig_asc2      -0.058786    -0.35991    0.113908    -0.05202     0.07921     0.31357     1.00000     0.17523     0.06469
sig_natural   -0.078292    -0.04998    0.369308    -0.15975     0.07635     0.11616     0.17523     1.00000     0.18809
sig_walking    0.166523     0.09700    0.372541    -0.90793     0.10944     0.04622     0.06469     0.18809     1.00000
sig_rent      -0.175401    -0.14017    0.071414    -0.01445    -0.55703     0.05986    -0.03072  7.8609e-04  -9.592e-05
               sig_rent
mu_asc1        -0.17540
mu_asc2        -0.14017
mu_natural      0.07141
mu_walking     -0.01445
mu_rent        -0.55703
sig_asc1        0.05986
sig_asc2       -0.03072
sig_natural  7.8609e-04
sig_walking  -9.592e-05
sig_rent        1.00000

Robust correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         1.00000     0.67725    0.089601    -0.33103    0.206972   -0.422422    -0.27809    -0.10903     0.27073
mu_asc2         0.67725     1.00000   -0.043072    -0.14813    0.134492   -0.338410    -0.40337    -0.11332     0.08674
mu_natural      0.08960    -0.04307    1.000000    -0.53404    0.101544   -0.162548    -0.15795     0.32355     0.49314
mu_walking     -0.33103    -0.14813   -0.534042     1.00000   -0.275435    0.209458     0.19379    -0.06452    -0.91738
mu_rent         0.20697     0.13449    0.101544    -0.27544    1.000000   -0.008028     0.01807     0.10368     0.26072
sig_asc1       -0.42242    -0.33841   -0.162548     0.20946   -0.008028    1.000000     0.63030     0.16050    -0.12741
sig_asc2       -0.27809    -0.40337   -0.157949     0.19379    0.018070    0.630298     1.00000     0.25134    -0.11073
sig_natural    -0.10903    -0.11332    0.323553    -0.06452    0.103684    0.160498     0.25134     1.00000     0.12358
sig_walking     0.27073     0.08674    0.493142    -0.91738    0.260721   -0.127415    -0.11073     0.12358     1.00000
sig_rent       -0.21462    -0.14854   -0.008061     0.07920   -0.590054    0.081523    -0.06393    -0.04213    -0.09791
               sig_rent
mu_asc1       -0.214617
mu_asc2       -0.148543
mu_natural    -0.008061
mu_walking     0.079202
mu_rent       -0.590054
sig_asc1       0.081523
sig_asc2      -0.063933
sig_natural   -0.042131
sig_walking   -0.097908
sig_rent       1.000000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
  15408           0.1665499
  15701           0.1685681
   3333           0.1710440
  16316           0.1724581
  16449           0.1764824
   1500           0.1767996
  15323           0.1794576
 223400           0.1847690
    394           0.1850244
  17481           0.1855202
  12720           0.1871530
  10618           0.1906298
  18307           0.1955546
   2855           0.1959802
  19377           0.1974058
  11006           0.1984590
  15527           0.2018525
   2393           0.2019880
  18222           0.2021692
  10499           0.2027495

Changes in parameter estimates from starting values:
                Initial    Estimate  Difference
mu_asc1         -1.0000     -1.1994    -0.19937
mu_asc2         -1.0000     -1.1523    -0.15227
mu_natural       1.0000      1.1170     0.11703
mu_walking      -0.2000     -0.1391     0.06086
mu_rent         -2.0000     -3.4904    -1.49042
sig_asc1         1.0000      1.5330     0.53296
sig_asc2         1.0000      1.6045     0.60447
sig_natural      1.0000      0.8209    -0.17914
sig_walking      0.5000      0.1052    -0.39481
sig_rent         1.0000      1.5754     0.57540

Settings and functions used in model definition:

apollo_control
--------------
                       Value                       
modelName              "MXL_full_ps_Hamburg"       
modelDescr             "PS_full_ Hamburg"          
indivID                "id"                        
mixing                 "TRUE"                      
HB                     "FALSE"                     
nCores                 "31"                        
outputDirectory        "Estimation_results/MXL_ps/"
debug                  "FALSE"                     
workInLogs             "FALSE"                     
seed                   "13"                        
noValidation           "FALSE"                     
noDiagnostics          "FALSE"                     
calculateLLC           "TRUE"                      
panelData              "TRUE"                      
analyticGrad           "TRUE"                      
analyticGrad_manualSet "FALSE"                     

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                Value
mu_asc1     1.1993730
mu_asc2     1.1521920
mu_natural  1.1177679
mu_walking  0.1390876
mu_rent     3.4916125
sig_asc1    1.5330762
sig_asc2    1.6045062
sig_natural 0.8208094
sig_walking 0.1051645
sig_rent    1.5736309

Scaling used in computing Hessian
--------------
                Value
mu_asc1     1.1993684
mu_asc2     1.1522747
mu_natural  1.1170287
mu_walking  0.1391379
mu_rent     3.4904186
sig_asc1    1.5329624
sig_asc2    1.6044688
sig_natural 0.8208579
sig_walking 0.1051943
sig_rent    1.5753964


apollo_randCoeff
----------------
function(apollo_beta, apollo_inputs){
    randcoeff = list()
    
    randcoeff[["b_mu_asc1"]] = mu_asc1 + sig_asc1 * draws_asc1
    randcoeff[["b_mu_asc2"]] = mu_asc2 + sig_asc2 * draws_asc2
    randcoeff[["b_mu_natural"]] = mu_natural + sig_natural * draws_natural
    randcoeff[["b_mu_walking"]] = mu_walking + sig_walking * draws_walking
    randcoeff[["b_mu_rent"]] = -exp(mu_rent + sig_rent * draws_rent)
    
    return(randcoeff)
  }
<bytecode: 0x564c176bdf48>


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = b_mu_asc1 + b_mu_natural * Naturnähe_1 + b_mu_walking * Erreichbarkeit_1 + b_mu_rent * Miete_1
    
    V[['alt2']] = b_mu_asc2 + b_mu_natural * Naturnähe_2 + b_mu_walking * Erreichbarkeit_2 + b_mu_rent * Miete_2
    
    V[['alt3']] = b_mu_natural * Naturnähe_3 + b_mu_walking * Erreichbarkeit_3 + b_mu_rent * Miete_3
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x564c168daf50>
