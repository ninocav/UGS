Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Linux.
www.ApolloChoiceModelling.com

Model name                                  : MXL_full_ps_Dortmund
Model description                           : PS_full_ Dortmund
Model run at                                : 2023-04-19 13:38:58
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 295
Number of rows in database                  : 2937
Number of modelled outcomes                 : 2937

Number of cores used                        :  31 
Number of inter-individual draws            : 2000 (sobol)

LL(start)                                   : -1990.86
LL at equal shares, LL(0)                   : -3226.62
LL at observed shares, LL(C)                : -2646.1
LL(final)                                   : -1757.65
Rho-squared vs equal shares                  :  0.4553 
Adj.Rho-squared vs equal shares              :  0.4522 
Rho-squared vs observed shares               :  0.3358 
Adj.Rho-squared vs observed shares           :  0.332 
AIC                                         :  3535.29 
BIC                                         :  3595.14 

Estimated parameters                        :  10
Time taken (hh:mm:ss)                       :  00:04:1.22 
     pre-estimation                         :  00:02:45.31 
     estimation                             :  00:00:20.85 
     post-estimation                        :  00:00:55.06 
Iterations                                  :  25  
Min abs eigenvalue of Hessian               :  13.88512 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
               Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1         -1.1546     0.17198      -6.713     0.20036        -5.762
mu_asc2         -1.1250     0.18382      -6.120     0.20832        -5.400
mu_natural       0.9731     0.09187      10.592     0.11916         8.167
mu_walking      -0.1181     0.01298      -9.103     0.01549        -7.629
mu_rent         -3.4186     0.22490     -15.200     0.23839       -14.340
sig_asc1         1.8135     0.17556      10.330     0.18496         9.805
sig_asc2         2.0323     0.17863      11.377     0.20635         9.849
sig_natural      0.9263     0.08567      10.812     0.09120        10.156
sig_walking      0.1001     0.01062       9.431     0.01179         8.490
sig_rent         1.6894     0.16516      10.229     0.14924        11.320


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  2937.00 2937.00 2937.00
Times chosen                      481.00  575.00 1881.00
Percentage chosen overall          16.38   19.58   64.04
Percentage chosen when available   16.38   19.58   64.04


Classical covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        0.029577    0.005557  2.7492e-04 -4.5476e-04    0.005295   -0.009974   -0.001835  2.2802e-04  2.4537e-04
mu_asc2        0.005557    0.033790  1.1832e-04 -2.5281e-04    0.003410   -0.003233   -0.011489   -0.001175  1.8378e-04
mu_natural   2.7492e-04  1.1832e-04    0.008441 -4.7683e-04 -9.7085e-04  6.3709e-04  7.8032e-04    0.003724  3.8581e-04
mu_walking  -4.5476e-04 -2.5281e-04 -4.7683e-04  1.6843e-04  -8.016e-05 -3.0394e-04  -5.056e-05 -3.4521e-04 -1.2798e-04
mu_rent        0.005295    0.003410 -9.7085e-04  -8.016e-05    0.050581    0.002777    0.006919  9.8688e-04  1.0983e-04
sig_asc1      -0.009974   -0.003233  6.3709e-04 -3.0394e-04    0.002777    0.030822    0.008000    0.002225  2.6388e-04
sig_asc2      -0.001835   -0.011489  7.8032e-04  -5.056e-05    0.006919    0.008000    0.031907    0.001587  1.8582e-04
sig_natural  2.2802e-04   -0.001175    0.003724 -3.4521e-04  9.8688e-04    0.002225    0.001587    0.007339  2.5878e-04
sig_walking  2.4537e-04  1.8378e-04  3.8581e-04 -1.2798e-04  1.0983e-04  2.6388e-04  1.8582e-04  2.5878e-04  1.1273e-04
sig_rent      -0.003692   -0.003013    0.001038 -1.8046e-04   -0.028360    0.001028   -0.001756   5.448e-05  1.7351e-04
               sig_rent
mu_asc1       -0.003692
mu_asc2       -0.003013
mu_natural     0.001038
mu_walking  -1.8046e-04
mu_rent       -0.028360
sig_asc1       0.001028
sig_asc2      -0.001756
sig_natural   5.448e-05
sig_walking  1.7351e-04
sig_rent       0.027277

Robust covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        0.040145    0.024580    0.002412 -9.2006e-04    0.004725   -0.014524   -0.013380    0.002297  5.6191e-04
mu_asc2        0.024580    0.043397 -4.5729e-04 -4.3470e-04   -0.003077   -0.013269   -0.016683   -0.002625  2.7292e-04
mu_natural     0.002412 -4.5729e-04    0.014198   -0.001157   -0.001735   -0.002717   -0.004417    0.007196  8.2636e-04
mu_walking  -9.2006e-04 -4.3470e-04   -0.001157  2.3981e-04 -2.2388e-04   8.110e-05  7.2425e-04 -6.7877e-04 -1.7842e-04
mu_rent        0.004725   -0.003077   -0.001735 -2.2388e-04    0.056829    0.005714    0.012466  9.9183e-04  2.7070e-04
sig_asc1      -0.014524   -0.013269   -0.002717   8.110e-05    0.005714    0.034209    0.018306   5.040e-05   6.710e-05
sig_asc2      -0.013380   -0.016683   -0.004417  7.2425e-04    0.012466    0.018306    0.042580   -0.001042 -2.9229e-04
sig_natural    0.002297   -0.002625    0.007196 -6.7877e-04  9.9183e-04   5.040e-05   -0.001042    0.008317  4.9172e-04
sig_walking  5.6191e-04  2.7292e-04  8.2636e-04 -1.7842e-04  2.7070e-04   6.710e-05 -2.9229e-04  4.9172e-04  1.3911e-04
sig_rent      -0.003144  3.8775e-04    0.001288  -6.372e-05   -0.030170 -8.9986e-04   -0.005057 -2.2189e-04   3.543e-05
               sig_rent
mu_asc1       -0.003144
mu_asc2      3.8775e-04
mu_natural     0.001288
mu_walking   -6.372e-05
mu_rent       -0.030170
sig_asc1    -8.9986e-04
sig_asc2      -0.005057
sig_natural -2.2189e-04
sig_walking   3.543e-05
sig_rent       0.022273

Classical correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         1.00000    0.175776    0.017400    -0.20375     0.13689    -0.33033    -0.05975    0.015477     0.13438
mu_asc2         0.17578    1.000000    0.007006    -0.10597     0.08247    -0.10017    -0.34991   -0.074588     0.09416
mu_natural      0.01740    0.007006    1.000000    -0.39992    -0.04699     0.03950     0.04755    0.473174     0.39552
mu_walking     -0.20375   -0.105971   -0.399916     1.00000    -0.02746    -0.13340    -0.02181   -0.310507    -0.92879
mu_rent         0.13689    0.082472   -0.046986    -0.02746     1.00000     0.07034     0.17223    0.051223     0.04599
sig_asc1       -0.33033   -0.100170    0.039499    -0.13340     0.07034     1.00000     0.25509    0.147960     0.14157
sig_asc2       -0.05975   -0.349911    0.047549    -0.02181     0.17223     0.25509     1.00000    0.103734     0.09798
sig_natural     0.01548   -0.074588    0.473174    -0.31051     0.05122     0.14796     0.10373    1.000000     0.28451
sig_walking     0.13438    0.094165    0.395519    -0.92879     0.04599     0.14157     0.09798    0.284513     1.00000
sig_rent       -0.12998   -0.099259    0.068383    -0.08419    -0.76350     0.03546    -0.05951    0.003851     0.09895
               sig_rent
mu_asc1       -0.129981
mu_asc2       -0.099259
mu_natural     0.068383
mu_walking    -0.084192
mu_rent       -0.763501
sig_asc1       0.035465
sig_asc2      -0.059514
sig_natural    0.003851
sig_walking    0.098951
sig_rent       1.000000

Robust correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         1.00000     0.58890     0.10103    -0.29653     0.09892   -0.391921    -0.32362    0.125722     0.23778
mu_asc2         0.58890     1.00000    -0.01842    -0.13475    -0.06197   -0.344390    -0.38809   -0.138174     0.11107
mu_natural      0.10103    -0.01842     1.00000    -0.62680    -0.06107   -0.123305    -0.17966    0.662219     0.58799
mu_walking     -0.29653    -0.13475    -0.62680     1.00000    -0.06064    0.028314     0.22665   -0.480611    -0.97683
mu_rent         0.09892    -0.06197    -0.06107    -0.06064     1.00000    0.129603     0.25342    0.045620     0.09628
sig_asc1       -0.39192    -0.34439    -0.12330     0.02831     0.12960    1.000000     0.47963    0.002988     0.03076
sig_asc2       -0.32362    -0.38809    -0.17966     0.22665     0.25342    0.479633     1.00000   -0.055393    -0.12010
sig_natural     0.12572    -0.13817     0.66222    -0.48061     0.04562    0.002988    -0.05539    1.000000     0.45714
sig_walking     0.23778     0.11107     0.58799    -0.97683     0.09628    0.030759    -0.12010    0.457135     1.00000
sig_rent       -0.10513     0.01247     0.07241    -0.02757    -0.84801   -0.032600    -0.16422   -0.016302     0.02013
               sig_rent
mu_asc1        -0.10513
mu_asc2         0.01247
mu_natural      0.07241
mu_walking     -0.02757
mu_rent        -0.84801
sig_asc1       -0.03260
sig_asc2       -0.16422
sig_natural    -0.01630
sig_walking     0.02013
sig_rent        1.00000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
  13672           0.1711856
  14389           0.1733062
  18930           0.1754962
   2969           0.1860833
  11554           0.1928799
  16852           0.1978227
 406600           0.1994565
  15714           0.2050773
  15750           0.2099244
  11518           0.2145438
  18700           0.2181607
  16567           0.2232665
   1761           0.2348358
  17742           0.2388223
  16227           0.2420665
  19070           0.2423851
    955           0.2490148
   5035           0.2515563
 217600           0.2578345
  19575           0.2582931

Changes in parameter estimates from starting values:
                Initial    Estimate  Difference
mu_asc1         -1.0000     -1.1546    -0.15457
mu_asc2         -1.0000     -1.1250    -0.12503
mu_natural       1.0000      0.9731    -0.02688
mu_walking      -0.2000     -0.1181     0.08186
mu_rent         -2.0000     -3.4186    -1.41858
sig_asc1         1.0000      1.8135     0.81349
sig_asc2         1.0000      2.0323     1.03230
sig_natural      1.0000      0.9263    -0.07374
sig_walking      0.5000      0.1001    -0.39987
sig_rent         1.0000      1.6894     0.68940

Settings and functions used in model definition:

apollo_control
--------------
                       Value                       
modelName              "MXL_full_ps_Dortmund"      
modelDescr             "PS_full_ Dortmund"         
indivID                "id"                        
mixing                 "TRUE"                      
HB                     "FALSE"                     
nCores                 "31"                        
outputDirectory        "Estimation_results/MXL_ps/"
debug                  "FALSE"                     
workInLogs             "FALSE"                     
seed                   "13"                        
noValidation           "FALSE"                     
noDiagnostics          "FALSE"                     
calculateLLC           "TRUE"                      
panelData              "TRUE"                      
analyticGrad           "TRUE"                      
analyticGrad_manualSet "FALSE"                     

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                Value
mu_asc1     1.1545617
mu_asc2     1.1250377
mu_natural  0.9731192
mu_walking  0.1181395
mu_rent     3.4186043
sig_asc1    1.8135048
sig_asc2    2.0322843
sig_natural 0.9262574
sig_walking 0.1001307
sig_rent    1.6894070

Scaling used in computing Hessian
--------------
                Value
mu_asc1     1.1545726
mu_asc2     1.1250320
mu_natural  0.9731187
mu_walking  0.1181369
mu_rent     3.4185850
sig_asc1    1.8134866
sig_asc2    2.0323014
sig_natural 0.9262562
sig_walking 0.1001310
sig_rent    1.6894012


apollo_randCoeff
----------------
function(apollo_beta, apollo_inputs){
    randcoeff = list()
    
    randcoeff[["b_mu_asc1"]] = mu_asc1 + sig_asc1 * draws_asc1
    randcoeff[["b_mu_asc2"]] = mu_asc2 + sig_asc2 * draws_asc2
    randcoeff[["b_mu_natural"]] = mu_natural + sig_natural * draws_natural
    randcoeff[["b_mu_walking"]] = mu_walking + sig_walking * draws_walking
    randcoeff[["b_mu_rent"]] = -exp(mu_rent + sig_rent * draws_rent)
    
    return(randcoeff)
  }
<bytecode: 0x564c176bdf48>


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = b_mu_asc1 + b_mu_natural * Naturnähe_1 + b_mu_walking * Erreichbarkeit_1 + b_mu_rent * Miete_1
    
    V[['alt2']] = b_mu_asc2 + b_mu_natural * Naturnähe_2 + b_mu_walking * Erreichbarkeit_2 + b_mu_rent * Miete_2
    
    V[['alt3']] = b_mu_natural * Naturnähe_3 + b_mu_walking * Erreichbarkeit_3 + b_mu_rent * Miete_3
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x564c168daf50>
