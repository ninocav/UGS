Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Linux.
www.ApolloChoiceModelling.com

Model name                                  : MXL_full_ps_Munich
Model description                           : PS_full_ Munich
Model run at                                : 2023-04-19 14:19:15
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 579
Number of rows in database                  : 5773
Number of modelled outcomes                 : 5773

Number of cores used                        :  31 
Number of inter-individual draws            : 2000 (sobol)

LL(start)                                   : -4156.32
LL at equal shares, LL(0)                   : -6342.29
LL at observed shares, LL(C)                : -5240.05
LL(final)                                   : -3636.1
Rho-squared vs equal shares                  :  0.4267 
Adj.Rho-squared vs equal shares              :  0.4251 
Rho-squared vs observed shares               :  0.3061 
Adj.Rho-squared vs observed shares           :  0.3042 
AIC                                         :  7292.19 
BIC                                         :  7358.8 

Estimated parameters                        :  10
Time taken (hh:mm:ss)                       :  00:06:27.93 
     pre-estimation                         :  00:03:41.53 
     estimation                             :  00:00:45.01 
     post-estimation                        :  00:02:1.4 
Iterations                                  :  23  
Min abs eigenvalue of Hessian               :  36.13467 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
               Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1         -1.0373    0.100467     -10.325    0.116701        -8.888
mu_asc2         -0.8534    0.095486      -8.937    0.103596        -8.238
mu_natural       0.9503    0.058552      16.231    0.067233        14.135
mu_walking      -0.1347    0.009922     -13.577    0.011829       -11.389
mu_rent         -3.8003    0.143587     -26.467    0.143349       -26.511
sig_asc1         1.4345    0.110419      12.991    0.119491        12.005
sig_asc2         1.4002    0.110220      12.704    0.129370        10.823
sig_natural      0.8734    0.054560      16.009    0.057644        15.152
sig_walking      0.1008    0.007477      13.479    0.008479        11.887
sig_rent         1.8557    0.106518      17.421    0.098634        18.814


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  5773.00 5773.00 5773.00
Times chosen                      979.00 1125.00 3669.00
Percentage chosen overall          16.96   19.49   63.55
Percentage chosen when available   16.96   19.49   63.55


Classical covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        0.010094    0.001909  -9.115e-05 -1.6619e-04    0.001537   -0.003715 -4.6724e-04 -2.8090e-04  1.0054e-04
mu_asc2        0.001909    0.009118 -2.7501e-04 -1.6588e-04    0.001870 -1.9089e-04   -0.003109  1.5747e-04   8.529e-05
mu_natural   -9.115e-05 -2.7501e-04    0.003428 -2.0386e-04 -1.8383e-04  6.0276e-04  6.4489e-04    0.001340  1.5487e-04
mu_walking  -1.6619e-04 -1.6588e-04 -2.0386e-04   9.845e-05  -8.957e-05 -1.0972e-04  -5.634e-05 -1.3668e-04  -6.704e-05
mu_rent        0.001537    0.001870 -1.8383e-04  -8.957e-05    0.020617    0.001755    0.001331  5.8314e-04   8.647e-05
sig_asc1      -0.003715 -1.9089e-04  6.0276e-04 -1.0972e-04    0.001755    0.012192    0.002762  8.2216e-04   5.415e-05
sig_asc2    -4.6724e-04   -0.003109  6.4489e-04  -5.634e-05    0.001331    0.002762    0.012149  5.7562e-04   4.880e-05
sig_natural -2.8090e-04  1.5747e-04    0.001340 -1.3668e-04  5.8314e-04  8.2216e-04  5.7562e-04    0.002977   9.535e-05
sig_walking  1.0054e-04   8.529e-05  1.5487e-04  -6.704e-05   8.647e-05   5.415e-05   4.880e-05   9.535e-05   5.591e-05
sig_rent      -0.001102   -0.001122  6.5690e-04 -1.2021e-04   -0.010016   2.510e-05 -1.3475e-04  2.8425e-04  1.0468e-04
               sig_rent
mu_asc1       -0.001102
mu_asc2       -0.001122
mu_natural   6.5690e-04
mu_walking  -1.2021e-04
mu_rent       -0.010016
sig_asc1      2.510e-05
sig_asc2    -1.3475e-04
sig_natural  2.8425e-04
sig_walking  1.0468e-04
sig_rent       0.011346

Robust covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        0.013619    0.008001  1.4106e-04 -2.9377e-04    0.001367   -0.005826   -0.004838 -8.6558e-04  1.6689e-04
mu_asc2        0.008001    0.010732 -4.6097e-04 -1.6492e-04    0.001389   -0.002738   -0.004544  -8.468e-05   8.775e-05
mu_natural   1.4106e-04 -4.6097e-04    0.004520 -3.7959e-04  1.6913e-04   3.279e-05 -2.2419e-04    0.002276  2.6267e-04
mu_walking  -2.9377e-04 -1.6492e-04 -3.7959e-04  1.3993e-04 -3.3887e-04  -1.611e-05   9.377e-05 -2.2616e-04  -9.640e-05
mu_rent        0.001367    0.001389  1.6913e-04 -3.3887e-04    0.020549    0.002867    0.001001  1.3646e-04  2.6707e-04
sig_asc1      -0.005826   -0.002738   3.279e-05  -1.611e-05    0.002867    0.014278    0.007714  6.4473e-04   3.008e-06
sig_asc2      -0.004838   -0.004544 -2.2419e-04   9.377e-05    0.001001    0.007714    0.016737  8.3448e-04  -4.385e-05
sig_natural -8.6558e-04  -8.468e-05    0.002276 -2.2616e-04  1.3646e-04  6.4473e-04  8.3448e-04    0.003323  1.6100e-04
sig_walking  1.6689e-04   8.775e-05  2.6267e-04  -9.640e-05  2.6707e-04   3.008e-06  -4.385e-05  1.6100e-04   7.189e-05
sig_rent      -0.001033 -8.6867e-04  5.5376e-04  -3.648e-05   -0.009684 -3.7254e-04  4.1254e-04  5.9764e-04   4.551e-05
               sig_rent
mu_asc1       -0.001033
mu_asc2     -8.6867e-04
mu_natural   5.5376e-04
mu_walking   -3.648e-05
mu_rent       -0.009684
sig_asc1    -3.7254e-04
sig_asc2     4.1254e-04
sig_natural  5.9764e-04
sig_walking   4.551e-05
sig_rent       0.009729

Classical correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         1.00000     0.19900    -0.01550    -0.16671     0.10656   -0.334892    -0.04219    -0.05125     0.13384
mu_asc2         0.19900     1.00000    -0.04919    -0.17508     0.13639   -0.018105    -0.29539     0.03023     0.11946
mu_natural     -0.01550    -0.04919     1.00000    -0.35090    -0.02187    0.093231     0.09993     0.41943     0.35375
mu_walking     -0.16671    -0.17508    -0.35090     1.00000    -0.06287   -0.100142    -0.05151    -0.25247    -0.90367
mu_rent         0.10656     0.13639    -0.02187    -0.06287     1.00000    0.110710     0.08412     0.07444     0.08054
sig_asc1       -0.33489    -0.01811     0.09323    -0.10014     0.11071    1.000000     0.22691     0.13647     0.06559
sig_asc2       -0.04219    -0.29539     0.09993    -0.05151     0.08412    0.226909     1.00000     0.09572     0.05921
sig_natural    -0.05125     0.03023     0.41943    -0.25247     0.07444    0.136472     0.09572     1.00000     0.23373
sig_walking     0.13384     0.11946     0.35375    -0.90367     0.08054    0.065591     0.05921     0.23373     1.00000
sig_rent       -0.10300    -0.11033     0.10533    -0.11374    -0.65485    0.002134    -0.01148     0.04891     0.13144
               sig_rent
mu_asc1       -0.102996
mu_asc2       -0.110330
mu_natural     0.105327
mu_walking    -0.113741
mu_rent       -0.654850
sig_asc1       0.002134
sig_asc2      -0.011477
sig_natural    0.048911
sig_walking    0.131440
sig_rent       1.000000

Robust correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         1.00000     0.66182    0.017978    -0.21281     0.08173   -0.417784    -0.32046    -0.12867    0.168662
mu_asc2         0.66182     1.00000   -0.066184    -0.13458     0.09356   -0.221218    -0.33906    -0.01418    0.099900
mu_natural      0.01798    -0.06618    1.000000    -0.47730     0.01755    0.004082    -0.02578     0.58737    0.460785
mu_walking     -0.21281    -0.13458   -0.477298     1.00000    -0.19984   -0.011396     0.06128    -0.33168   -0.961169
mu_rent         0.08173     0.09356    0.017548    -0.19984     1.00000    0.167380     0.05396     0.01651    0.219733
sig_asc1       -0.41778    -0.22122    0.004082    -0.01140     0.16738    1.000000     0.49899     0.09360    0.002969
sig_asc2       -0.32046    -0.33906   -0.025775     0.06128     0.05396    0.498988     1.00000     0.11190   -0.039980
sig_natural    -0.12867    -0.01418    0.587372    -0.33168     0.01651    0.093604     0.11190     1.00000    0.329410
sig_walking     0.16866     0.09990    0.460785    -0.96117     0.21973    0.002969    -0.03998     0.32941    1.000000
sig_rent       -0.08973    -0.08501    0.083506    -0.03127    -0.68489   -0.031609     0.03233     0.10511    0.054419
               sig_rent
mu_asc1        -0.08973
mu_asc2        -0.08501
mu_natural      0.08351
mu_walking     -0.03127
mu_rent        -0.68489
sig_asc1       -0.03161
sig_asc2        0.03233
sig_natural     0.10511
sig_walking     0.05442
sig_rent        1.00000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
  14525           0.1794209
   2321           0.1807478
 251200           0.1815755
 279200           0.1836591
 422100           0.1872338
  19270           0.1898929
 157400           0.1907863
  18061           0.1912417
  19310           0.1960385
 361400           0.1962051
  16355           0.1988497
 152600           0.2002888
  18375           0.2007788
   2439           0.2026296
 194800           0.2055657
  17542           0.2062803
  13713           0.2074992
  19591           0.2093036
 173600           0.2134047
 254500           0.2145952

Changes in parameter estimates from starting values:
                Initial    Estimate  Difference
mu_asc1         -1.0000     -1.0373    -0.03728
mu_asc2         -1.0000     -0.8534     0.14662
mu_natural       1.0000      0.9503    -0.04966
mu_walking      -0.2000     -0.1347     0.06528
mu_rent         -2.0000     -3.8003    -1.80035
sig_asc1         1.0000      1.4345     0.43446
sig_asc2         1.0000      1.4002     0.40020
sig_natural      1.0000      0.8734    -0.12656
sig_walking      0.5000      0.1008    -0.39922
sig_rent         1.0000      1.8557     0.85568

Settings and functions used in model definition:

apollo_control
--------------
                       Value                       
modelName              "MXL_full_ps_Munich"        
modelDescr             "PS_full_ Munich"           
indivID                "id"                        
mixing                 "TRUE"                      
HB                     "FALSE"                     
nCores                 "31"                        
outputDirectory        "Estimation_results/MXL_ps/"
debug                  "FALSE"                     
workInLogs             "FALSE"                     
seed                   "13"                        
noValidation           "FALSE"                     
noDiagnostics          "FALSE"                     
calculateLLC           "TRUE"                      
panelData              "TRUE"                      
analyticGrad           "TRUE"                      
analyticGrad_manualSet "FALSE"                     

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                Value
mu_asc1     1.0372827
mu_asc2     0.8533813
mu_natural  0.9503436
mu_walking  0.1347179
mu_rent     3.8002981
sig_asc1    1.4344675
sig_asc2    1.4001921
sig_natural 0.8734358
sig_walking 0.1007843
sig_rent    1.8557076

Scaling used in computing Hessian
--------------
                Value
mu_asc1     1.0372838
mu_asc2     0.8533793
mu_natural  0.9503420
mu_walking  0.1347180
mu_rent     3.8003451
sig_asc1    1.4344585
sig_asc2    1.4001973
sig_natural 0.8734414
sig_walking 0.1007844
sig_rent    1.8556783


apollo_randCoeff
----------------
function(apollo_beta, apollo_inputs){
    randcoeff = list()
    
    randcoeff[["b_mu_asc1"]] = mu_asc1 + sig_asc1 * draws_asc1
    randcoeff[["b_mu_asc2"]] = mu_asc2 + sig_asc2 * draws_asc2
    randcoeff[["b_mu_natural"]] = mu_natural + sig_natural * draws_natural
    randcoeff[["b_mu_walking"]] = mu_walking + sig_walking * draws_walking
    randcoeff[["b_mu_rent"]] = -exp(mu_rent + sig_rent * draws_rent)
    
    return(randcoeff)
  }
<bytecode: 0x564c176bdf48>


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = b_mu_asc1 + b_mu_natural * Naturnähe_1 + b_mu_walking * Erreichbarkeit_1 + b_mu_rent * Miete_1
    
    V[['alt2']] = b_mu_asc2 + b_mu_natural * Naturnähe_2 + b_mu_walking * Erreichbarkeit_2 + b_mu_rent * Miete_2
    
    V[['alt3']] = b_mu_natural * Naturnähe_3 + b_mu_walking * Erreichbarkeit_3 + b_mu_rent * Miete_3
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x564c168daf50>
