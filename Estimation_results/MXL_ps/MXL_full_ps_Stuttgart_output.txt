Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Linux.
www.ApolloChoiceModelling.com

Model name                                  : MXL_full_ps_Stuttgart
Model description                           : PS_full_ Stuttgart
Model run at                                : 2023-04-19 14:29:55
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 211
Number of rows in database                  : 2107
Number of modelled outcomes                 : 2107

Number of cores used                        :  31 
Number of inter-individual draws            : 2000 (sobol)

LL(start)                                   : -1400.79
LL at equal shares, LL(0)                   : -2314.78
LL at observed shares, LL(C)                : -1816.62
LL(final)                                   : -1222.18
Rho-squared vs equal shares                  :  0.472 
Adj.Rho-squared vs equal shares              :  0.4677 
Rho-squared vs observed shares               :  0.3272 
Adj.Rho-squared vs observed shares           :  0.3217 
AIC                                         :  2464.37 
BIC                                         :  2520.9 

Estimated parameters                        :  10
Time taken (hh:mm:ss)                       :  00:03:29.18 
     pre-estimation                         :  00:02:30.36 
     estimation                             :  00:00:25.65 
     post-estimation                        :  00:00:33.18 
Iterations                                  :  40  
Min abs eigenvalue of Hessian               :  15.95033 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
               Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1        -1.28529     0.17585      -7.309     0.21221        -6.057
mu_asc2        -1.09360     0.17232      -6.346     0.19176        -5.703
mu_natural      0.88265     0.08999       9.808     0.10934         8.072
mu_walking     -0.11162     0.01398      -7.982     0.01658        -6.732
mu_rent        -3.31917     0.19639     -16.901     0.20657       -16.068
sig_asc1        1.47469     0.21261       6.936     0.23209         6.354
sig_asc2        1.60314     0.18577       8.630     0.18825         8.516
sig_natural     0.71304     0.08381       8.507     0.09432         7.560
sig_walking     0.08828     0.01029       8.578     0.01162         7.600
sig_rent        1.61964     0.16186      10.006     0.16688         9.705


Overview of choices for MNL model component :
                                    alt1   alt2    alt3
Times available                  2107.00 2107.0 2107.00
Times chosen                      306.00  392.0 1409.00
Percentage chosen overall          14.52   18.6   66.87
Percentage chosen when available   14.52   18.6   66.87


Classical covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        0.030923    0.006467 -3.2116e-04 -4.0871e-04    0.002947   -0.015717 -7.1141e-04   -0.001673  2.0572e-04
mu_asc2        0.006467    0.029693 -7.1619e-04 -4.0907e-04    0.003289   -0.003197   -0.010345   -0.001477  1.8894e-04
mu_natural  -3.2116e-04 -7.1619e-04    0.008098 -4.7836e-04 -5.9468e-04    0.001829    0.003238    0.003746  3.6507e-04
mu_walking  -4.0871e-04 -4.0907e-04 -4.7836e-04  1.9553e-04 -2.9770e-04 -1.9210e-04 -4.2951e-04 -2.1276e-04 -1.3744e-04
mu_rent        0.002947    0.003289 -5.9468e-04 -2.9770e-04    0.038569    0.003907    0.001094  3.8912e-04  2.0393e-04
sig_asc1      -0.015717   -0.003197    0.001829 -1.9210e-04    0.003907    0.045203    0.010539    0.001067  2.6827e-04
sig_asc2    -7.1141e-04   -0.010345    0.003238 -4.2951e-04    0.001094    0.010539    0.034510    0.001242  3.6191e-04
sig_natural   -0.001673   -0.001477    0.003746 -2.1276e-04  3.8912e-04    0.001067    0.001242    0.007025  1.6114e-04
sig_walking  2.0572e-04  1.8894e-04  3.6507e-04 -1.3744e-04  2.0393e-04  2.6827e-04  3.6191e-04  1.6114e-04  1.0591e-04
sig_rent      -0.004020   -0.002751  7.6268e-04 -1.5452e-04   -0.015696    0.001693    0.001045  4.5886e-04  1.2359e-04
               sig_rent
mu_asc1       -0.004020
mu_asc2       -0.002751
mu_natural   7.6268e-04
mu_walking  -1.5452e-04
mu_rent       -0.015696
sig_asc1       0.001693
sig_asc2       0.001045
sig_natural  4.5886e-04
sig_walking  1.2359e-04
sig_rent       0.026200

Robust covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        0.045035    0.028029  8.6103e-04 -7.8549e-04    0.009406   -0.030156   -0.012171 -8.4531e-04  3.8181e-04
mu_asc2        0.028029    0.036772  8.4208e-04 -6.9200e-04    0.005078   -0.015903   -0.013202   -0.002553  3.2758e-04
mu_natural   8.6103e-04  8.4208e-04    0.011956 -9.9038e-04    0.001613  1.2728e-04    0.002622    0.007505  7.0124e-04
mu_walking  -7.8549e-04 -6.9200e-04 -9.9038e-04  2.7488e-04   -0.001055  1.2325e-04 -2.9120e-04 -4.7447e-04 -1.8882e-04
mu_rent        0.009406    0.005078    0.001613   -0.001055    0.042671   -0.003338 -6.2597e-04    0.002534  6.9877e-04
sig_asc1      -0.030156   -0.015903  1.2728e-04  1.2325e-04   -0.003338    0.053867    0.029135 -9.6496e-04  1.9026e-04
sig_asc2      -0.012171   -0.013202    0.002622 -2.9120e-04 -6.2597e-04    0.029135    0.035437  7.0932e-04  3.3615e-04
sig_natural -8.4531e-04   -0.002553    0.007505 -4.7447e-04    0.002534 -9.6496e-04  7.0932e-04    0.008896  3.4073e-04
sig_walking  3.8181e-04  3.2758e-04  7.0124e-04 -1.8882e-04  6.9877e-04  1.9026e-04  3.3615e-04  3.4073e-04  1.3492e-04
sig_rent      -0.008797   -0.004718 -6.5143e-04  1.8933e-04   -0.018090    0.007119  9.9387e-04   -0.001641  -9.670e-05
               sig_rent
mu_asc1       -0.008797
mu_asc2       -0.004718
mu_natural  -6.5143e-04
mu_walking   1.8933e-04
mu_rent       -0.018090
sig_asc1       0.007119
sig_asc2     9.9387e-04
sig_natural   -0.001641
sig_walking  -9.670e-05
sig_rent       0.027850

Classical correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         1.00000     0.21343    -0.02029    -0.16621     0.08532    -0.42038    -0.02178    -0.11354     0.11368
mu_asc2         0.21343     1.00000    -0.04618    -0.16977     0.09720    -0.08726    -0.32318    -0.10225     0.10654
mu_natural     -0.02029    -0.04618     1.00000    -0.38014    -0.03365     0.09558     0.19367     0.49668     0.39420
mu_walking     -0.16621    -0.16977    -0.38014     1.00000    -0.10840    -0.06461    -0.16534    -0.18153    -0.95511
mu_rent         0.08532     0.09720    -0.03365    -0.10840     1.00000     0.09356     0.03000     0.02364     0.10090
sig_asc1       -0.42038    -0.08726     0.09558    -0.06461     0.09356     1.00000     0.26684     0.05990     0.12261
sig_asc2       -0.02178    -0.32318     0.19367    -0.16534     0.03000     0.26684     1.00000     0.07975     0.18931
sig_natural    -0.11354    -0.10225     0.49668    -0.18153     0.02364     0.05990     0.07975     1.00000     0.18682
sig_walking     0.11368     0.10654     0.39420    -0.95511     0.10090     0.12261     0.18931     0.18682     1.00000
sig_rent       -0.14124    -0.09863     0.05236    -0.06827    -0.49377     0.04919     0.03476     0.03382     0.07420
               sig_rent
mu_asc1        -0.14124
mu_asc2        -0.09863
mu_natural      0.05236
mu_walking     -0.06827
mu_rent        -0.49377
sig_asc1        0.04919
sig_asc2        0.03476
sig_natural     0.03382
sig_walking     0.07420
sig_rent        1.00000

Robust correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         1.00000     0.68876    0.037106    -0.22325     0.21456   -0.612262    -0.30466    -0.04223     0.15489
mu_asc2         0.68876     1.00000    0.040160    -0.21766     0.12820   -0.357326    -0.36572    -0.14115     0.14707
mu_natural      0.03711     0.04016    1.000000    -0.54630     0.07142    0.005015     0.12736     0.72773     0.55212
mu_walking     -0.22325    -0.21766   -0.546296     1.00000    -0.30799    0.032031    -0.09330    -0.30342    -0.98049
mu_rent         0.21456     0.12820    0.071419    -0.30799     1.00000   -0.069633    -0.01610     0.13005     0.29123
sig_asc1       -0.61226    -0.35733    0.005015     0.03203    -0.06963    1.000000     0.66684    -0.04408     0.07058
sig_asc2       -0.30466    -0.36572    0.127363    -0.09330    -0.01610    0.666838     1.00000     0.03995     0.15373
sig_natural    -0.04223    -0.14115    0.727727    -0.30342     0.13005   -0.044081     0.03995     1.00000     0.31101
sig_walking     0.15489     0.14707    0.552119    -0.98049     0.29123    0.070575     0.15373     0.31101     1.00000
sig_rent       -0.24841    -0.14744   -0.035699     0.06843    -0.52476    0.183811     0.03164    -0.10424    -0.04989
               sig_rent
mu_asc1        -0.24841
mu_asc2        -0.14744
mu_natural     -0.03570
mu_walking      0.06843
mu_rent        -0.52476
sig_asc1        0.18381
sig_asc2        0.03164
sig_natural    -0.10424
sig_walking    -0.04989
sig_rent        1.00000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
  14392           0.1596753
    249           0.1850208
  13488           0.1858345
  11866           0.1902083
 371900           0.1910564
  18300           0.1994448
  18773           0.2195091
 204500           0.2212348
  17236           0.2215520
 192900           0.2239481
  20005           0.2319670
 173100           0.2338901
  17101           0.2426997
 230500           0.2433448
  15899           0.2509635
  14140           0.2523769
  10308           0.2643855
  17044           0.2684561
  18835           0.2864276
   5316           0.2905243

Changes in parameter estimates from starting values:
                Initial    Estimate  Difference
mu_asc1         -1.0000    -1.28529    -0.28529
mu_asc2         -1.0000    -1.09360    -0.09360
mu_natural       1.0000     0.88265    -0.11735
mu_walking      -0.2000    -0.11162     0.08838
mu_rent         -2.0000    -3.31917    -1.31917
sig_asc1         1.0000     1.47469     0.47469
sig_asc2         1.0000     1.60314     0.60314
sig_natural      1.0000     0.71304    -0.28696
sig_walking      0.5000     0.08828    -0.41172
sig_rent         1.0000     1.61964     0.61964

Settings and functions used in model definition:

apollo_control
--------------
                       Value                       
modelName              "MXL_full_ps_Stuttgart"     
modelDescr             "PS_full_ Stuttgart"        
indivID                "id"                        
mixing                 "TRUE"                      
HB                     "FALSE"                     
nCores                 "31"                        
outputDirectory        "Estimation_results/MXL_ps/"
debug                  "FALSE"                     
workInLogs             "FALSE"                     
seed                   "13"                        
noValidation           "FALSE"                     
noDiagnostics          "FALSE"                     
calculateLLC           "TRUE"                      
panelData              "TRUE"                      
analyticGrad           "TRUE"                      
analyticGrad_manualSet "FALSE"                     

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                 Value
mu_asc1     1.28528752
mu_asc2     1.09359932
mu_natural  0.88264851
mu_walking  0.11161896
mu_rent     3.31917072
sig_asc1    1.47468705
sig_asc2    1.60313706
sig_natural 0.71303840
sig_walking 0.08827882
sig_rent    1.61964164

Scaling used in computing Hessian
--------------
                 Value
mu_asc1     1.28528758
mu_asc2     1.09359923
mu_natural  0.88264861
mu_walking  0.11161895
mu_rent     3.31917097
sig_asc1    1.47468709
sig_asc2    1.60313714
sig_natural 0.71303836
sig_walking 0.08827883
sig_rent    1.61964151


apollo_randCoeff
----------------
function(apollo_beta, apollo_inputs){
    randcoeff = list()
    
    randcoeff[["b_mu_asc1"]] = mu_asc1 + sig_asc1 * draws_asc1
    randcoeff[["b_mu_asc2"]] = mu_asc2 + sig_asc2 * draws_asc2
    randcoeff[["b_mu_natural"]] = mu_natural + sig_natural * draws_natural
    randcoeff[["b_mu_walking"]] = mu_walking + sig_walking * draws_walking
    randcoeff[["b_mu_rent"]] = -exp(mu_rent + sig_rent * draws_rent)
    
    return(randcoeff)
  }
<bytecode: 0x564c176bdf48>


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = b_mu_asc1 + b_mu_natural * Naturnähe_1 + b_mu_walking * Erreichbarkeit_1 + b_mu_rent * Miete_1
    
    V[['alt2']] = b_mu_asc2 + b_mu_natural * Naturnähe_2 + b_mu_walking * Erreichbarkeit_2 + b_mu_rent * Miete_2
    
    V[['alt3']] = b_mu_natural * Naturnähe_3 + b_mu_walking * Erreichbarkeit_3 + b_mu_rent * Miete_3
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x564c168daf50>
