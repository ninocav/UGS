Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Linux.
www.ApolloChoiceModelling.com

Model name                                  : MXL_full_ps_Bremen
Model description                           : PS_full_ Bremen
Model run at                                : 2023-04-19 13:29:15
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 187
Number of rows in database                  : 1866
Number of modelled outcomes                 : 1866

Number of cores used                        :  31 
Number of inter-individual draws            : 2000 (sobol)

LL(start)                                   : -1163.58
LL at equal shares, LL(0)                   : -2050.01
LL at observed shares, LL(C)                : -1551.26
LL(final)                                   : -1013.85
Rho-squared vs equal shares                  :  0.5054 
Adj.Rho-squared vs equal shares              :  0.5006 
Rho-squared vs observed shares               :  0.3464 
Adj.Rho-squared vs observed shares           :  0.34 
AIC                                         :  2047.7 
BIC                                         :  2103.02 

Estimated parameters                        :  10
Time taken (hh:mm:ss)                       :  00:02:49.37 
     pre-estimation                         :  00:02:5.25 
     estimation                             :  00:00:13.94 
     post-estimation                        :  00:00:30.18 
Iterations                                  :  23  
Min abs eigenvalue of Hessian               :  11.04911 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
               Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1        -1.49202     0.20944      -7.124     0.24157        -6.176
mu_asc2        -1.46234     0.22753      -6.427     0.24843        -5.886
mu_natural      1.01564     0.09593      10.588     0.10456         9.714
mu_walking     -0.12199     0.01565      -7.793     0.01817        -6.713
mu_rent        -3.32364     0.22936     -14.491     0.23339       -14.241
sig_asc1        1.61695     0.20707       7.809     0.20219         7.997
sig_asc2        2.24114     0.26260       8.534     0.32607         6.873
sig_natural     0.74489     0.09836       7.573     0.10350         7.197
sig_walking    -0.08145     0.01070      -7.615     0.01168        -6.975
sig_rent        1.37971     0.18026       7.654     0.16739         8.242


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  1866.00 1866.00 1866.00
Times chosen                      254.00  324.00 1288.00
Percentage chosen overall          13.61   17.36   69.02
Percentage chosen when available   13.61   17.36   69.02


Classical covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        0.043863    0.007679   -0.001250 -4.7402e-04    0.007167   -0.019627   -0.003353   -0.002795 -3.0608e-04
mu_asc2        0.007679    0.051772   -0.002363 -1.4337e-04    0.006441  5.0354e-04   -0.020178   -0.001394  -6.164e-05
mu_natural    -0.001250   -0.002363    0.009202 -5.5215e-04 -3.1992e-04    0.003455    0.003757    0.003683 -3.7722e-04
mu_walking  -4.7402e-04 -1.4337e-04 -5.5215e-04  2.4502e-04 -3.9108e-04 -1.5435e-04 -8.6673e-04 -2.3062e-04  1.5487e-04
mu_rent        0.007167    0.006441 -3.1992e-04 -3.9108e-04    0.052607    0.001972    0.007389    0.002949 -2.6508e-04
sig_asc1      -0.019627  5.0354e-04    0.003455 -1.5435e-04    0.001972    0.042878    0.014853    0.002505 -1.2188e-04
sig_asc2      -0.003353   -0.020178    0.003757 -8.6673e-04    0.007389    0.014853    0.068960    0.002336 -3.9575e-04
sig_natural   -0.002795   -0.001394    0.003683 -2.3062e-04    0.002949    0.002505    0.002336    0.009674 -1.1749e-04
sig_walking -3.0608e-04  -6.164e-05 -3.7722e-04  1.5487e-04 -2.6508e-04 -1.2188e-04 -3.9575e-04 -1.1749e-04  1.1443e-04
sig_rent      -0.006308   -0.006106    0.001355 -1.3754e-04   -0.026879  9.7377e-04 -5.9621e-04 -3.1713e-04 -1.1307e-04
               sig_rent
mu_asc1       -0.006308
mu_asc2       -0.006106
mu_natural     0.001355
mu_walking  -1.3754e-04
mu_rent       -0.026879
sig_asc1     9.7377e-04
sig_asc2    -5.9621e-04
sig_natural -3.1713e-04
sig_walking -1.1307e-04
sig_rent       0.032495

Robust covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        0.058355    0.038741    0.001043 -8.7318e-04    0.012137   -0.021739   -0.024217   -0.004873 -6.0706e-04
mu_asc2        0.038741    0.061717   -0.002082 -3.5389e-04    0.007095   -0.010227   -0.023221   -0.003290 -2.9310e-04
mu_natural     0.001043   -0.002082    0.010932 -7.7085e-04    0.002846    0.004548  4.2087e-04    0.006907 -5.2321e-04
mu_walking  -8.7318e-04 -3.5389e-04 -7.7085e-04  3.3027e-04 -7.2234e-04   8.882e-05 -6.2083e-04 -4.7386e-04  2.0942e-04
mu_rent        0.012137    0.007095    0.002846 -7.2234e-04    0.054470    0.005110    0.002490    0.001926 -4.1785e-04
sig_asc1      -0.021739   -0.010227    0.004548   8.882e-05    0.005110    0.040881    0.038391    0.003232   7.752e-05
sig_asc2      -0.024217   -0.023221  4.2087e-04 -6.2083e-04    0.002490    0.038391    0.106320    0.002093 -1.2011e-04
sig_natural   -0.004873   -0.003290    0.006907 -4.7386e-04    0.001926    0.003232    0.002093    0.010712 -2.8498e-04
sig_walking -6.0706e-04 -2.9310e-04 -5.2321e-04  2.0942e-04 -4.1785e-04   7.752e-05 -1.2011e-04 -2.8498e-04  1.3639e-04
sig_rent      -0.011472   -0.006039 -8.1901e-04  -2.657e-05   -0.026600   -0.001461    0.001684  9.5836e-04  -5.182e-05
               sig_rent
mu_asc1       -0.011472
mu_asc2       -0.006039
mu_natural  -8.1901e-04
mu_walking   -2.657e-05
mu_rent       -0.026600
sig_asc1      -0.001461
sig_asc2       0.001684
sig_natural  9.5836e-04
sig_walking  -5.182e-05
sig_rent       0.028020

Classical correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         1.00000     0.16114    -0.06223    -0.14459     0.14921    -0.45257    -0.06097    -0.13570    -0.13662
mu_asc2         0.16114     1.00000    -0.10828    -0.04025     0.12341     0.01069    -0.33770    -0.06228    -0.02533
mu_natural     -0.06223    -0.10828     1.00000    -0.36772    -0.01454     0.17391     0.14913     0.39032    -0.36762
mu_walking     -0.14459    -0.04025    -0.36772     1.00000    -0.10893    -0.04762    -0.21085    -0.14979     0.92489
mu_rent         0.14921     0.12341    -0.01454    -0.10893     1.00000     0.04152     0.12268     0.13070    -0.10804
sig_asc1       -0.45257     0.01069     0.17391    -0.04762     0.04152     1.00000     0.27316     0.12297    -0.05503
sig_asc2       -0.06097    -0.33770     0.14913    -0.21085     0.12268     0.27316     1.00000     0.09042    -0.14088
sig_natural    -0.13570    -0.06228     0.39032    -0.14979     0.13070     0.12297     0.09042     1.00000    -0.11167
sig_walking    -0.13662    -0.02533    -0.36762     0.92489    -0.10804    -0.05503    -0.14088    -0.11167     1.00000
sig_rent       -0.16710    -0.14888     0.07836    -0.04874    -0.65011     0.02609    -0.01259    -0.01789    -0.05864
               sig_rent
mu_asc1        -0.16710
mu_asc2        -0.14888
mu_natural      0.07836
mu_walking     -0.04874
mu_rent        -0.65011
sig_asc1        0.02609
sig_asc2       -0.01259
sig_natural    -0.01789
sig_walking    -0.05864
sig_rent        1.00000

Robust correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         1.00000     0.64554     0.04130   -0.198899     0.21528    -0.44507    -0.30745    -0.19491    -0.21518
mu_asc2         0.64554     1.00000    -0.08015   -0.078385     0.12237    -0.20360    -0.28666    -0.12797    -0.10102
mu_natural      0.04130    -0.08015     1.00000   -0.405680     0.11663     0.21515     0.01234     0.63827    -0.42848
mu_walking     -0.19890    -0.07839    -0.40568    1.000000    -0.17030     0.02417    -0.10477    -0.25193     0.98675
mu_rent         0.21528     0.12237     0.11663   -0.170305     1.00000     0.10828     0.03272     0.07975    -0.15330
sig_asc1       -0.44507    -0.20360     0.21515    0.024171     0.10828     1.00000     0.58232     0.15446     0.03283
sig_asc2       -0.30745    -0.28666     0.01234   -0.104770     0.03272     0.58232     1.00000     0.06202    -0.03154
sig_natural    -0.19491    -0.12797     0.63827   -0.251934     0.07975     0.15446     0.06202     1.00000    -0.23577
sig_walking    -0.21518    -0.10102    -0.42848    0.986745    -0.15330     0.03283    -0.03154    -0.23577     1.00000
sig_rent       -0.28371    -0.14521    -0.04680   -0.008735    -0.68089    -0.04317     0.03086     0.05532    -0.02651
               sig_rent
mu_asc1       -0.283706
mu_asc2       -0.145213
mu_natural    -0.046795
mu_walking    -0.008735
mu_rent       -0.680892
sig_asc1      -0.043169
sig_asc2       0.030858
sig_natural    0.055318
sig_walking   -0.026509
sig_rent       1.000000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
  12959           0.1774428
  16565           0.2121461
  19182           0.2232555
  16976           0.2531840
 626200           0.2541331
   1586           0.2556825
  16141           0.2581596
 137000           0.2690340
   3981           0.2880800
  18922           0.2893112
   2821           0.2968345
 297500           0.3067922
  12832           0.3090795
   5566           0.3345304
    135           0.3400514
 356300           0.3435129
   1832           0.3450656
  17197           0.3498965
 402800           0.3541598
  16974           0.3560506

Changes in parameter estimates from starting values:
                Initial    Estimate  Difference
mu_asc1         -1.0000    -1.49202    -0.49202
mu_asc2         -1.0000    -1.46234    -0.46234
mu_natural       1.0000     1.01564     0.01564
mu_walking      -0.2000    -0.12199     0.07801
mu_rent         -2.0000    -3.32364    -1.32364
sig_asc1         1.0000     1.61695     0.61695
sig_asc2         1.0000     2.24114     1.24114
sig_natural      1.0000     0.74489    -0.25511
sig_walking      0.5000    -0.08145    -0.58145
sig_rent         1.0000     1.37971     0.37971

Settings and functions used in model definition:

apollo_control
--------------
                       Value                       
modelName              "MXL_full_ps_Bremen"        
modelDescr             "PS_full_ Bremen"           
indivID                "id"                        
mixing                 "TRUE"                      
HB                     "FALSE"                     
nCores                 "31"                        
outputDirectory        "Estimation_results/MXL_ps/"
debug                  "FALSE"                     
workInLogs             "FALSE"                     
seed                   "13"                        
noValidation           "FALSE"                     
noDiagnostics          "FALSE"                     
calculateLLC           "TRUE"                      
panelData              "TRUE"                      
analyticGrad           "TRUE"                      
analyticGrad_manualSet "FALSE"                     

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                 Value
mu_asc1     1.49202490
mu_asc2     1.46234061
mu_natural  1.01563912
mu_walking  0.12199059
mu_rent     3.32364416
sig_asc1    1.61695609
sig_asc2    2.24114162
sig_natural 0.74489500
sig_walking 0.08145442
sig_rent    1.37971237

Scaling used in computing Hessian
--------------
                 Value
mu_asc1     1.49202467
mu_asc2     1.46233962
mu_natural  1.01563962
mu_walking  0.12199079
mu_rent     3.32364050
sig_asc1    1.61695289
sig_asc2    2.24114290
sig_natural 0.74489470
sig_walking 0.08145426
sig_rent    1.37971308


apollo_randCoeff
----------------
function(apollo_beta, apollo_inputs){
    randcoeff = list()
    
    randcoeff[["b_mu_asc1"]] = mu_asc1 + sig_asc1 * draws_asc1
    randcoeff[["b_mu_asc2"]] = mu_asc2 + sig_asc2 * draws_asc2
    randcoeff[["b_mu_natural"]] = mu_natural + sig_natural * draws_natural
    randcoeff[["b_mu_walking"]] = mu_walking + sig_walking * draws_walking
    randcoeff[["b_mu_rent"]] = -exp(mu_rent + sig_rent * draws_rent)
    
    return(randcoeff)
  }
<bytecode: 0x564c176bdf48>


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = b_mu_asc1 + b_mu_natural * Naturnähe_1 + b_mu_walking * Erreichbarkeit_1 + b_mu_rent * Miete_1
    
    V[['alt2']] = b_mu_asc2 + b_mu_natural * Naturnähe_2 + b_mu_walking * Erreichbarkeit_2 + b_mu_rent * Miete_2
    
    V[['alt3']] = b_mu_natural * Naturnähe_3 + b_mu_walking * Erreichbarkeit_3 + b_mu_rent * Miete_3
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x564c168daf50>
