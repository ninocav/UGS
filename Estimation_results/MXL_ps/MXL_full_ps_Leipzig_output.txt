Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Linux.
www.ApolloChoiceModelling.com

Model name                                  : MXL_full_ps_Leipzig
Model description                           : PS_full_ Leipzig
Model run at                                : 2023-04-19 14:14:03
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 445
Number of rows in database                  : 4437
Number of modelled outcomes                 : 4437

Number of cores used                        :  31 
Number of inter-individual draws            : 2000 (sobol)

LL(start)                                   : -2711.64
LL at equal shares, LL(0)                   : -4874.54
LL at observed shares, LL(C)                : -3732.04
LL(final)                                   : -2440.56
Rho-squared vs equal shares                  :  0.4993 
Adj.Rho-squared vs equal shares              :  0.4973 
Rho-squared vs observed shares               :  0.3461 
Adj.Rho-squared vs observed shares           :  0.3434 
AIC                                         :  4901.12 
BIC                                         :  4965.1 

Estimated parameters                        :  10
Time taken (hh:mm:ss)                       :  00:05:6.25 
     pre-estimation                         :  00:03:10.66 
     estimation                             :  00:00:34.48 
     post-estimation                        :  00:01:21.1 
Iterations                                  :  23  
Min abs eigenvalue of Hessian               :  33.31041 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
               Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1        -1.04083    0.104929      -9.919    0.123053        -8.458
mu_asc2        -1.13093    0.105402     -10.730    0.120329        -9.399
mu_natural      1.07599    0.064452      16.694    0.072497        14.842
mu_walking     -0.13470    0.010286     -13.095    0.011375       -11.842
mu_rent        -3.14342    0.149634     -21.007    0.156675       -20.063
sig_asc1        1.09675    0.126170       8.693    0.134285         8.167
sig_asc2        1.17081    0.129404       9.048    0.158632         7.381
sig_natural     0.80924    0.060474      13.382    0.065498        12.355
sig_walking     0.06734    0.006941       9.701    0.006968         9.663
sig_rent        1.52658    0.112102      13.618    0.122236        12.489


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  4437.00 4437.00 4437.00
Times chosen                      686.00  711.00 3040.00
Percentage chosen overall          15.46   16.02   68.51
Percentage chosen when available   15.46   16.02   68.51


Classical covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        0.011010    0.002447  -3.997e-05 -2.4531e-04    0.002383   -0.005259 -7.3074e-04 -3.9761e-04  1.3882e-04
mu_asc2        0.002447    0.011110 -3.8277e-04 -1.8267e-04    0.002065 -6.9335e-04   -0.004583 -2.8342e-04  1.0316e-04
mu_natural   -3.997e-05 -3.8277e-04    0.004154 -2.6598e-04  -8.862e-05  8.9817e-04  9.1893e-04    0.001737  1.3188e-04
mu_walking  -2.4531e-04 -1.8267e-04 -2.6598e-04  1.0581e-04 -1.6621e-04  -6.471e-05 -1.1734e-04 -1.6092e-04  -6.004e-05
mu_rent        0.002383    0.002065  -8.862e-05 -1.6621e-04    0.022390    0.001508    0.001626  6.9875e-04   9.192e-05
sig_asc1      -0.005259 -6.9335e-04  8.9817e-04  -6.471e-05    0.001508    0.015919    0.004784  9.1464e-04   2.583e-05
sig_asc2    -7.3074e-04   -0.004583  9.1893e-04 -1.1734e-04    0.001626    0.004784    0.016745  4.1541e-04   4.430e-05
sig_natural -3.9761e-04 -2.8342e-04    0.001737 -1.6092e-04  6.9875e-04  9.1464e-04  4.1541e-04    0.003657   5.297e-05
sig_walking  1.3882e-04  1.0316e-04  1.3188e-04  -6.004e-05   9.192e-05   2.583e-05   4.430e-05   5.297e-05   4.818e-05
sig_rent      -0.001553   -0.001607  7.5542e-04 -1.1000e-04   -0.010513  -2.296e-05  4.2579e-04  2.2606e-04   6.904e-05
               sig_rent
mu_asc1       -0.001553
mu_asc2       -0.001607
mu_natural   7.5542e-04
mu_walking  -1.1000e-04
mu_rent       -0.010513
sig_asc1     -2.296e-05
sig_asc2     4.2579e-04
sig_natural  2.2606e-04
sig_walking   6.904e-05
sig_rent       0.012567

Robust covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        0.015142    0.010444  1.4035e-04 -3.3677e-04    0.002805   -0.008213   -0.006224   -0.001115  2.2716e-04
mu_asc2        0.010444    0.014479 -3.7225e-04 -1.9959e-04    0.001637   -0.005307   -0.007735   -0.001239  1.5958e-04
mu_natural   1.4035e-04 -3.7225e-04    0.005256 -4.0270e-04  2.2815e-04 -1.3531e-04 -2.6778e-04    0.003067  1.6783e-04
mu_walking  -3.3677e-04 -1.9959e-04 -4.0270e-04  1.2939e-04 -1.7584e-04  1.7714e-04  1.0499e-04 -2.2983e-04  -7.299e-05
mu_rent        0.002805    0.001637  2.2815e-04 -1.7584e-04    0.024547    0.004344    0.003347    0.001262   2.617e-05
sig_asc1      -0.008213   -0.005307 -1.3531e-04  1.7714e-04    0.004344    0.018032    0.013777  6.5556e-04 -1.5423e-04
sig_asc2      -0.006224   -0.007735 -2.6778e-04  1.0499e-04    0.003347    0.013777    0.025164   8.581e-05 -1.1249e-04
sig_natural   -0.001115   -0.001239    0.003067 -2.2983e-04    0.001262  6.5556e-04   8.581e-05    0.004290   4.975e-05
sig_walking  2.2716e-04  1.5958e-04  1.6783e-04  -7.299e-05   2.617e-05 -1.5423e-04 -1.1249e-04   4.975e-05   4.856e-05
sig_rent      -0.002566   -0.001861  9.3919e-04 -1.5334e-04   -0.012334   -0.001266  -7.046e-05  1.6709e-04  1.4665e-04
               sig_rent
mu_asc1       -0.002566
mu_asc2       -0.001861
mu_natural   9.3919e-04
mu_walking  -1.5334e-04
mu_rent       -0.012334
sig_asc1      -0.001266
sig_asc2     -7.046e-05
sig_natural  1.6709e-04
sig_walking  1.4665e-04
sig_rent       0.014942

Classical correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        1.000000     0.22123   -0.005910    -0.22728    0.151794   -0.397246    -0.05382    -0.06266     0.19061
mu_asc2        0.221231     1.00000   -0.056344    -0.16848    0.130950   -0.052137    -0.33598    -0.04446     0.14101
mu_natural    -0.005910    -0.05634    1.000000    -0.40119   -0.009189    0.110449     0.11018     0.44576     0.29480
mu_walking    -0.227282    -0.16848   -0.401194     1.00000   -0.107985   -0.049860    -0.08815    -0.25868    -0.84098
mu_rent        0.151794     0.13095   -0.009189    -0.10798    1.000000    0.079893     0.08398     0.07722     0.08850
sig_asc1      -0.397246    -0.05214    0.110449    -0.04986    0.079893    1.000000     0.29301     0.11987     0.02949
sig_asc2      -0.053817    -0.33598    0.110178    -0.08815    0.083984    0.293011     1.00000     0.05308     0.04932
sig_natural   -0.062660    -0.04446    0.445760    -0.25868    0.077219    0.119874     0.05308     1.00000     0.12619
sig_walking    0.190608     0.14101    0.294800    -0.84098    0.088500    0.029491     0.04932     0.12619     1.00000
sig_rent      -0.132054    -0.13598    0.104553    -0.09539   -0.626720   -0.001623     0.02935     0.03335     0.08873
               sig_rent
mu_asc1       -0.132054
mu_asc2       -0.135976
mu_natural     0.104553
mu_walking    -0.095390
mu_rent       -0.626720
sig_asc1      -0.001623
sig_asc2       0.029352
sig_natural    0.033345
sig_walking    0.088725
sig_rent       1.000000

Robust correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         1.00000     0.70532     0.01573    -0.24060     0.14547    -0.49701   -0.318876   -0.138370     0.26491
mu_asc2         0.70532     1.00000    -0.04267    -0.14582     0.08686    -0.32841   -0.405230   -0.157145     0.19031
mu_natural      0.01573    -0.04267     1.00000    -0.48833     0.02009    -0.01390   -0.023284    0.645802     0.33220
mu_walking     -0.24060    -0.14582    -0.48833     1.00000    -0.09867     0.11597    0.058185   -0.308472    -0.92085
mu_rent         0.14547     0.08686     0.02009    -0.09867     1.00000     0.20650    0.134652    0.122954     0.02397
sig_asc1       -0.49701    -0.32841    -0.01390     0.11597     0.20650     1.00000    0.646744    0.074535    -0.16481
sig_asc2       -0.31888    -0.40523    -0.02328     0.05819     0.13465     0.64674    1.000000    0.008259    -0.10176
sig_natural    -0.13837    -0.15715     0.64580    -0.30847     0.12295     0.07453    0.008259    1.000000     0.10900
sig_walking     0.26491     0.19031     0.33220    -0.92085     0.02397    -0.16481   -0.101764    0.109000     1.00000
sig_rent       -0.17059    -0.12650     0.10598    -0.11028    -0.64402    -0.07712   -0.003634    0.020870     0.17217
               sig_rent
mu_asc1       -0.170587
mu_asc2       -0.126502
mu_natural     0.105983
mu_walking    -0.110278
mu_rent       -0.644025
sig_asc1      -0.077118
sig_asc2      -0.003634
sig_natural    0.020870
sig_walking    0.172166
sig_rent       1.000000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
  12675           0.1711515
  17404           0.1794268
  11710           0.1868621
  15907           0.1908173
 276900           0.2120590
  15499           0.2225632
 301000           0.2257718
   6594           0.2277856
  12885           0.2288617
  12792           0.2311495
   6429           0.2317985
 139600           0.2414906
   6352           0.2488059
 221300           0.2523794
   7095           0.2529469
  15778           0.2536628
  18152           0.2568292
  13717           0.2637578
  10318           0.2665673
 190000           0.2694509

Changes in parameter estimates from starting values:
                Initial    Estimate  Difference
mu_asc1         -1.0000    -1.04083    -0.04083
mu_asc2         -1.0000    -1.13093    -0.13093
mu_natural       1.0000     1.07599     0.07599
mu_walking      -0.2000    -0.13470     0.06530
mu_rent         -2.0000    -3.14342    -1.14342
sig_asc1         1.0000     1.09675     0.09675
sig_asc2         1.0000     1.17081     0.17081
sig_natural      1.0000     0.80924    -0.19076
sig_walking      0.5000     0.06734    -0.43266
sig_rent         1.0000     1.52658     0.52658

Settings and functions used in model definition:

apollo_control
--------------
                       Value                       
modelName              "MXL_full_ps_Leipzig"       
modelDescr             "PS_full_ Leipzig"          
indivID                "id"                        
mixing                 "TRUE"                      
HB                     "FALSE"                     
nCores                 "31"                        
outputDirectory        "Estimation_results/MXL_ps/"
debug                  "FALSE"                     
workInLogs             "FALSE"                     
seed                   "13"                        
noValidation           "FALSE"                     
noDiagnostics          "FALSE"                     
calculateLLC           "TRUE"                      
panelData              "TRUE"                      
analyticGrad           "TRUE"                      
analyticGrad_manualSet "FALSE"                     

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                 Value
mu_asc1     1.04083523
mu_asc2     1.13091947
mu_natural  1.07599862
mu_walking  0.13469944
mu_rent     3.14343313
sig_asc1    1.09674741
sig_asc2    1.17080730
sig_natural 0.80922780
sig_walking 0.06733751
sig_rent    1.52655320

Scaling used in computing Hessian
--------------
                 Value
mu_asc1     1.04083179
mu_asc2     1.13092645
mu_natural  1.07598739
mu_walking  0.13470051
mu_rent     3.14342153
sig_asc1    1.09674698
sig_asc2    1.17080638
sig_natural 0.80924080
sig_walking 0.06733679
sig_rent    1.52657954


apollo_randCoeff
----------------
function(apollo_beta, apollo_inputs){
    randcoeff = list()
    
    randcoeff[["b_mu_asc1"]] = mu_asc1 + sig_asc1 * draws_asc1
    randcoeff[["b_mu_asc2"]] = mu_asc2 + sig_asc2 * draws_asc2
    randcoeff[["b_mu_natural"]] = mu_natural + sig_natural * draws_natural
    randcoeff[["b_mu_walking"]] = mu_walking + sig_walking * draws_walking
    randcoeff[["b_mu_rent"]] = -exp(mu_rent + sig_rent * draws_rent)
    
    return(randcoeff)
  }
<bytecode: 0x564c176bdf48>


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = b_mu_asc1 + b_mu_natural * Naturnähe_1 + b_mu_walking * Erreichbarkeit_1 + b_mu_rent * Miete_1
    
    V[['alt2']] = b_mu_asc2 + b_mu_natural * Naturnähe_2 + b_mu_walking * Erreichbarkeit_2 + b_mu_rent * Miete_2
    
    V[['alt3']] = b_mu_natural * Naturnähe_3 + b_mu_walking * Erreichbarkeit_3 + b_mu_rent * Miete_3
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x564c168daf50>
