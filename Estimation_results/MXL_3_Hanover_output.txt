Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Linux.
www.ApolloChoiceModelling.com

Model name                                  : MXL_3_Hanover
Model description                           : WTP_3_ Hanover
Model run at                                : 2023-04-05 19:51:49
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 87
Number of rows in database                  : 870
Number of modelled outcomes                 : 870

Number of cores used                        :  31 
Number of inter-individual draws            : 2000 (sobol)

LL(start)                                   : -554.59
LL at equal shares, LL(0)                   : -955.79
LL at observed shares, LL(C)                : -732.76
LL(final)                                   : -472.44
Rho-squared vs equal shares                  :  0.5057 
Adj.Rho-squared vs equal shares              :  0.4952 
Rho-squared vs observed shares               :  0.3553 
Adj.Rho-squared vs observed shares           :  0.3416 
AIC                                         :  964.88 
BIC                                         :  1012.57 

Estimated parameters                        :  10
Time taken (hh:mm:ss)                       :  00:02:27.46 
     pre-estimation                         :  00:01:47.14 
     estimation                             :  00:00:26.45 
     post-estimation                        :  00:00:13.87 
Iterations                                  :  80  
Min abs eigenvalue of Hessian               :  0.264647 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
               Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1          -6.502     0.93227      -6.974     0.34410       -18.896
mu_asc2          -9.568     0.60329     -15.859     0.30202       -31.679
mu_natural       15.861     0.89597      17.702     0.40585        39.081
mu_walking       -2.030     0.16922     -11.999     0.10344       -19.630
mu_rent          -1.651     0.34228      -4.825     0.31161        -5.299
sig_asc1         13.643     0.77181      17.677     0.32395        42.116
sig_asc2         15.277     1.53093       9.979     0.97156        15.724
sig_natural      15.311     0.84379      18.146     0.35650        42.948
sig_walking       1.094     0.09859      11.100     0.05840        18.739
sig_rent          2.193     0.42264       5.189     0.50462         4.346


Overview of choices for MNL model component :
                                   alt1   alt2   alt3
Times available                  870.00 870.00 870.00
Times chosen                     121.00 155.00 594.00
Percentage chosen overall         13.91  17.82  68.28
Percentage chosen when available  13.91  17.82  68.28


Classical covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         0.86913     0.06865    -0.47161     0.01737   -0.019247    -0.31154     -0.1646   -0.489687   -0.035836
mu_asc2         0.06865     0.36395    -0.18338     0.05214    0.056954    -0.15210     -0.7279   -0.220972   -0.032339
mu_natural     -0.47161    -0.18338     0.80277    -0.11383   -0.023361     0.43472      0.9023    0.704969    0.073292
mu_walking      0.01737     0.05214    -0.11383     0.02864    0.012191    -0.07192     -0.2335   -0.088185   -0.015212
mu_rent        -0.01925     0.05695    -0.02336     0.01219    0.117157    -0.02631     -0.1476   -0.025151   -0.007952
sig_asc1       -0.31154    -0.15210     0.43472    -0.07192   -0.026310     0.59569      0.6068    0.391426    0.048036
sig_asc2       -0.16456    -0.72790     0.90230    -0.23347   -0.147570     0.60682      2.3437    0.799573    0.128305
sig_natural    -0.48969    -0.22097     0.70497    -0.08819   -0.025151     0.39143      0.7996    0.711980    0.060819
sig_walking    -0.03584    -0.03234     0.07329    -0.01521   -0.007952     0.04804      0.1283    0.060819    0.009719
sig_rent       -0.04586     0.06399 -3.2741e-04     0.01064    0.083861    -0.02404     -0.1513   -0.005536   -0.007502
               sig_rent
mu_asc1       -0.045857
mu_asc2        0.063992
mu_natural  -3.2741e-04
mu_walking     0.010635
mu_rent        0.083861
sig_asc1      -0.024045
sig_asc2      -0.151327
sig_natural   -0.005536
sig_walking   -0.007502
sig_rent       0.178622

Robust covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        0.118404    -0.01526    -0.06015   -0.002914   -0.029440    -0.01562     0.04169    -0.06739 -9.1980e-04
mu_asc2       -0.015258     0.09121    -0.07731    0.027363    0.051364    -0.06515    -0.27998    -0.06643   -0.015608
mu_natural    -0.060152    -0.07731     0.16471   -0.034878   -0.030649     0.10974     0.30304     0.13956    0.020749
mu_walking    -0.002914     0.02736    -0.03488    0.010700    0.014456    -0.02695    -0.09841    -0.02696   -0.005927
mu_rent       -0.029440     0.05136    -0.03065    0.014456    0.097103    -0.02989    -0.15464    -0.02273   -0.008706
sig_asc1      -0.015617    -0.06515     0.10974   -0.026954   -0.029894     0.10494     0.24244     0.08984    0.015467
sig_asc2       0.041695    -0.27998     0.30304   -0.098412   -0.154639     0.24244     0.94394     0.24278    0.055067
sig_natural   -0.067391    -0.06643     0.13956   -0.026964   -0.022733     0.08984     0.24278     0.12709    0.016626
sig_walking -9.1980e-04    -0.01561     0.02075   -0.005927   -0.008706     0.01547     0.05507     0.01663    0.003410
sig_rent      -0.071389     0.08569    -0.02177    0.020383    0.093985    -0.04236    -0.23814    -0.01275   -0.012709
               sig_rent
mu_asc1        -0.07139
mu_asc2         0.08569
mu_natural     -0.02177
mu_walking      0.02038
mu_rent         0.09399
sig_asc1       -0.04236
sig_asc2       -0.23814
sig_natural    -0.01275
sig_walking    -0.01271
sig_rent        0.25464

Classical correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         1.00000      0.1221    -0.56460      0.1101    -0.06032    -0.43298     -0.1153    -0.62250     -0.3899
mu_asc2         0.12206      1.0000    -0.33925      0.5107     0.27581    -0.32667     -0.7881    -0.43409     -0.5437
mu_natural     -0.56460     -0.3393     1.00000     -0.7508    -0.07617     0.62864      0.6578     0.93248      0.8298
mu_walking      0.11009      0.5107    -0.75077      1.0000     0.21047    -0.55069     -0.9012    -0.61759     -0.9118
mu_rent        -0.06032      0.2758    -0.07617      0.2105     1.00000    -0.09959     -0.2816    -0.08708     -0.2357
sig_asc1       -0.43298     -0.3267     0.62864     -0.5507    -0.09959     1.00000      0.5136     0.60104      0.6313
sig_asc2       -0.11530     -0.7881     0.65781     -0.9012    -0.28162     0.51357      1.0000     0.61897      0.8501
sig_natural    -0.62250     -0.4341     0.93248     -0.6176    -0.08708     0.60104      0.6190     1.00000      0.7311
sig_walking    -0.38991     -0.5437     0.82976     -0.9118    -0.23565     0.63131      0.8501     0.73113      1.0000
sig_rent       -0.11638      0.2510 -8.6463e-04      0.1487     0.57971    -0.07371     -0.2339    -0.01553     -0.1801
               sig_rent
mu_asc1        -0.11638
mu_asc2         0.25098
mu_natural  -8.6463e-04
mu_walking      0.14870
mu_rent         0.57971
sig_asc1       -0.07371
sig_asc2       -0.23388
sig_natural    -0.01553
sig_walking    -0.18006
sig_rent        1.00000

Robust correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         1.00000     -0.1468     -0.4307    -0.08186     -0.2746     -0.1401      0.1247    -0.54936    -0.04577
mu_asc2        -0.14682      1.0000     -0.6307     0.87590      0.5458     -0.6659     -0.9542    -0.61699    -0.88492
mu_natural     -0.43073     -0.6307      1.0000    -0.83082     -0.2423      0.8347      0.7685     0.96457     0.87546
mu_walking     -0.08186      0.8759     -0.8308     1.00000      0.4485     -0.8044     -0.9793    -0.73119    -0.98112
mu_rent        -0.27456      0.5458     -0.2423     0.44847      1.0000     -0.2961     -0.5108    -0.20463    -0.47841
sig_asc1       -0.14010     -0.6659      0.8347    -0.80438     -0.2961      1.0000      0.7703     0.77787     0.81760
sig_asc2        0.12472     -0.9542      0.7685    -0.97925     -0.5108      0.7703      1.0000     0.70095     0.97054
sig_natural    -0.54936     -0.6170      0.9646    -0.73119     -0.2046      0.7779      0.7009     1.00000     0.79858
sig_walking    -0.04577     -0.8849      0.8755    -0.98112     -0.4784      0.8176      0.9705     0.79858     1.00000
sig_rent       -0.41114      0.5623     -0.1063     0.39049      0.5977     -0.2591     -0.4857    -0.07090    -0.43127
               sig_rent
mu_asc1        -0.41114
mu_asc2         0.56226
mu_natural     -0.10630
mu_walking      0.39049
mu_rent         0.59769
sig_asc1       -0.25912
sig_asc2       -0.48573
sig_natural    -0.07090
sig_walking    -0.43127
sig_rent        1.00000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
 437000           0.2370248
 196700           0.2397275
 218200           0.2397731
 422700           0.2444728
 454400           0.2709292
 288900           0.2775038
 302900           0.2932643
 209600           0.3031721
 298600           0.3163464
 296700           0.3241160
 405800           0.3408184
 248200           0.3483535
 203200           0.3514624
 363400           0.3570201
 244500           0.3669413
 195100           0.3688460
 380700           0.3690193
 145200           0.3885223
 319900           0.4016425
 135500           0.4216344

Changes in parameter estimates from starting values:
                Initial    Estimate  Difference
mu_asc1         -10.000      -6.502      3.4980
mu_asc2         -10.000      -9.568      0.4322
mu_natural       10.000      15.861      5.8608
mu_walking       -3.000      -2.030      0.9695
mu_rent           0.000      -1.651     -1.6514
sig_asc1          5.000      13.643      8.6432
sig_asc2          5.000      15.277     10.2768
sig_natural      10.000      15.311      5.3112
sig_walking       5.000       1.094     -3.9057
sig_rent          2.000       2.193      0.1931

Settings and functions used in model definition:

apollo_control
--------------
                       Value                
modelName              "MXL_3_Hanover"      
modelDescr             "WTP_3_ Hanover"     
indivID                "id"                 
mixing                 "TRUE"               
HB                     "FALSE"              
nCores                 "31"                 
outputDirectory        "Estimation_results/"
debug                  "FALSE"              
workInLogs             "FALSE"              
seed                   "13"                 
noValidation           "FALSE"              
noDiagnostics          "FALSE"              
calculateLLC           "TRUE"               
panelData              "TRUE"               
analyticGrad           "TRUE"               
analyticGrad_manualSet "FALSE"              

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                Value
mu_asc1      6.505372
mu_asc2      9.560992
mu_natural  15.859663
mu_walking   2.029122
mu_rent      1.651485
sig_asc1    13.641183
sig_asc2    15.263220
sig_natural 15.311793
sig_walking  1.093650
sig_rent     2.193842

Scaling used in computing Hessian
--------------
                Value
mu_asc1      6.502038
mu_asc2      9.567765
mu_natural  15.860827
mu_walking   2.030485
mu_rent      1.651375
sig_asc1    13.643184
sig_asc2    15.276843
sig_natural 15.311230
sig_walking  1.094341
sig_rent     2.193125


apollo_randCoeff
----------------
function(apollo_beta, apollo_inputs){
  randcoeff = list()
  
  randcoeff[["b_mu_asc1"]] = mu_asc1 + sig_asc1 * draws_asc1
  randcoeff[["b_mu_asc2"]] = mu_asc2 + sig_asc2 * draws_asc2
  randcoeff[["b_mu_natural"]] = mu_natural + sig_natural * draws_natural
  randcoeff[["b_mu_walking"]] = mu_walking + sig_walking * draws_walking
  randcoeff[["b_mu_rent"]] = -exp(mu_rent + sig_rent * draws_rent)
  
  return(randcoeff)
}
<bytecode: 0x5582216a5b58>


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
  
  ### Function initialisation: do not change the following three commands
  ### Attach inputs and detach after function exit
  apollo_attach(apollo_beta, apollo_inputs)
  on.exit(apollo_detach(apollo_beta, apollo_inputs))
  
  ### Create list of probabilities P
  P = list()
  
  ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
  V = list()
  V[['alt1']] = -(b_mu_rent)* (b_mu_asc1 + b_mu_natural * Naturnähe_1 + b_mu_walking * Erreichbarkeit_1 - Miete_1)
  
  V[['alt2']] = -(b_mu_rent)* (b_mu_asc2 + b_mu_natural * Naturnähe_2 + b_mu_walking * Erreichbarkeit_2 - Miete_2)
  
  V[['alt3']] = -(b_mu_rent)* (b_mu_natural * Naturnähe_3 + b_mu_walking * Erreichbarkeit_3 - Miete_3)
  
  
### Define settings for MNL model component
mnl_settings = list(
    alternatives  = c(alt1=1, alt2=2, alt3=3),
    avail         = 1, # all alternatives are available in every choice
    choiceVar     = choice,
    V             = V#,  # tell function to use list vector defined above
    
)
  
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
  
### Take product across observation for same individual
P = apollo_panelProd(P, apollo_inputs, functionality)
  
### Average across inter-individual draws - nur bei Mixed Logit!
P = apollo_avgInterDraws(P, apollo_inputs, functionality)
  
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
 return(P)
}
<bytecode: 0x5582c94d6518>
