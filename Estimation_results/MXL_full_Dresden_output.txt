Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Linux.
www.ApolloChoiceModelling.com

Model name                                  : MXL_full_Dresden
Model description                           : WTP_full_ Dresden
Model run at                                : 2023-04-06 08:07:29
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 264
Number of rows in database                  : 2635
Number of modelled outcomes                 : 2635

Number of cores used                        :  31 
Number of inter-individual draws            : 2000 (sobol)

LL(start)                                   : -1880.21
LL at equal shares, LL(0)                   : -2894.84
LL at observed shares, LL(C)                : -2283.82
LL(final)                                   : -1614.47
Rho-squared vs equal shares                  :  0.4423 
Adj.Rho-squared vs equal shares              :  0.4388 
Rho-squared vs observed shares               :  0.2931 
Adj.Rho-squared vs observed shares           :  0.2887 
AIC                                         :  3248.95 
BIC                                         :  3307.71 

Estimated parameters                        :  10
Time taken (hh:mm:ss)                       :  00:04:22.03 
     pre-estimation                         :  00:02:52.81 
     estimation                             :  00:00:37.86 
     post-estimation                        :  00:00:51.36 
Iterations                                  :  50  
Min abs eigenvalue of Hessian               :  0.036714 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
               Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1         -17.287      3.1731      -5.448      4.5015        -3.840
mu_asc2         -18.052      3.1306      -5.766      5.2087        -3.466
mu_natural       17.796      2.7637       6.439      4.8777         3.648
mu_walking       -1.983      0.2401      -8.260      0.2595        -7.643
mu_rent          -2.663      0.1623     -16.409      0.2188       -12.172
sig_asc1         18.207      2.6577       6.851      3.3390         5.453
sig_asc2          7.762      2.5411       3.055      1.9208         4.041
sig_natural      14.843      2.0169       7.359      3.2792         4.526
sig_walking       1.127      0.1544       7.302      0.1566         7.199
sig_rent          1.509      0.1650       9.147      0.1939         7.782


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  2635.00 2635.00 2635.00
Times chosen                      426.00  451.00 1758.00
Percentage chosen overall          16.17   17.12   66.72
Percentage chosen when available   16.17   17.12   66.72


Classical covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        10.06837     6.83939    -5.72096     0.27714    0.266403   -4.943051    -1.20977    -4.10589   -0.157656
mu_asc2         6.83939     9.80063    -7.05985     0.24529    0.305367   -2.364561    -2.46474    -4.53615   -0.116227
mu_natural     -5.72096    -7.05985     7.63818    -0.29324   -0.281780    1.932649     0.83714     4.82261    0.140019
mu_walking      0.27714     0.24529    -0.29324     0.05766    0.013651   -0.347623    -0.04815    -0.21420   -0.035383
mu_rent         0.26640     0.30537    -0.28178     0.01365    0.026348   -0.102419    -0.05893    -0.17702   -0.007093
sig_asc1       -4.94305    -2.36456     1.93265    -0.34762   -0.102419    7.063558     0.89633     1.70070    0.194686
sig_asc2       -1.20977    -2.46474     0.83714    -0.04815   -0.058926    0.896330     6.45716     0.89187    0.019220
sig_natural    -4.10589    -4.53615     4.82261    -0.21420   -0.177020    1.700705     0.89187     4.06796    0.103225
sig_walking    -0.15766    -0.11623     0.14002    -0.03538   -0.007093    0.194686     0.01922     0.10322    0.023840
sig_rent        0.06025     0.08307    -0.09054 -4.8387e-04    0.010064    0.008270    -0.07491    -0.04206    0.001005
               sig_rent
mu_asc1        0.060246
mu_asc2        0.083069
mu_natural    -0.090539
mu_walking  -4.8387e-04
mu_rent        0.010064
sig_asc1       0.008270
sig_asc2      -0.074914
sig_natural   -0.042059
sig_walking    0.001005
sig_rent       0.027211

Robust covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        20.26327     20.7022    -17.8198    0.479604    0.666790    -6.79378    -3.43939    -12.4642   -0.213167
mu_asc2        20.70216     27.1307    -23.8611    0.437674    0.895829    -3.17625    -4.24449    -15.6009   -0.141021
mu_natural    -17.81981    -23.8611     23.7924   -0.431918   -0.904519     1.49426     3.04296     15.5680    0.132643
mu_walking      0.47960      0.4377     -0.4319    0.067340    0.018861    -0.60925    -0.11054     -0.3668   -0.039700
mu_rent         0.66679      0.8958     -0.9045    0.018861    0.047882    -0.05092    -0.15547     -0.5780   -0.006718
sig_asc1       -6.79378     -3.1763      1.4943   -0.609253   -0.050919    11.14864     1.92536      2.4572    0.357418
sig_asc2       -3.43939     -4.2445      3.0430   -0.110537   -0.155465     1.92536     3.68939      2.3350    0.043540
sig_natural   -12.46418    -15.6009     15.5680   -0.366782   -0.577958     2.45717     2.33496     10.7530    0.137212
sig_walking    -0.21317     -0.1410      0.1326   -0.039700   -0.006718     0.35742     0.04354      0.1372    0.024525
sig_rent        0.07819      0.2367     -0.3112   -0.005609    0.017914     0.16047    -0.11271     -0.1544    0.005781
               sig_rent
mu_asc1        0.078191
mu_asc2        0.236687
mu_natural    -0.311160
mu_walking    -0.005609
mu_rent        0.017914
sig_asc1       0.160470
sig_asc2      -0.112711
sig_natural   -0.154402
sig_walking    0.005781
sig_rent       0.037590

Classical correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1          1.0000      0.6885     -0.6524     0.36373      0.5172    -0.58614    -0.15004     -0.6416    -0.32179
mu_asc2          0.6885      1.0000     -0.8160     0.32630      0.6009    -0.28419    -0.30983     -0.7184    -0.24045
mu_natural      -0.6524     -0.8160      1.0000    -0.44187     -0.6281     0.26312     0.11920      0.8652     0.32812
mu_walking       0.3637      0.3263     -0.4419     1.00000      0.3502    -0.54470    -0.07892     -0.4423    -0.95433
mu_rent          0.5172      0.6009     -0.6281     0.35022      1.0000    -0.23741    -0.14286     -0.5407    -0.28300
sig_asc1        -0.5861     -0.2842      0.2631    -0.54470     -0.2374     1.00000     0.13272      0.3173     0.47443
sig_asc2        -0.1500     -0.3098      0.1192    -0.07892     -0.1429     0.13272     1.00000      0.1740     0.04899
sig_natural     -0.6416     -0.7184      0.8652    -0.44228     -0.5407     0.31727     0.17402      1.0000     0.33147
sig_walking     -0.3218     -0.2404      0.3281    -0.95433     -0.2830     0.47443     0.04899      0.3315     1.00000
sig_rent         0.1151      0.1609     -0.1986    -0.01222      0.3759     0.01886    -0.17872     -0.1264     0.03946
               sig_rent
mu_asc1         0.11510
mu_asc2         0.16086
mu_natural     -0.19860
mu_walking     -0.01222
mu_rent         0.37586
sig_asc1        0.01886
sig_asc2       -0.17872
sig_natural    -0.12642
sig_walking     0.03946
sig_rent        1.00000

Robust correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         1.00000      0.8829    -0.81158      0.4106     0.67694    -0.45201     -0.3978     -0.8444     -0.3024
mu_asc2         0.88294      1.0000    -0.93917      0.3238     0.78597    -0.18263     -0.4242     -0.9134     -0.1729
mu_natural     -0.81158     -0.9392     1.00000     -0.3412    -0.84745     0.09175      0.3248      0.9733      0.1736
mu_walking      0.41057      0.3238    -0.34123      1.0000     0.33216    -0.70315     -0.2218     -0.4310     -0.9769
mu_rent         0.67694      0.7860    -0.84745      0.3322     1.00000    -0.06969     -0.3699     -0.8055     -0.1960
sig_asc1       -0.45201     -0.1826     0.09175     -0.7032    -0.06969     1.00000      0.3002      0.2244      0.6835
sig_asc2       -0.39779     -0.4242     0.32479     -0.2218    -0.36989     0.30021      1.0000      0.3707      0.1447
sig_natural    -0.84439     -0.9134     0.97331     -0.4310    -0.80546     0.22442      0.3707      1.0000      0.2672
sig_walking    -0.30238     -0.1729     0.17364     -0.9769    -0.19603     0.68353      0.1447      0.2672      1.0000
sig_rent        0.08959      0.2344    -0.32902     -0.1115     0.42225     0.24788     -0.3027     -0.2429      0.1904
               sig_rent
mu_asc1         0.08959
mu_asc2         0.23437
mu_natural     -0.32902
mu_walking     -0.11149
mu_rent         0.42225
sig_asc1        0.24788
sig_asc2       -0.30266
sig_natural    -0.24286
sig_walking     0.19041
sig_rent        1.00000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
  10370           0.2303507
  15322           0.2370440
   6577           0.2396265
 189300           0.2433361
  13647           0.2559909
  16939           0.2559981
  15843           0.2573976
  11980           0.2603257
  18116           0.2634349
   6549           0.2639663
  15554           0.2689162
 226900           0.2723677
  10766           0.2730420
  19067           0.2758612
 293200           0.2771267
 159100           0.2798925
  11706           0.2821147
  10719           0.2830123
 277900           0.2860731
 211000           0.2874271

Changes in parameter estimates from starting values:
                Initial    Estimate  Difference
mu_asc1         -10.000     -17.287     -7.2867
mu_asc2         -10.000     -18.052     -8.0523
mu_natural       10.000      17.796      7.7961
mu_walking       -3.000      -1.983      1.0165
mu_rent           0.000      -2.663     -2.6635
sig_asc1          5.000      18.207     13.2075
sig_asc2          5.000       7.762      2.7620
sig_natural      10.000      14.843      4.8426
sig_walking       5.000       1.127     -3.8726
sig_rent          2.000       1.509     -0.4912

Settings and functions used in model definition:

apollo_control
--------------
                       Value                
modelName              "MXL_full_Dresden"   
modelDescr             "WTP_full_ Dresden"  
indivID                "id"                 
mixing                 "TRUE"               
HB                     "FALSE"              
nCores                 "31"                 
outputDirectory        "Estimation_results/"
debug                  "FALSE"              
workInLogs             "FALSE"              
seed                   "13"                 
noValidation           "FALSE"              
noDiagnostics          "FALSE"              
calculateLLC           "TRUE"               
panelData              "TRUE"               
analyticGrad           "TRUE"               
analyticGrad_manualSet "FALSE"              

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                Value
mu_asc1     17.286983
mu_asc2     18.052305
mu_natural  17.796578
mu_walking   1.983487
mu_rent      2.663476
sig_asc1    18.206898
sig_asc2     7.761893
sig_natural 14.842370
sig_walking  1.127397
sig_rent     1.508815

Scaling used in computing Hessian
--------------
                Value
mu_asc1     17.286718
mu_asc2     18.052272
mu_natural  17.796124
mu_walking   1.983484
mu_rent      2.663484
sig_asc1    18.207490
sig_asc2     7.761984
sig_natural 14.842573
sig_walking  1.127405
sig_rent     1.508812


apollo_randCoeff
----------------
function(apollo_beta, apollo_inputs){
    randcoeff = list()
    
    randcoeff[["b_mu_asc1"]] = mu_asc1 + sig_asc1 * draws_asc1
    randcoeff[["b_mu_asc2"]] = mu_asc2 + sig_asc2 * draws_asc2
    randcoeff[["b_mu_natural"]] = mu_natural + sig_natural * draws_natural
    randcoeff[["b_mu_walking"]] = mu_walking + sig_walking * draws_walking
    randcoeff[["b_mu_rent"]] = -exp(mu_rent + sig_rent * draws_rent)
    
    return(randcoeff)
  }
<bytecode: 0x5582857ada18>


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = -(b_mu_rent)* (b_mu_asc1 + b_mu_natural * Naturnähe_1 + b_mu_walking * Erreichbarkeit_1 - Miete_1)
    
    V[['alt2']] = -(b_mu_rent)* (b_mu_asc2 + b_mu_natural * Naturnähe_2 + b_mu_walking * Erreichbarkeit_2 - Miete_2)
    
    V[['alt3']] = -(b_mu_rent)* (b_mu_natural * Naturnähe_3 + b_mu_walking * Erreichbarkeit_3 - Miete_3)
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x5581acd53568>
