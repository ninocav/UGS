Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Linux.
www.ApolloChoiceModelling.com

Model name                                  : MXL_full_log_Hanover
Model description                           : WTP_full_log_rent Hanover
Model run at                                : 2023-04-26 08:48:12
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 289
Number of rows in database                  : 2879
Number of modelled outcomes                 : 2879

Number of cores used                        :  31 
Number of inter-individual draws            : 2000 (sobol)

LL(start)                                   : -1961.71
LL at equal shares, LL(0)                   : -3162.9
LL at observed shares, LL(C)                : -2497.17
LL(final)                                   : -1694.68
Rho-squared vs equal shares                  :  0.4642 
Adj.Rho-squared vs equal shares              :  0.461 
Rho-squared vs observed shares               :  0.3214 
Adj.Rho-squared vs observed shares           :  0.3174 
AIC                                         :  3409.36 
BIC                                         :  3469.01 

Estimated parameters                        :  10
Time taken (hh:mm:ss)                       :  00:05:55.95 
     pre-estimation                         :  00:02:53.7 
     estimation                             :  00:01:56.96 
     post-estimation                        :  00:01:5.29 
Iterations                                  :  79  
Min abs eigenvalue of Hessian               :  0.013504 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
               Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1       -0.018669    0.003706      -5.037    0.004864        -3.838
mu_asc2       -0.022651    0.003605      -6.282    0.004573        -4.953
mu_natural     0.022265    0.002491       8.939    0.003081         7.226
mu_walking    -0.002459  2.8255e-04      -8.702  3.3761e-04        -7.283
mu_rent      -64.689970    7.057560      -9.166    9.021097        -7.171
sig_asc1       0.030665    0.004352       7.046    0.006052         5.067
sig_asc2       0.024144    0.003985       6.059    0.004785         5.046
sig_natural    0.019430    0.002260       8.596    0.002647         7.341
sig_walking    0.001373  1.6967e-04       8.090  1.8507e-04         7.417
sig_rent      43.988602    5.208097       8.446    6.223794         7.068


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  2879.00 2879.00 2879.00
Times chosen                      458.00  502.00 1919.00
Percentage chosen overall          15.91   17.44   66.66
Percentage chosen when available   15.91   17.44   66.66


Classical covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1       1.374e-05   5.697e-06  -3.352e-06   1.441e-07   -0.012252  -7.537e-06  -2.936e-06  -2.831e-06  -7.151e-08
mu_asc2       5.697e-06   1.300e-05  -3.890e-06   2.478e-07   -0.012356  -4.886e-06  -7.906e-06  -3.019e-06  -1.226e-07
mu_natural   -3.352e-06  -3.890e-06   6.204e-06  -4.362e-07    0.009145   4.160e-06   3.410e-06   3.675e-06   2.247e-07
mu_walking    1.441e-07   2.478e-07  -4.362e-07   7.984e-08 -8.5834e-04  -4.709e-07  -3.484e-07  -2.675e-07  -4.384e-08
mu_rent       -0.012252   -0.012356    0.009145 -8.5834e-04   49.809149    0.011168    0.009860    0.006370  4.4213e-04
sig_asc1     -7.537e-06  -4.886e-06   4.160e-06  -4.709e-07    0.011168   1.894e-05   5.665e-06   3.091e-06   2.118e-07
sig_asc2     -2.936e-06  -7.906e-06   3.410e-06  -3.484e-07    0.009860   5.665e-06   1.588e-05   2.099e-06   1.607e-07
sig_natural  -2.831e-06  -3.019e-06   3.675e-06  -2.675e-07    0.006370   3.091e-06   2.099e-06   5.109e-06   1.407e-07
sig_walking  -7.151e-08  -1.226e-07   2.247e-07  -4.384e-08  4.4213e-04   2.118e-07   1.607e-07   1.407e-07   2.879e-08
sig_rent       0.008277    0.008243   -0.006278  6.0314e-04  -33.728678   -0.008023   -0.007429   -0.004122 -3.0453e-04
               sig_rent
mu_asc1        0.008277
mu_asc2        0.008243
mu_natural    -0.006278
mu_walking   6.0314e-04
mu_rent      -33.728678
sig_asc1      -0.008023
sig_asc2      -0.007429
sig_natural   -0.004122
sig_walking -3.0453e-04
sig_rent      27.124270

Robust covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1       2.366e-05   1.682e-05  -6.719e-06   2.898e-07   -0.027451  -1.533e-05  -1.005e-05  -6.213e-06  -1.277e-07
mu_asc2       1.682e-05   2.092e-05  -6.414e-06   4.066e-07   -0.022894  -1.343e-05  -1.560e-05  -5.583e-06  -1.888e-07
mu_natural   -6.719e-06  -6.414e-06   9.493e-06  -7.314e-07    0.018105   7.836e-06   6.787e-06   6.721e-06   3.750e-07
mu_walking    2.898e-07   4.066e-07  -7.314e-07   1.140e-07   -0.001577  -9.049e-07  -6.299e-07  -4.605e-07  -6.177e-08
mu_rent        -0.02745    -0.02289     0.01810   -0.001577   81.380187     0.02516     0.02176    0.012749  8.1022e-04
sig_asc1     -1.533e-05  -1.343e-05   7.836e-06  -9.049e-07    0.025161   3.663e-05   1.650e-05   6.033e-06   4.118e-07
sig_asc2     -1.005e-05  -1.560e-05   6.787e-06  -6.299e-07    0.021764   1.650e-05   2.289e-05   5.193e-06   2.962e-07
sig_natural  -6.213e-06  -5.583e-06   6.721e-06  -4.605e-07    0.012749   6.033e-06   5.193e-06   7.006e-06   2.353e-07
sig_walking  -1.277e-07  -1.888e-07   3.750e-07  -6.177e-08  8.1022e-04   4.118e-07   2.962e-07   2.353e-07   3.425e-08
sig_rent        0.01831     0.01400    -0.01236    0.001094  -54.852807    -0.01712    -0.01364   -0.008179 -5.5552e-04
               sig_rent
mu_asc1        0.018307
mu_asc2        0.013997
mu_natural    -0.012359
mu_walking     0.001094
mu_rent      -54.852807
sig_asc1      -0.017117
sig_asc2      -0.013635
sig_natural   -0.008179
sig_walking -5.5552e-04
sig_rent      38.735617

Classical correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1          1.0000      0.4264     -0.3631      0.1376     -0.4684     -0.4672     -0.1988     -0.3379     -0.1137
mu_asc2          0.4264      1.0000     -0.4332      0.2432     -0.4856     -0.3114     -0.5502     -0.3705     -0.2005
mu_natural      -0.3631     -0.4332      1.0000     -0.6198      0.5202      0.3838      0.3435      0.6527      0.5316
mu_walking       0.1376      0.2432     -0.6198      1.0000     -0.4304     -0.3829     -0.3094     -0.4188     -0.9146
mu_rent         -0.4684     -0.4856      0.5202     -0.4304      1.0000      0.3636      0.3506      0.3993      0.3692
sig_asc1        -0.4672     -0.3114      0.3838     -0.3829      0.3636      1.0000      0.3266      0.3142      0.2868
sig_asc2        -0.1988     -0.5502      0.3435     -0.3094      0.3506      0.3266      1.0000      0.2330      0.2377
sig_natural     -0.3379     -0.3705      0.6527     -0.4188      0.3993      0.3142      0.2330      1.0000      0.3669
sig_walking     -0.1137     -0.2005      0.5316     -0.9146      0.3692      0.2868      0.2377      0.3669      1.0000
sig_rent         0.4288      0.4390     -0.4839      0.4099     -0.9176     -0.3540     -0.3579     -0.3502     -0.3446
               sig_rent
mu_asc1          0.4288
mu_asc2          0.4390
mu_natural      -0.4839
mu_walking       0.4099
mu_rent         -0.9176
sig_asc1        -0.3540
sig_asc2        -0.3579
sig_natural     -0.3502
sig_walking     -0.3446
sig_rent         1.0000

Robust correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1          1.0000      0.7559     -0.4483      0.1765     -0.6256     -0.5206     -0.4319     -0.4825     -0.1418
mu_asc2          0.7559      1.0000     -0.4552      0.2633     -0.5549     -0.4850     -0.7128     -0.4612     -0.2231
mu_natural      -0.4483     -0.4552      1.0000     -0.7031      0.6514      0.4202      0.4604      0.8242      0.6577
mu_walking       0.1765      0.2633     -0.7031      1.0000     -0.5179     -0.4429     -0.3900     -0.5153     -0.9886
mu_rent         -0.6256     -0.5549      0.6514     -0.5179      1.0000      0.4608      0.5042      0.5339      0.4853
sig_asc1        -0.5206     -0.4850      0.4202     -0.4429      0.4608      1.0000      0.5696      0.3766      0.3676
sig_asc2        -0.4319     -0.7128      0.4604     -0.3900      0.5042      0.5696      1.0000      0.4100      0.3345
sig_natural     -0.4825     -0.4612      0.8242     -0.5153      0.5339      0.3766      0.4100      1.0000      0.4804
sig_walking     -0.1418     -0.2231      0.6577     -0.9886      0.4853      0.3676      0.3345      0.4804      1.0000
sig_rent         0.6047      0.4918     -0.6445      0.5208     -0.9770     -0.4544     -0.4579     -0.4964     -0.4823
               sig_rent
mu_asc1          0.6047
mu_asc2          0.4918
mu_natural      -0.6445
mu_walking       0.5208
mu_rent         -0.9770
sig_asc1        -0.4544
sig_asc2        -0.4579
sig_natural     -0.4964
sig_walking     -0.4823
sig_rent         1.0000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
   3702           0.2175187
   3534           0.2239346
   4698           0.2414545
 437000           0.2418942
 454400           0.2488285
  14678           0.2510980
   3057           0.2515486
  15217           0.2540885
  19448           0.2544499
    857           0.2557564
  10193           0.2558259
  17679           0.2591130
 288900           0.2596856
  16177           0.2597381
  19412           0.2625403
  18519           0.2650903
  18593           0.2651450
   4423           0.2668819
  18829           0.2746621
   4771           0.2759246

Changes in parameter estimates from starting values:
                Initial    Estimate  Difference
mu_asc1       -0.050000   -0.018669    0.031331
mu_asc2       -0.050000   -0.022651    0.027349
mu_natural     0.025000    0.022265   -0.002735
mu_walking  -4.0000e-04   -0.002459   -0.002059
mu_rent      -20.000000  -64.689970  -44.689970
sig_asc1       0.010000    0.030665    0.020665
sig_asc2       0.010000    0.024144    0.014144
sig_natural    0.020000    0.019430 -5.6984e-04
sig_walking    0.001000    0.001373  3.7267e-04
sig_rent       5.000000   43.988602   38.988602

Settings and functions used in model definition:

apollo_control
--------------
                       Value                             
modelName              "MXL_full_log_Hanover"            
modelDescr             "WTP_full_log_rent Hanover"       
indivID                "id"                              
mixing                 "TRUE"                            
HB                     "FALSE"                           
nCores                 "31"                              
outputDirectory        "Estimation_results/MXL_log_rent/"
debug                  "FALSE"                           
workInLogs             "FALSE"                           
seed                   "13"                              
noValidation           "FALSE"                           
noDiagnostics          "FALSE"                           
calculateLLC           "TRUE"                            
panelData              "TRUE"                            
analyticGrad           "TRUE"                            
analyticGrad_manualSet "FALSE"                           

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                   Value
mu_asc1      0.018831614
mu_asc2      0.022783479
mu_natural   0.022401943
mu_walking   0.002473973
mu_rent     64.025951239
sig_asc1     0.030897593
sig_asc2     0.024432043
sig_natural  0.019475571
sig_walking  0.001379386
sig_rent    42.662752114

Scaling used in computing Hessian
--------------
                   Value
mu_asc1      0.018668582
mu_asc2      0.022651075
mu_natural   0.022264687
mu_walking   0.002458813
mu_rent     64.689970205
sig_asc1     0.030665062
sig_asc2     0.024144479
sig_natural  0.019430157
sig_walking  0.001372675
sig_rent    43.988602284


apollo_randCoeff
----------------
function(apollo_beta, apollo_inputs){
    randcoeff = list()
    
    randcoeff[["b_mu_asc1"]] = mu_asc1 + sig_asc1 * draws_asc1
    randcoeff[["b_mu_asc2"]] = mu_asc2 + sig_asc2 * draws_asc2
    randcoeff[["b_mu_natural"]] = mu_natural + sig_natural * draws_natural
    randcoeff[["b_mu_walking"]] = mu_walking + sig_walking * draws_walking
    randcoeff[["b_mu_rent"]] = mu_rent + sig_rent * draws_rent
    
    return(randcoeff)
  }
<bytecode: 0x564bb70175b8>


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = -(b_mu_rent)* (b_mu_asc1 + b_mu_natural * Naturnähe_1 + b_mu_walking * Erreichbarkeit_1 - log(Miete_1))
    
    V[['alt2']] = -(b_mu_rent)* (b_mu_asc2 + b_mu_natural * Naturnähe_2 + b_mu_walking * Erreichbarkeit_2 - log(Miete_2))
    
    V[['alt3']] = -(b_mu_rent)* (b_mu_natural * Naturnähe_3 + b_mu_walking * Erreichbarkeit_3 - log(Miete_3))
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x564be829c7c0>
