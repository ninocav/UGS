Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Linux.
www.ApolloChoiceModelling.com

Model name                                  : MXL_full_Cologne
Model description                           : WTP_full_ Cologne
Model run at                                : 2023-04-06 07:55:25
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 540
Number of rows in database                  : 5384
Number of modelled outcomes                 : 5384

Number of cores used                        :  31 
Number of inter-individual draws            : 2000 (sobol)

LL(start)                                   : -4058.66
LL at equal shares, LL(0)                   : -5914.93
LL at observed shares, LL(C)                : -4980.83
LL(final)                                   : -3408.51
Rho-squared vs equal shares                  :  0.4237 
Adj.Rho-squared vs equal shares              :  0.4221 
Rho-squared vs observed shares               :  0.3157 
Adj.Rho-squared vs observed shares           :  0.3137 
AIC                                         :  6837.03 
BIC                                         :  6902.94 

Estimated parameters                        :  10
Time taken (hh:mm:ss)                       :  00:07:7.27 
     pre-estimation                         :  00:03:46.01 
     estimation                             :  00:01:14.24 
     post-estimation                        :  00:02:7.02 
Iterations                                  :  42  
Min abs eigenvalue of Hessian               :  0.07364 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
               Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1         -13.003     2.06500      -6.297      2.4547        -5.297
mu_asc2         -15.050     2.07935      -7.238      2.2532        -6.679
mu_natural       26.345     1.91675      13.745      2.5108        10.493
mu_walking       -3.177     0.24825     -12.799      0.3019       -10.525
mu_rent          -3.022     0.09006     -33.562      0.1081       -27.949
sig_asc1         19.221     2.79076       6.887      4.3304         4.439
sig_asc2         20.133     2.71575       7.413      3.8763         5.194
sig_natural      17.103     1.25819      13.594      1.5062        11.355
sig_walking      -2.004     0.16824     -11.914      0.1963       -10.212
sig_rent         -1.058     0.10048     -10.532      0.1449        -7.305


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  5384.00 5384.00 5384.00
Times chosen                      973.00 1064.00 3347.00
Percentage chosen overall          18.07   19.76   62.17
Percentage chosen when available   18.07   19.76   62.17


Classical covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         4.26423     1.94427    -2.15985    0.156780    0.083112    -1.22006    -1.33980    -1.19990    0.114378
mu_asc2         1.94427     4.32368    -1.79727    0.156877    0.083359    -1.37376    -2.48119    -1.11513    0.117471
mu_natural     -2.15985    -1.79727     3.67394   -0.322854   -0.094579     1.02718     2.30791     2.00137   -0.205720
mu_walking      0.15678     0.15688    -0.32285    0.061630    0.010846    -0.21047    -0.28350    -0.17339    0.039963
mu_rent         0.08311     0.08336    -0.09458    0.010846    0.008110    -0.06796    -0.08654    -0.06265    0.007002
sig_asc1       -1.22006    -1.37376     1.02718   -0.210466   -0.067961     7.78836     2.15349     0.64305   -0.138038
sig_asc2       -1.33980    -2.48119     2.30791   -0.283500   -0.086539     2.15349     7.37532     1.09038   -0.172556
sig_natural    -1.19990    -1.11513     2.00137   -0.173386   -0.062652     0.64305     1.09038     1.58305   -0.106121
sig_walking     0.11438     0.11747    -0.20572    0.039963    0.007002    -0.13804    -0.17256    -0.10612    0.028304
sig_rent       -0.02015    -0.03227     0.01067   -0.002776   -0.003646     0.09675     0.07958     0.01967   -0.001717
               sig_rent
mu_asc1       -0.020145
mu_asc2       -0.032273
mu_natural     0.010669
mu_walking    -0.002776
mu_rent       -0.003646
sig_asc1       0.096746
sig_asc2       0.079581
sig_natural    0.019674
sig_walking   -0.001717
sig_rent       0.010096

Robust covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         6.02558     3.38853    -4.43725     0.34347    0.140774     -0.6770     -4.4118    -2.41602    0.229105
mu_asc2         3.38853     5.07680    -2.69188     0.27081    0.122023     -3.5891     -4.2416    -1.80978    0.189018
mu_natural     -4.43725    -2.69188     6.30418    -0.56589   -0.189669      1.4254      5.6617     3.46853   -0.354429
mu_walking      0.34347     0.27081    -0.56589     0.09113    0.021662     -0.5300     -0.7184    -0.30682    0.058806
mu_rent         0.14077     0.12202    -0.18967     0.02166    0.011695     -0.1983     -0.2367    -0.11818    0.013658
sig_asc1       -0.67703    -3.58912     1.42538    -0.53000   -0.198283     18.7524      7.4202     1.37588   -0.346896
sig_asc2       -4.41176    -4.24161     5.66169    -0.71840   -0.236663      7.4202     15.0256     2.60811   -0.448956
sig_natural    -2.41602    -1.80978     3.46853    -0.30682   -0.118183      1.3759      2.6081     2.26859   -0.193204
sig_walking     0.22911     0.18902    -0.35443     0.05881    0.013658     -0.3469     -0.4490    -0.19320    0.038527
sig_rent       -0.01332    -0.08698     0.04773    -0.01350   -0.007453      0.3924      0.2642     0.05189   -0.008276
               sig_rent
mu_asc1       -0.013317
mu_asc2       -0.086982
mu_natural     0.047731
mu_walking    -0.013499
mu_rent       -0.007453
sig_asc1       0.392362
sig_asc2       0.264175
sig_natural    0.051886
sig_walking   -0.008276
sig_rent       0.020986

Classical correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         1.00000      0.4528    -0.54568      0.3058      0.4469     -0.2117     -0.2389     -0.4618      0.3292
mu_asc2         0.45280      1.0000    -0.45094      0.3039      0.4452     -0.2367     -0.4394     -0.4262      0.3358
mu_natural     -0.54568     -0.4509     1.00000     -0.6785     -0.5479      0.1920      0.4434      0.8299     -0.6380
mu_walking      0.30583      0.3039    -0.67849      1.0000      0.4851     -0.3038     -0.4205     -0.5551      0.9568
mu_rent         0.44693      0.4452    -0.54792      0.4851      1.0000     -0.2704     -0.3538     -0.5529      0.4622
sig_asc1       -0.21171     -0.2367     0.19203     -0.3038     -0.2704      1.0000      0.2841      0.1831     -0.2940
sig_asc2       -0.23891     -0.4394     0.44337     -0.4205     -0.3538      0.2841      1.0000      0.3191     -0.3777
sig_natural    -0.46183     -0.4262     0.82988     -0.5551     -0.5529      0.1831      0.3191      1.0000     -0.5013
sig_walking     0.32923      0.3358    -0.63796      0.9568      0.4622     -0.2940     -0.3777     -0.5013      1.0000
sig_rent       -0.09709     -0.1545     0.05540     -0.1113     -0.4029      0.3450      0.2916      0.1556     -0.1016
               sig_rent
mu_asc1        -0.09709
mu_asc2        -0.15447
mu_natural      0.05540
mu_walking     -0.11131
mu_rent        -0.40290
sig_asc1        0.34502
sig_asc2        0.29164
sig_natural     0.15562
sig_walking    -0.10158
sig_rent        1.00000

Robust correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         1.00000      0.6127     -0.7199      0.4635      0.5303    -0.06369     -0.4637     -0.6535      0.4755
mu_asc2         0.61266      1.0000     -0.4758      0.3981      0.5008    -0.36784     -0.4856     -0.5333      0.4274
mu_natural     -0.71995     -0.4758      1.0000     -0.7466     -0.6985     0.13110      0.5817      0.9172     -0.7192
mu_walking      0.46350      0.3981     -0.7466      1.0000      0.6636    -0.40542     -0.6139     -0.6748      0.9924
mu_rent         0.53031      0.5008     -0.6985      0.6636      1.0000    -0.42341     -0.5646     -0.7256      0.6434
sig_asc1       -0.06369     -0.3678      0.1311     -0.4054     -0.4234     1.00000      0.4421      0.2109     -0.4081
sig_asc2       -0.46366     -0.4856      0.5817     -0.6139     -0.5646     0.44205      1.0000      0.4467     -0.5901
sig_natural    -0.65347     -0.5333      0.9172     -0.6748     -0.7256     0.21095      0.4467      1.0000     -0.6535
sig_walking     0.47550      0.4274     -0.7192      0.9924      0.6434    -0.40812     -0.5901     -0.6535      1.0000
sig_rent       -0.03745     -0.2665      0.1312     -0.3087     -0.4757     0.62545      0.4704      0.2378     -0.2911
               sig_rent
mu_asc1        -0.03745
mu_asc2        -0.26648
mu_natural      0.13123
mu_walking     -0.30867
mu_rent        -0.47572
sig_asc1        0.62545
sig_asc2        0.47045
sig_natural     0.23780
sig_walking    -0.29107
sig_rent        1.00000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
  14555           0.2039935
  16314           0.2041915
   3100           0.2080264
 165100           0.2248310
 370500           0.2251370
  16501           0.2259480
 352000           0.2266452
 354300           0.2268518
  20183           0.2283769
 247400           0.2359374
  10112           0.2401084
  17676           0.2409491
 162100           0.2421839
 259900           0.2447342
  11309           0.2472306
  12309           0.2494622
 267900           0.2510510
     81           0.2563731
  11312           0.2585684
 170000           0.2589024

Changes in parameter estimates from starting values:
                Initial    Estimate  Difference
mu_asc1         -10.000     -13.003     -3.0032
mu_asc2         -10.000     -15.050     -5.0496
mu_natural       10.000      26.345     16.3454
mu_walking       -3.000      -3.177     -0.1774
mu_rent           0.000      -3.022     -3.0224
sig_asc1          5.000      19.221     14.2206
sig_asc2          5.000      20.133     15.1329
sig_natural      10.000      17.103      7.1035
sig_walking       5.000      -2.004     -7.0044
sig_rent          2.000      -1.058     -3.0583

Settings and functions used in model definition:

apollo_control
--------------
                       Value                
modelName              "MXL_full_Cologne"   
modelDescr             "WTP_full_ Cologne"  
indivID                "id"                 
mixing                 "TRUE"               
HB                     "FALSE"              
nCores                 "31"                 
outputDirectory        "Estimation_results/"
debug                  "FALSE"              
workInLogs             "FALSE"              
seed                   "13"                 
noValidation           "FALSE"              
noDiagnostics          "FALSE"              
calculateLLC           "TRUE"               
panelData              "TRUE"               
analyticGrad           "TRUE"               
analyticGrad_manualSet "FALSE"              

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                Value
mu_asc1     13.003304
mu_asc2     15.049714
mu_natural  26.345194
mu_walking   3.177404
mu_rent      3.022457
sig_asc1    19.220241
sig_asc2    20.132947
sig_natural 17.103405
sig_walking  2.004353
sig_rent     1.058259

Scaling used in computing Hessian
--------------
                Value
mu_asc1     13.003190
mu_asc2     15.049643
mu_natural  26.345375
mu_walking   3.177365
mu_rent      3.022443
sig_asc1    19.220617
sig_asc2    20.132894
sig_natural 17.103471
sig_walking  2.004370
sig_rent     1.058261


apollo_randCoeff
----------------
function(apollo_beta, apollo_inputs){
    randcoeff = list()
    
    randcoeff[["b_mu_asc1"]] = mu_asc1 + sig_asc1 * draws_asc1
    randcoeff[["b_mu_asc2"]] = mu_asc2 + sig_asc2 * draws_asc2
    randcoeff[["b_mu_natural"]] = mu_natural + sig_natural * draws_natural
    randcoeff[["b_mu_walking"]] = mu_walking + sig_walking * draws_walking
    randcoeff[["b_mu_rent"]] = -exp(mu_rent + sig_rent * draws_rent)
    
    return(randcoeff)
  }
<bytecode: 0x5582857ada18>


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = -(b_mu_rent)* (b_mu_asc1 + b_mu_natural * Naturnähe_1 + b_mu_walking * Erreichbarkeit_1 - Miete_1)
    
    V[['alt2']] = -(b_mu_rent)* (b_mu_asc2 + b_mu_natural * Naturnähe_2 + b_mu_walking * Erreichbarkeit_2 - Miete_2)
    
    V[['alt3']] = -(b_mu_rent)* (b_mu_natural * Naturnähe_3 + b_mu_walking * Erreichbarkeit_3 - Miete_3)
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x5581acd53568>
