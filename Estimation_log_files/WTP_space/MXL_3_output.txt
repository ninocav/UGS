Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Linux.
www.ApolloChoiceModelling.com

Model name                                  : MXL_3
Model description                           : WTP 3
Model run at                                : 2023-04-05 20:06:23
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 1751
Number of rows in database                  : 17510
Number of modelled outcomes                 : 17510

Number of cores used                        :  31 
Number of inter-individual draws            : 2000 (sobol)

LL(start)                                   : -12562.25
LL at equal shares, LL(0)                   : -19236.7
LL at observed shares, LL(C)                : -15649.34
LL(final)                                   : -10672.28
Rho-squared vs equal shares                  :  0.4452 
Adj.Rho-squared vs equal shares              :  0.4447 
Rho-squared vs observed shares               :  0.318 
Adj.Rho-squared vs observed shares           :  0.3174 
AIC                                         :  21364.56 
BIC                                         :  21442.27 

Estimated parameters                        :  10
Time taken (hh:mm:ss)                       :  00:21:6.09 
     pre-estimation                         :  00:08:37.9 
     estimation                             :  00:05:27.84 
     post-estimation                        :  00:07:0.35 
Iterations                                  :  51  
Min abs eigenvalue of Hessian               :  0.173444 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
               Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1         -17.672     1.29708      -13.62     1.68566        -10.48
mu_asc2         -19.103     1.36706      -13.97     1.67823        -11.38
mu_natural       25.076     1.20568       20.80     1.89859         13.21
mu_walking       -2.675     0.13513      -19.80     0.20097        -13.31
mu_rent          -2.906     0.05632      -51.60     0.07467        -38.91
sig_asc1         19.730     1.37612       14.34     1.77624         11.11
sig_asc2         25.893     1.10976       23.33     1.55354         16.67
sig_natural      20.185     1.05250       19.18     1.66334         12.14
sig_walking       1.656     0.08705       19.02     0.12547         13.19
sig_rent          1.193     0.05742       20.77     0.06963         17.13


Overview of choices for MNL model component :
                                     alt1     alt2     alt3
Times available                  17510.00 17510.00 17510.00
Times chosen                      2884.00  3305.00 11321.00
Percentage chosen overall           16.47    18.87    64.65
Percentage chosen when available    16.47    18.87    64.65


Classical covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         1.68241     0.92718   -0.925391    0.066974    0.037312   -1.124806   -0.537985   -0.772986   -0.040808
mu_asc2         0.92718     1.86884   -0.892696    0.059508    0.036816   -0.725820   -0.948835   -0.685086   -0.039918
mu_natural     -0.92539    -0.89270    1.453660   -0.119721   -0.039111    1.000765    0.692106    1.117485    0.073949
mu_walking      0.06697     0.05951   -0.119721    0.018259    0.003805   -0.102563   -0.067857   -0.101582   -0.011105
mu_rent         0.03731     0.03682   -0.039111    0.003805    0.003172   -0.030079   -0.022882   -0.029669   -0.002467
sig_asc1       -1.12481    -0.72582    1.000765   -0.102563   -0.030079    1.893697    0.770029    0.781037    0.056492
sig_asc2       -0.53799    -0.94883    0.692106   -0.067857   -0.022882    0.770029    1.231569    0.529082    0.039157
sig_natural    -0.77299    -0.68509    1.117485   -0.101582   -0.029669    0.781037    0.529082    1.107758    0.062145
sig_walking    -0.04081    -0.03992    0.073949   -0.011105   -0.002467    0.056492    0.039157    0.062145    0.007578
sig_rent        0.01068     0.01048   -0.006473  7.0825e-04    0.001429   -0.004614   -0.005693   -0.001473 -6.5028e-04
               sig_rent
mu_asc1        0.010677
mu_asc2        0.010477
mu_natural    -0.006473
mu_walking   7.0825e-04
mu_rent        0.001429
sig_asc1      -0.004614
sig_asc2      -0.005693
sig_natural   -0.001473
sig_walking -6.5028e-04
sig_rent       0.003297

Robust covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         2.84144     2.32138    -2.45900    0.206774    0.083757    -2.35548    -1.57450   -2.151140   -0.124895
mu_asc2         2.32138     2.81645    -2.27623    0.181613    0.077957    -2.07219    -1.91129   -1.895616   -0.111635
mu_natural     -2.45900    -2.27623     3.60464   -0.336619   -0.112553     2.77573     1.89427    3.036809    0.207290
mu_walking      0.20677     0.18161    -0.33662    0.040387    0.011315    -0.27273    -0.17892   -0.288153   -0.024865
mu_rent         0.08376     0.07796    -0.11255    0.011315    0.005576    -0.08529    -0.05922   -0.090325   -0.007091
sig_asc1       -2.35548    -2.07219     2.77573   -0.272732   -0.085289     3.15504     2.08901    2.400635    0.161465
sig_asc2       -1.57450    -1.91129     1.89427   -0.178920   -0.059219     2.08901     2.41347    1.581516    0.106088
sig_natural    -2.15114    -1.89562     3.03681   -0.288153   -0.090325     2.40064     1.58152    2.766703    0.175573
sig_walking    -0.12489    -0.11164     0.20729   -0.024865   -0.007091     0.16147     0.10609    0.175573    0.015742
sig_rent        0.01486     0.01902    -0.02457    0.003179    0.002380    -0.01042    -0.01079   -0.009917   -0.002273
               sig_rent
mu_asc1        0.014857
mu_asc2        0.019023
mu_natural    -0.024567
mu_walking     0.003179
mu_rent        0.002380
sig_asc1      -0.010416
sig_asc2      -0.010790
sig_natural   -0.009917
sig_walking   -0.002273
sig_rent       0.004848

Classical correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1          1.0000      0.5229    -0.59174     0.38212      0.5108    -0.63017    -0.37375    -0.56622     -0.3614
mu_asc2          0.5229      1.0000    -0.54161     0.32214      0.4782    -0.38582    -0.62542    -0.47614     -0.3354
mu_natural      -0.5917     -0.5416     1.00000    -0.73485     -0.5760     0.60318     0.51726     0.88062      0.7046
mu_walking       0.3821      0.3221    -0.73485     1.00000      0.5000    -0.55156    -0.45251    -0.71425     -0.9440
mu_rent          0.5108      0.4782    -0.57598     0.50001      1.0000    -0.38810    -0.36610    -0.50052     -0.5031
sig_asc1        -0.6302     -0.3858     0.60318    -0.55156     -0.3881     1.00000     0.50422     0.53926      0.4716
sig_asc2        -0.3737     -0.6254     0.51726    -0.45251     -0.3661     0.50422     1.00000     0.45297      0.4053
sig_natural     -0.5662     -0.4761     0.88062    -0.71425     -0.5005     0.53926     0.45297     1.00000      0.6783
sig_walking     -0.3614     -0.3354     0.70457    -0.94403     -0.5031     0.47158     0.40533     0.67828      1.0000
sig_rent         0.1434      0.1335    -0.09350     0.09129      0.4418    -0.05840    -0.08935    -0.02438     -0.1301
               sig_rent
mu_asc1         0.14337
mu_asc2         0.13348
mu_natural     -0.09350
mu_walking      0.09129
mu_rent         0.44182
sig_asc1       -0.05840
sig_asc2       -0.08935
sig_natural    -0.02438
sig_walking    -0.13010
sig_rent        1.00000

Robust correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1          1.0000      0.8206     -0.7683      0.6104      0.6654    -0.78670    -0.60125    -0.76722     -0.5905
mu_asc2          0.8206      1.0000     -0.7144      0.5385      0.6221    -0.69515    -0.73309    -0.67908     -0.5302
mu_natural      -0.7683     -0.7144      1.0000     -0.8822     -0.7939     0.82308     0.64223     0.96162      0.8702
mu_walking       0.6104      0.5385     -0.8822      1.0000      0.7540    -0.76403    -0.57308    -0.86203     -0.9861
mu_rent          0.6654      0.6221     -0.7939      0.7540      1.0000    -0.64301    -0.51047    -0.72721     -0.7568
sig_asc1        -0.7867     -0.6951      0.8231     -0.7640     -0.6430     1.00000     0.75704     0.81254      0.7245
sig_asc2        -0.6012     -0.7331      0.6422     -0.5731     -0.5105     0.75704     1.00000     0.61203      0.5443
sig_natural     -0.7672     -0.6791      0.9616     -0.8620     -0.7272     0.81254     0.61203     1.00000      0.8413
sig_walking     -0.5905     -0.5302      0.8702     -0.9861     -0.7568     0.72451     0.54427     0.84129      1.0000
sig_rent         0.1266      0.1628     -0.1858      0.2272      0.4577    -0.08422    -0.09975    -0.08563     -0.2602
               sig_rent
mu_asc1         0.12658
mu_asc2         0.16280
mu_natural     -0.18584
mu_walking      0.22718
mu_rent         0.45775
sig_asc1       -0.08422
sig_asc2       -0.09975
sig_natural    -0.08563
sig_walking    -0.26020
sig_rent        1.00000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
 204500           0.2035503
 355900           0.2080907
 230500           0.2176549
 323700           0.2181564
 180200           0.2187522
 354000           0.2187643
 437000           0.2193871
 166900           0.2194309
 468900           0.2247455
 196700           0.2248027
 422700           0.2255336
 223400           0.2268742
 166600           0.2277541
 165100           0.2280890
 218200           0.2283544
 184400           0.2285414
 179900           0.2293599
 354300           0.2326519
 370500           0.2326943
 579100           0.2337580

Changes in parameter estimates from starting values:
                Initial    Estimate  Difference
mu_asc1         -10.000     -17.672     -7.6723
mu_asc2         -10.000     -19.103     -9.1031
mu_natural       10.000      25.076     15.0756
mu_walking       -3.000      -2.675      0.3245
mu_rent           0.000      -2.906     -2.9059
sig_asc1          5.000      19.730     14.7299
sig_asc2          5.000      25.893     20.8926
sig_natural      10.000      20.185     10.1850
sig_walking       5.000       1.656     -3.3445
sig_rent          2.000       1.193     -0.8073

Settings and functions used in model definition:

apollo_control
--------------
                       Value                
modelName              "MXL_3"              
modelDescr             "WTP 3"              
indivID                "id"                 
mixing                 "TRUE"               
HB                     "FALSE"              
nCores                 "31"                 
outputDirectory        "Estimation_results/"
debug                  "FALSE"              
workInLogs             "FALSE"              
seed                   "13"                 
noValidation           "FALSE"              
noDiagnostics          "FALSE"              
calculateLLC           "TRUE"               
panelData              "TRUE"               
analyticGrad           "TRUE"               
analyticGrad_manualSet "FALSE"              

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                Value
mu_asc1     17.672519
mu_asc2     19.102750
mu_natural  25.075364
mu_walking   2.675512
mu_rent      2.905917
sig_asc1    19.729733
sig_asc2    25.892761
sig_natural 20.185370
sig_walking  1.655506
sig_rent     1.192749

Scaling used in computing Hessian
--------------
                Value
mu_asc1     17.672297
mu_asc2     19.103131
mu_natural  25.075596
mu_walking   2.675470
mu_rent      2.905915
sig_asc1    19.729860
sig_asc2    25.892627
sig_natural 20.184961
sig_walking  1.655502
sig_rent     1.192740


apollo_randCoeff
----------------
function(apollo_beta, apollo_inputs){
  randcoeff = list()
  
  randcoeff[["b_mu_asc1"]] = mu_asc1 + sig_asc1 * draws_asc1
  randcoeff[["b_mu_asc2"]] = mu_asc2 + sig_asc2 * draws_asc2
  randcoeff[["b_mu_natural"]] = mu_natural + sig_natural * draws_natural
  randcoeff[["b_mu_walking"]] = mu_walking + sig_walking * draws_walking
  randcoeff[["b_mu_rent"]] = -exp(mu_rent + sig_rent * draws_rent)
  
  return(randcoeff)
}
<bytecode: 0x5581640d9728>


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
  
  ### Function initialisation: do not change the following three commands
  ### Attach inputs and detach after function exit
  apollo_attach(apollo_beta, apollo_inputs)
  on.exit(apollo_detach(apollo_beta, apollo_inputs))
  
  ### Create list of probabilities P
  P = list()
  
  ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
  V = list()
  V[['alt1']] = -(b_mu_rent)* (b_mu_asc1 + b_mu_natural * Naturnähe_1 + b_mu_walking * Erreichbarkeit_1 - Miete_1)
  
  V[['alt2']] = -(b_mu_rent)* (b_mu_asc2 + b_mu_natural * Naturnähe_2 + b_mu_walking * Erreichbarkeit_2 - Miete_2)
  
  V[['alt3']] = -(b_mu_rent)* (b_mu_natural * Naturnähe_3 + b_mu_walking * Erreichbarkeit_3 - Miete_3)
  
  
  ### Define settings for MNL model component
  mnl_settings = list(
    alternatives  = c(alt1=1, alt2=2, alt3=3),
    avail         = 1, # all alternatives are available in every choice
    choiceVar     = choice,
    V             = V#,  # tell function to use list vector defined above
    
  )
  
  ### Compute probabilities using MNL model
  P[['model']] = apollo_mnl(mnl_settings, functionality)
  
  ### Take product across observation for same individual
  P = apollo_panelProd(P, apollo_inputs, functionality)
  
  ### Average across inter-individual draws - nur bei Mixed Logit!
  P = apollo_avgInterDraws(P, apollo_inputs, functionality)
  
  ### Prepare and return outputs of function
  P = apollo_prepareProb(P, apollo_inputs, functionality)
  return(P)
}
<bytecode: 0x558286dbfab8>
