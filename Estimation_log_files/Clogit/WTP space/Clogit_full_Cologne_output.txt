Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Windows.
www.ApolloChoiceModelling.com

Model name                                  : Clogit_full_Cologne
Model description                           : ClogitWTP_full_ Cologne
Model run at                                : 2023-04-19 14:02:28
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 540
Number of rows in database                  : 5384
Number of modelled outcomes                 : 5384

Number of cores used                        :  1 
Model without mixing

LL(start)                                   : -4532.88
LL at equal shares, LL(0)                   : -5914.93
LL at observed shares, LL(C)                : -4980.83
LL(final)                                   : -4023.38
Rho-squared vs equal shares                  :  0.3198 
Adj.Rho-squared vs equal shares              :  0.3189 
Rho-squared vs observed shares               :  0.1922 
Adj.Rho-squared vs observed shares           :  0.1912 
AIC                                         :  8056.77 
BIC                                         :  8089.72 

Estimated parameters                        :  5
Time taken (hh:mm:ss)                       :  00:00:8.07 
     pre-estimation                         :  00:00:5.89 
     estimation                             :  00:00:1.48 
     post-estimation                        :  00:00:0.7 
Iterations                                  :  26  
Min abs eigenvalue of Hessian               :  0.038827 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
              Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1      -34.93882    3.594839      -9.719    5.396562        -6.474
mu_asc2      -33.00860    3.525690      -9.362    4.906410        -6.728
mu_natural    24.32061    1.955751      12.435    2.987828         8.140
mu_walking    -1.55616    0.140775     -11.054    0.277716        -5.603
mu_rent       -0.02222    0.001523     -14.589    0.002223        -9.995


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  5384.00 5384.00 5384.00
Times chosen                      973.00 1064.00 3347.00
Percentage chosen overall          18.07   19.76   62.17
Percentage chosen when available   18.07   19.76   62.17


Classical covariance matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1      12.922869   10.259434   -5.571676     0.24942   -0.004582
mu_asc2      10.259434   12.430489   -5.529799     0.23607   -0.004447
mu_natural   -5.571676   -5.529799    3.824963    -0.19990    0.002707
mu_walking    0.249421    0.236073   -0.199897     0.01982 -1.5777e-04
mu_rent      -0.004582   -0.004447    0.002707 -1.5777e-04   2.319e-06

Robust covariance matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1      29.122878   23.116509  -11.092539     0.30501   -0.009859
mu_asc2      23.116509   24.072861  -10.259836     0.24841   -0.008301
mu_natural  -11.092539  -10.259836    8.927118    -0.49946    0.005737
mu_walking    0.305009    0.248408   -0.499464     0.07713 -3.0531e-04
mu_rent      -0.009859   -0.008301    0.005737 -3.0531e-04   4.941e-06

Classical correlation matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1         1.0000      0.8095     -0.7925      0.4929     -0.8370
mu_asc2         0.8095      1.0000     -0.8020      0.4756     -0.8282
mu_natural     -0.7925     -0.8020      1.0000     -0.7261      0.9090
mu_walking      0.4929      0.4756     -0.7261      1.0000     -0.7360
mu_rent        -0.8370     -0.8282      0.9090     -0.7360      1.0000

Robust correlation matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1         1.0000      0.8731     -0.6880      0.2035     -0.8219
mu_asc2         0.8731      1.0000     -0.6999      0.1823     -0.7612
mu_natural     -0.6880     -0.6999      1.0000     -0.6019      0.8639
mu_walking      0.2035      0.1823     -0.6019      1.0000     -0.4946
mu_rent        -0.8219     -0.7612      0.8639     -0.4946      1.0000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
 354300          0.03286776
   3100          0.05768469
  16314          0.06073147
  14555          0.09583664
 267900          0.09601720
 165100          0.10012457
  16501          0.10849173
 370500          0.11085658
  12309          0.12486891
     81          0.13037952
 247400          0.13217649
 259900          0.13671863
  15411          0.14358959
  20183          0.15556349
 352000          0.16156661
   4015          0.16831160
 162100          0.17522642
  10112          0.18410591
  17105          0.19642786
  16719          0.20460121

Changes in parameter estimates from starting values:
               Initial    Estimate  Difference
mu_asc1      -10.00000   -34.93882   -24.93882
mu_asc2      -10.00000   -33.00860   -23.00860
mu_natural    10.00000    24.32061    14.32061
mu_walking    -2.00000    -1.55616     0.44384
mu_rent       -0.05000    -0.02222     0.02778

Settings and functions used in model definition:

apollo_control
--------------
                       Value                        
modelName              "Clogit_full_Cologne"        
modelDescr             "ClogitWTP_full_ Cologne"    
indivID                "id"                         
mixing                 "FALSE"                      
HB                     "FALSE"                      
nCores                 "1"                          
outputDirectory        "Estimation_results/c_logit/"
debug                  "FALSE"                      
workInLogs             "FALSE"                      
seed                   "13"                         
noValidation           "FALSE"                      
noDiagnostics          "FALSE"                      
calculateLLC           "TRUE"                       
panelData              "TRUE"                       
analyticGrad           "TRUE"                       
analyticGrad_manualSet "FALSE"                      

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                 Value
mu_asc1    34.93834984
mu_asc2    33.00907316
mu_natural 24.32096332
mu_walking  1.55617518
mu_rent     0.02221654

Scaling used in computing Hessian
--------------
                 Value
mu_asc1    34.93882118
mu_asc2    33.00859723
mu_natural 24.32061365
mu_walking  1.55615828
mu_rent     0.02221646


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = -(mu_rent)* (mu_asc1 + mu_natural * Naturnähe_1 + mu_walking * Erreichbarkeit_1 - Miete_1)
    
    V[['alt2']] = -(mu_rent)* (mu_asc2 + mu_natural * Naturnähe_2 + mu_walking * Erreichbarkeit_2 - Miete_2)
    
    V[['alt3']] = -(mu_rent)* (mu_natural * Naturnähe_3 + mu_walking * Erreichbarkeit_3 - Miete_3)
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    #P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x000001d9f0d8d2c0>
