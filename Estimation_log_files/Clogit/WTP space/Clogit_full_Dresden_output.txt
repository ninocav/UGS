Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Windows.
www.ApolloChoiceModelling.com

Model name                                  : Clogit_full_Dresden
Model description                           : ClogitWTP_full_ Dresden
Model run at                                : 2023-04-19 14:02:55
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 264
Number of rows in database                  : 2635
Number of modelled outcomes                 : 2635

Number of cores used                        :  1 
Model without mixing

LL(start)                                   : -2082.47
LL at equal shares, LL(0)                   : -2894.84
LL at observed shares, LL(C)                : -2283.82
LL(final)                                   : -1898.03
Rho-squared vs equal shares                  :  0.3443 
Adj.Rho-squared vs equal shares              :  0.3426 
Rho-squared vs observed shares               :  0.1689 
Adj.Rho-squared vs observed shares           :  0.1667 
AIC                                         :  3806.06 
BIC                                         :  3835.44 

Estimated parameters                        :  5
Time taken (hh:mm:ss)                       :  00:00:7.58 
     pre-estimation                         :  00:00:5.83 
     estimation                             :  00:00:1.09 
     post-estimation                        :  00:00:0.66 
Iterations                                  :  28  
Min abs eigenvalue of Hessian               :  0.009447 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
              Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1      -41.26097    6.987099      -5.905   11.043106        -3.736
mu_asc2      -42.86861    7.160763      -5.987   10.354202        -4.140
mu_natural    24.87226    3.684509       6.750    5.870455         4.237
mu_walking    -1.64650    0.256141      -6.428    0.394492        -4.174
mu_rent       -0.02187    0.002852      -7.671    0.004513        -4.847


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  2635.00 2635.00 2635.00
Times chosen                      426.00  451.00 1758.00
Percentage chosen overall          16.17   17.12   66.72
Percentage chosen when available   16.17   17.12   66.72


Classical covariance matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1       48.81955    44.45826  -22.316323     1.20921   -0.018177
mu_asc2       44.45826    51.27653  -23.314639     1.25653   -0.018717
mu_natural   -22.31632   -23.31464   13.575607    -0.76819    0.009851
mu_walking     1.20921     1.25653   -0.768191     0.06561 -6.0160e-04
mu_rent       -0.01818    -0.01872    0.009851 -6.0160e-04   8.132e-06

Robust covariance matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1      121.95018   107.53789   -54.88967    2.741281   -0.045140
mu_asc2      107.53789   107.20949   -52.30938    2.644759   -0.041663
mu_natural   -54.88967   -52.30938    34.46224   -1.859697    0.024514
mu_walking     2.74128     2.64476    -1.85970    0.155624   -0.001443
mu_rent       -0.04514    -0.04166     0.02451   -0.001443   2.037e-05

Classical correlation matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1         1.0000      0.8886     -0.8669      0.6757     -0.9123
mu_asc2         0.8886      1.0000     -0.8837      0.6851     -0.9166
mu_natural     -0.8669     -0.8837      1.0000     -0.8140      0.9376
mu_walking      0.6757      0.6851     -0.8140      1.0000     -0.8236
mu_rent        -0.9123     -0.9166      0.9376     -0.8236      1.0000

Robust correlation matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1         1.0000      0.9405     -0.8467      0.6293     -0.9057
mu_asc2         0.9405      1.0000     -0.8606      0.6475     -0.8915
mu_natural     -0.8467     -0.8606      1.0000     -0.8030      0.9252
mu_walking      0.6293      0.6475     -0.8030      1.0000     -0.8105
mu_rent        -0.9057     -0.8915      0.9252     -0.8105      1.0000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
  10370          0.07010389
   6577          0.10888728
   6401          0.11575728
 189300          0.12571896
  15322          0.14419171
  15843          0.16087088
  18116          0.17968383
  13647          0.18002428
  10766          0.19148425
  15554          0.19601261
   6549          0.19999504
 226900          0.20323195
 211000          0.20416432
  16939          0.21751406
  12712          0.21857019
 159100          0.22798159
 277900          0.23048107
  10719          0.23215298
 293200          0.23378678
  11980          0.23759962

Changes in parameter estimates from starting values:
               Initial    Estimate  Difference
mu_asc1      -10.00000   -41.26097   -31.26097
mu_asc2      -10.00000   -42.86861   -32.86861
mu_natural    10.00000    24.87226    14.87226
mu_walking    -2.00000    -1.64650     0.35350
mu_rent       -0.05000    -0.02187     0.02813

Settings and functions used in model definition:

apollo_control
--------------
                       Value                        
modelName              "Clogit_full_Dresden"        
modelDescr             "ClogitWTP_full_ Dresden"    
indivID                "id"                         
mixing                 "FALSE"                      
HB                     "FALSE"                      
nCores                 "1"                          
outputDirectory        "Estimation_results/c_logit/"
debug                  "FALSE"                      
workInLogs             "FALSE"                      
seed                   "13"                         
noValidation           "FALSE"                      
noDiagnostics          "FALSE"                      
calculateLLC           "TRUE"                       
panelData              "TRUE"                       
analyticGrad           "TRUE"                       
analyticGrad_manualSet "FALSE"                      

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                 Value
mu_asc1    41.27814837
mu_asc2    42.85254748
mu_natural 24.87222456
mu_walking  1.64647565
mu_rent     0.02187434

Scaling used in computing Hessian
--------------
                 Value
mu_asc1    41.26097307
mu_asc2    42.86860572
mu_natural 24.87226396
mu_walking  1.64650454
mu_rent     0.02187473


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = -(mu_rent)* (mu_asc1 + mu_natural * Naturnähe_1 + mu_walking * Erreichbarkeit_1 - Miete_1)
    
    V[['alt2']] = -(mu_rent)* (mu_asc2 + mu_natural * Naturnähe_2 + mu_walking * Erreichbarkeit_2 - Miete_2)
    
    V[['alt3']] = -(mu_rent)* (mu_natural * Naturnähe_3 + mu_walking * Erreichbarkeit_3 - Miete_3)
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    #P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x000001d9f0d8d2c0>
