Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Windows.
www.ApolloChoiceModelling.com

Model name                                  : Clogit_ps_Dresden
Model description                           : ClogitWTP_ps_ Dresden
Model run at                                : 2023-04-19 14:33:18
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 264
Number of rows in database                  : 2635
Number of modelled outcomes                 : 2635

Number of cores used                        :  1 
Model without mixing

LL(start)                                   : -2372.76
LL at equal shares, LL(0)                   : -2894.84
LL at observed shares, LL(C)                : -2283.82
LL(final)                                   : -1898.03
Rho-squared vs equal shares                  :  0.3443 
Adj.Rho-squared vs equal shares              :  0.3426 
Rho-squared vs observed shares               :  0.1689 
Adj.Rho-squared vs observed shares           :  0.1667 
AIC                                         :  3806.06 
BIC                                         :  3835.44 

Estimated parameters                        :  5
Time taken (hh:mm:ss)                       :  00:00:6.87 
     pre-estimation                         :  00:00:5.63 
     estimation                             :  00:00:0.72 
     post-estimation                        :  00:00:0.52 
Iterations                                  :  15  
Min abs eigenvalue of Hessian               :  162.7866 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
              Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1       -0.90242    0.066264     -13.619    0.107436        -8.400
mu_asc2       -0.93778    0.066154     -14.176    0.102938        -9.110
mu_natural     0.54405    0.028414      19.147    0.049154        11.068
mu_walking    -0.03602    0.003179     -11.331    0.005074        -7.099
mu_rent       -0.02188    0.002851      -7.674    0.004511        -4.850


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  2635.00 2635.00 2635.00
Times chosen                      426.00  451.00 1758.00
Percentage chosen overall          16.17   17.12   66.72
Percentage chosen when available   16.17   17.12   66.72


Classical covariance matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1       0.004391    0.001717 -2.4272e-04  -6.660e-05  -6.201e-05
mu_asc2       0.001717    0.004376 -4.0543e-04  -6.304e-05  -6.083e-05
mu_natural -2.4272e-04 -4.0543e-04  8.0736e-04  -1.850e-05   1.321e-05
mu_walking  -6.660e-05  -6.304e-05  -1.850e-05   1.010e-05   2.287e-07
mu_rent     -6.201e-05  -6.083e-05   1.321e-05   2.287e-07   8.128e-06

Robust covariance matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1       0.011542    0.007552 -4.8261e-04 -2.3269e-04 -1.4660e-04
mu_asc2       0.007552    0.010596   -0.001093 -1.5049e-04  -3.810e-05
mu_natural -4.8261e-04   -0.001093    0.002416  -5.601e-05   2.953e-05
mu_walking -2.3269e-04 -1.5049e-04  -5.601e-05   2.574e-05   1.966e-06
mu_rent    -1.4660e-04  -3.810e-05   2.953e-05   1.966e-06   2.035e-05

Classical correlation matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1         1.0000      0.3918     -0.1289    -0.31620    -0.32826
mu_asc2         0.3918      1.0000     -0.2157    -0.29980    -0.32251
mu_natural     -0.1289     -0.2157      1.0000    -0.20477     0.16308
mu_walking     -0.3162     -0.2998     -0.2048     1.00000     0.02523
mu_rent        -0.3283     -0.3225      0.1631     0.02523     1.00000

Robust correlation matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1        1.00000     0.68286    -0.09139    -0.42688    -0.30250
mu_asc2        0.68286     1.00000    -0.21601    -0.28814    -0.08205
mu_natural    -0.09139    -0.21601     1.00000    -0.22459     0.13317
mu_walking    -0.42688    -0.28814    -0.22459     1.00000     0.08592
mu_rent       -0.30250    -0.08205     0.13317     0.08592     1.00000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
  10370          0.07010387
   6577          0.10888396
   6401          0.11577476
 189300          0.12569721
  15322          0.14417346
  15843          0.16087340
  18116          0.17968028
  13647          0.18001718
  10766          0.19149738
  15554          0.19600686
   6549          0.19998745
 226900          0.20322705
 211000          0.20416814
  16939          0.21750759
  12712          0.21857870
 159100          0.22796935
 277900          0.23048727
  10719          0.23214887
 293200          0.23378092
  11980          0.23758969

Changes in parameter estimates from starting values:
               Initial    Estimate  Difference
mu_asc1       -1.00000    -0.90242     0.09758
mu_asc2       -1.00000    -0.93778     0.06222
mu_natural     1.00000     0.54405    -0.45595
mu_walking    -0.01000    -0.03602    -0.02602
mu_rent       -0.10000    -0.02188     0.07812

Settings and functions used in model definition:

apollo_control
--------------
                       Value                                  
modelName              "Clogit_ps_Dresden"                    
modelDescr             "ClogitWTP_ps_ Dresden"                
indivID                "id"                                   
mixing                 "FALSE"                                
HB                     "FALSE"                                
nCores                 "1"                                    
outputDirectory        "Estimation_results/c_logit/prefspace/"
debug                  "FALSE"                                
workInLogs             "FALSE"                                
seed                   "13"                                   
noValidation           "FALSE"                                
noDiagnostics          "FALSE"                                
calculateLLC           "TRUE"                                 
panelData              "TRUE"                                 
analyticGrad           "TRUE"                                 
analyticGrad_manualSet "FALSE"                                

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                Value
mu_asc1    0.90241940
mu_asc2    0.93777377
mu_natural 0.54405167
mu_walking 0.03601842
mu_rent    0.02187871

Scaling used in computing Hessian
--------------
                Value
mu_asc1    0.90242043
mu_asc2    0.93777846
mu_natural 0.54404639
mu_walking 0.03601860
mu_rent    0.02187869


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = mu_asc1 + mu_natural * Naturnähe_1 + mu_walking * Erreichbarkeit_1 + mu_rent* Miete_1
    
    V[['alt2']] = mu_asc2 + mu_natural * Naturnähe_2 + mu_walking * Erreichbarkeit_2 + mu_rent* Miete_2
    
    V[['alt3']] = mu_natural * Naturnähe_3 + mu_walking * Erreichbarkeit_3 + mu_rent * Miete_3
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    #P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x000001dadfb97e10>
