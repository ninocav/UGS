Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Windows.
www.ApolloChoiceModelling.com

Model name                                  : Clogit_ps_Dortmund
Model description                           : ClogitWTP_ps_ Dortmund
Model run at                                : 2023-04-19 14:33:05
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 295
Number of rows in database                  : 2937
Number of modelled outcomes                 : 2937

Number of cores used                        :  1 
Model without mixing

LL(start)                                   : -2794.68
LL at equal shares, LL(0)                   : -3226.62
LL at observed shares, LL(C)                : -2646.1
LL(final)                                   : -2261.7
Rho-squared vs equal shares                  :  0.2991 
Adj.Rho-squared vs equal shares              :  0.2975 
Rho-squared vs observed shares               :  0.1453 
Adj.Rho-squared vs observed shares           :  0.1434 
AIC                                         :  4533.39 
BIC                                         :  4563.32 

Estimated parameters                        :  5
Time taken (hh:mm:ss)                       :  00:00:7.18 
     pre-estimation                         :  00:00:5.64 
     estimation                             :  00:00:0.88 
     post-estimation                        :  00:00:0.66 
Iterations                                  :  19  
Min abs eigenvalue of Hessian               :  189.0717 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
              Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1       -0.92368    0.061577     -15.000    0.107295        -8.609
mu_asc2       -0.75824    0.060423     -12.549    0.109092        -6.950
mu_natural     0.48155    0.024083      19.996    0.043627        11.038
mu_walking    -0.02148    0.002220      -9.677    0.006167        -3.483
mu_rent       -0.02307    0.002713      -8.503    0.003854        -5.984


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  2937.00 2937.00 2937.00
Times chosen                      481.00  575.00 1881.00
Percentage chosen overall          16.38   19.58   64.04
Percentage chosen when available   16.38   19.58   64.04


Classical covariance matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1       0.003792    0.001547 -1.6505e-04  -4.602e-05  -5.150e-05
mu_asc2       0.001547    0.003651 -2.4130e-04  -4.891e-05  -5.742e-05
mu_natural -1.6505e-04 -2.4130e-04  5.7999e-04  -7.065e-06   9.761e-06
mu_walking  -4.602e-05  -4.891e-05  -7.065e-06   4.928e-06   2.627e-07
mu_rent     -5.150e-05  -5.742e-05   9.761e-06   2.627e-07   7.359e-06

Robust covariance matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1       0.011512    0.007588  -3.443e-05 -3.3161e-04  -8.626e-05
mu_asc2       0.007588    0.011901   -0.001003 -2.7054e-04  -3.809e-05
mu_natural  -3.443e-05   -0.001003    0.001903  -6.027e-05   9.412e-06
mu_walking -3.3161e-04 -2.7054e-04  -6.027e-05   3.803e-05   3.768e-06
mu_rent     -8.626e-05  -3.809e-05   9.412e-06   3.768e-06   1.486e-05

Classical correlation matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1         1.0000      0.4157     -0.1113    -0.33669    -0.30833
mu_asc2         0.4157      1.0000     -0.1658    -0.36462    -0.35033
mu_natural     -0.1113     -0.1658      1.0000    -0.13215     0.14941
mu_walking     -0.3367     -0.3646     -0.1321     1.00000     0.04362
mu_rent        -0.3083     -0.3503      0.1494     0.04362     1.00000

Robust correlation matrix:
               mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent
mu_asc1       1.000000     0.64829   -0.007355     -0.5012    -0.20858
mu_asc2       0.648293     1.00000   -0.210782     -0.4021    -0.09058
mu_natural   -0.007355    -0.21078    1.000000     -0.2240     0.05597
mu_walking   -0.501177    -0.40215   -0.224018      1.0000     0.15853
mu_rent      -0.208576    -0.09058    0.055970      0.1585     1.00000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
  16852          0.05146966
    733          0.08978947
 264000          0.09062148
  15750          0.10453293
 406600          0.11152783
  11518          0.12413396
  14389          0.13336933
  15966          0.13516926
  12731          0.13929430
  19058          0.14030410
  19575          0.15264521
   1616          0.15609847
  18930          0.15623103
  13672          0.17094416
   4551          0.17145728
  14497          0.17391454
  11554          0.17559550
   1761          0.17618237
  15714          0.18596512
    955          0.19845374

Changes in parameter estimates from starting values:
               Initial    Estimate  Difference
mu_asc1       -1.00000    -0.92368     0.07632
mu_asc2       -1.00000    -0.75824     0.24176
mu_natural     1.00000     0.48155    -0.51845
mu_walking    -0.01000    -0.02148    -0.01148
mu_rent       -0.10000    -0.02307     0.07693

Settings and functions used in model definition:

apollo_control
--------------
                       Value                                  
modelName              "Clogit_ps_Dortmund"                   
modelDescr             "ClogitWTP_ps_ Dortmund"               
indivID                "id"                                   
mixing                 "FALSE"                                
HB                     "FALSE"                                
nCores                 "1"                                    
outputDirectory        "Estimation_results/c_logit/prefspace/"
debug                  "FALSE"                                
workInLogs             "FALSE"                                
seed                   "13"                                   
noValidation           "FALSE"                                
noDiagnostics          "FALSE"                                
calculateLLC           "TRUE"                                 
panelData              "TRUE"                                 
analyticGrad           "TRUE"                                 
analyticGrad_manualSet "FALSE"                                

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
               Value
mu_asc1    0.9237978
mu_asc2    0.7584731
mu_natural 0.4818505
mu_walking 0.0214923
mu_rent    0.0230547

Scaling used in computing Hessian
--------------
                Value
mu_asc1    0.92367539
mu_asc2    0.75823503
mu_natural 0.48155256
mu_walking 0.02148119
mu_rent    0.02306536


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = mu_asc1 + mu_natural * Naturnähe_1 + mu_walking * Erreichbarkeit_1 + mu_rent* Miete_1
    
    V[['alt2']] = mu_asc2 + mu_natural * Naturnähe_2 + mu_walking * Erreichbarkeit_2 + mu_rent* Miete_2
    
    V[['alt3']] = mu_natural * Naturnähe_3 + mu_walking * Erreichbarkeit_3 + mu_rent * Miete_3
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    #P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x000001dadfb97e10>
