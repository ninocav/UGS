Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Linux.
www.ApolloChoiceModelling.com

Model name                                  : MXL_full_ps_Frankfurt
Model description                           : PS_full_ Frankfurt
Model run at                                : 2023-04-19 13:55:31
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 369
Number of rows in database                  : 3681
Number of modelled outcomes                 : 3681

Number of cores used                        :  31 
Number of inter-individual draws            : 2000 (sobol)

LL(start)                                   : -2666.23
LL at equal shares, LL(0)                   : -4043.99
LL at observed shares, LL(C)                : -3334.3
LL(final)                                   : -2349.99
Rho-squared vs equal shares                  :  0.4189 
Adj.Rho-squared vs equal shares              :  0.4164 
Rho-squared vs observed shares               :  0.2952 
Adj.Rho-squared vs observed shares           :  0.2922 
AIC                                         :  4719.98 
BIC                                         :  4782.09 

Estimated parameters                        :  10
Time taken (hh:mm:ss)                       :  00:04:44.7 
     pre-estimation                         :  00:03:8.92 
     estimation                             :  00:00:25.75 
     post-estimation                        :  00:01:10.03 
Iterations                                  :  26  
Min abs eigenvalue of Hessian               :  24.59734 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
               Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1        -0.99377    0.118725      -8.370    0.138542        -7.173
mu_asc2        -1.04591    0.121310      -8.622    0.134317        -7.787
mu_natural      0.88988    0.064660      13.762    0.077159        11.533
mu_walking     -0.11339    0.010846     -10.455    0.012363        -9.172
mu_rent        -3.56714    0.162157     -21.998    0.171136       -20.844
sig_asc1        1.29257    0.134114       9.638    0.145804         8.865
sig_asc2        1.44564    0.129803      11.137    0.147083         9.829
sig_natural     0.74406    0.063465      11.724    0.075070         9.912
sig_walking    -0.07806    0.008854      -8.817    0.008811        -8.860
sig_rent        1.53956    0.145765      10.562    0.159124         9.675


Overview of choices for MNL model component :
                                    alt1   alt2    alt3
Times available                  3681.00 3681.0 3681.00
Times chosen                      632.00  703.0 2346.00
Percentage chosen overall          17.17   19.1   63.73
Percentage chosen when available   17.17   19.1   63.73


Classical covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        0.014096    0.003026 -2.2698e-04 -2.5621e-04    0.002952   -0.005677 -2.6625e-04 -7.9086e-04 -1.6638e-04
mu_asc2        0.003026    0.014716 -5.1683e-04 -2.0626e-04    0.002612 -7.2761e-04   -0.005397 -3.6123e-04  -6.245e-05
mu_natural  -2.2698e-04 -5.1683e-04    0.004181 -2.3002e-04 -7.7271e-04  8.3671e-04  3.0984e-04    0.001883 -1.6637e-04
mu_walking  -2.5621e-04 -2.0626e-04 -2.3002e-04  1.1763e-04  -9.058e-05  -5.724e-05 -1.2389e-04 -1.4683e-04   7.320e-05
mu_rent        0.002952    0.002612 -7.7271e-04  -9.058e-05    0.026295    0.001792    0.002495  3.1572e-04 -1.1758e-04
sig_asc1      -0.005677 -7.2761e-04  8.3671e-04  -5.724e-05    0.001792    0.017987    0.004634    0.001317 -1.0241e-04
sig_asc2    -2.6625e-04   -0.005397  3.0984e-04 -1.2389e-04    0.002495    0.004634    0.016849    0.001150 -1.3517e-04
sig_natural -7.9086e-04 -3.6123e-04    0.001883 -1.4683e-04  3.1572e-04    0.001317    0.001150    0.004028 -1.1342e-04
sig_walking -1.6638e-04  -6.245e-05 -1.6637e-04   7.320e-05 -1.1758e-04 -1.0241e-04 -1.3517e-04 -1.1342e-04   7.839e-05
sig_rent      -0.003395   -0.002723    0.001148  -9.680e-05   -0.015122  8.4228e-04   5.796e-05  3.8032e-04  -4.939e-05
               sig_rent
mu_asc1       -0.003395
mu_asc2       -0.002723
mu_natural     0.001148
mu_walking   -9.680e-05
mu_rent       -0.015122
sig_asc1     8.4228e-04
sig_asc2      5.796e-05
sig_natural  3.8032e-04
sig_walking  -4.939e-05
sig_rent       0.021247

Robust covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        0.019194    0.013412 -8.8034e-04 -2.7778e-04    0.004259   -0.008310   -0.006117   -0.002746 -2.0014e-04
mu_asc2        0.013412    0.018041   -0.001244 -1.2099e-04    0.003123   -0.005809   -0.008181   -0.001289  -6.652e-05
mu_natural  -8.8034e-04   -0.001244    0.005954 -4.7155e-04 -6.5205e-04 -2.4001e-04   -0.001660    0.003439 -2.2948e-04
mu_walking  -2.7778e-04 -1.2099e-04 -4.7155e-04  1.5285e-04 -5.3665e-04   1.485e-05   6.855e-05 -2.3046e-04   9.111e-05
mu_rent        0.004259    0.003123 -6.5205e-04 -5.3665e-04    0.029287    0.003354    0.002930  7.8330e-04 -3.9865e-04
sig_asc1      -0.008310   -0.005809 -2.4001e-04   1.485e-05    0.003354    0.021259    0.012032    0.001837 -1.6335e-04
sig_asc2      -0.006117   -0.008181   -0.001660   6.855e-05    0.002930    0.012032    0.021633    0.001549  -9.163e-05
sig_natural   -0.002746   -0.001289    0.003439 -2.3046e-04  7.8330e-04    0.001837    0.001549    0.005636 -1.4448e-04
sig_walking -2.0014e-04  -6.652e-05 -2.2948e-04   9.111e-05 -3.9865e-04 -1.6335e-04  -9.163e-05 -1.4448e-04   7.763e-05
sig_rent      -0.005485   -0.004288    0.001281  1.3405e-04   -0.018481  4.0353e-04  3.2689e-04  1.1945e-04   7.306e-05
               sig_rent
mu_asc1       -0.005485
mu_asc2       -0.004288
mu_natural     0.001281
mu_walking   1.3405e-04
mu_rent       -0.018481
sig_asc1     4.0353e-04
sig_asc2     3.2689e-04
sig_natural  1.1945e-04
sig_walking   7.306e-05
sig_rent       0.025321

Classical correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         1.00000     0.21012    -0.02957    -0.19898     0.15335    -0.35653   -0.017277    -0.10496    -0.15829
mu_asc2         0.21012     1.00000    -0.06589    -0.15677     0.13280    -0.04472   -0.342753    -0.04692    -0.05814
mu_natural     -0.02957    -0.06589     1.00000    -0.32801    -0.07370     0.09649    0.036916     0.45897    -0.29062
mu_walking     -0.19898    -0.15677    -0.32801     1.00000    -0.05150    -0.03935   -0.088001    -0.21332     0.76232
mu_rent         0.15335     0.13280    -0.07370    -0.05150     1.00000     0.08239    0.118528     0.03068    -0.08190
sig_asc1       -0.35653    -0.04472     0.09649    -0.03935     0.08239     1.00000    0.266179     0.15475    -0.08624
sig_asc2       -0.01728    -0.34275     0.03692    -0.08800     0.11853     0.26618    1.000000     0.13957    -0.11762
sig_natural    -0.10496    -0.04692     0.45897    -0.21332     0.03068     0.15475    0.139567     1.00000    -0.20186
sig_walking    -0.15829    -0.05814    -0.29062     0.76232    -0.08190    -0.08624   -0.117615    -0.20186     1.00000
sig_rent       -0.19616    -0.15398     0.12184    -0.06123    -0.63975     0.04309    0.003063     0.04111    -0.03827
               sig_rent
mu_asc1       -0.196162
mu_asc2       -0.153977
mu_natural     0.121838
mu_walking    -0.061233
mu_rent       -0.639754
sig_asc1       0.043085
sig_asc2       0.003063
sig_natural    0.041112
sig_walking   -0.038271
sig_rent       1.000000

Robust correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         1.00000     0.72072    -0.08235   -0.162179     0.17965   -0.411387    -0.30020    -0.26403    -0.16396
mu_asc2         0.72072     1.00000    -0.12008   -0.072858     0.13585   -0.296640    -0.41413    -0.12782    -0.05621
mu_natural     -0.08235    -0.12008     1.00000   -0.494322    -0.04938   -0.021334    -0.14631     0.59367    -0.33756
mu_walking     -0.16218    -0.07286    -0.49432    1.000000    -0.25364    0.008238     0.03770    -0.24831     0.83637
mu_rent         0.17965     0.13585    -0.04938   -0.253637     1.00000    0.134424     0.11642     0.06097    -0.26439
sig_asc1       -0.41139    -0.29664    -0.02133    0.008238     0.13442    1.000000     0.56107     0.16782    -0.12716
sig_asc2       -0.30020    -0.41413    -0.14631    0.037695     0.11642    0.561067     1.00000     0.14030    -0.07071
sig_natural    -0.26403    -0.12782     0.59367   -0.248306     0.06097    0.167816     0.14030     1.00000    -0.21843
sig_walking    -0.16396    -0.05621    -0.33756    0.836373    -0.26439   -0.127158    -0.07071    -0.21843     1.00000
sig_rent       -0.24881    -0.20064     0.10433    0.068139    -0.67865    0.017393     0.01397     0.01000     0.05211
               sig_rent
mu_asc1        -0.24881
mu_asc2        -0.20064
mu_natural      0.10433
mu_walking      0.06814
mu_rent        -0.67865
sig_asc1        0.01739
sig_asc2        0.01397
sig_natural     0.01000
sig_walking     0.05211
sig_rent        1.00000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
 468900           0.1658548
  13697           0.1771769
   1657           0.1820182
 275600           0.1937965
  14210           0.1982538
 166900           0.1988851
 184400           0.1992520
  18677           0.2076644
 260000           0.2082930
  14899           0.2085906
  11602           0.2102390
  10129           0.2120522
 143200           0.2155236
  10922           0.2231004
   3124           0.2324047
  15688           0.2352879
  14126           0.2382426
    427           0.2419786
  16884           0.2449738
    259           0.2460079

Changes in parameter estimates from starting values:
                Initial    Estimate  Difference
mu_asc1         -1.0000    -0.99377    0.006232
mu_asc2         -1.0000    -1.04591   -0.045907
mu_natural       1.0000     0.88988   -0.110124
mu_walking      -0.2000    -0.11339    0.086609
mu_rent         -2.0000    -3.56714   -1.567138
sig_asc1         1.0000     1.29257    0.292573
sig_asc2         1.0000     1.44564    0.445638
sig_natural      1.0000     0.74406   -0.255937
sig_walking      0.5000    -0.07806   -0.578065
sig_rent         1.0000     1.53956    0.539564

Settings and functions used in model definition:

apollo_control
--------------
                       Value                       
modelName              "MXL_full_ps_Frankfurt"     
modelDescr             "PS_full_ Frankfurt"        
indivID                "id"                        
mixing                 "TRUE"                      
HB                     "FALSE"                     
nCores                 "31"                        
outputDirectory        "Estimation_results/MXL_ps/"
debug                  "FALSE"                     
workInLogs             "FALSE"                     
seed                   "13"                        
noValidation           "FALSE"                     
noDiagnostics          "FALSE"                     
calculateLLC           "TRUE"                      
panelData              "TRUE"                      
analyticGrad           "TRUE"                      
analyticGrad_manualSet "FALSE"                     

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                 Value
mu_asc1     0.99377250
mu_asc2     1.04590324
mu_natural  0.88986536
mu_walking  0.11339033
mu_rent     3.56708221
sig_asc1    1.29257001
sig_asc2    1.44565922
sig_natural 0.74407265
sig_walking 0.07806525
sig_rent    1.53958040

Scaling used in computing Hessian
--------------
                 Value
mu_asc1     0.99376791
mu_asc2     1.04590669
mu_natural  0.88987619
mu_walking  0.11339088
mu_rent     3.56713753
sig_asc1    1.29257318
sig_asc2    1.44563764
sig_natural 0.74406307
sig_walking 0.07806481
sig_rent    1.53956441


apollo_randCoeff
----------------
function(apollo_beta, apollo_inputs){
    randcoeff = list()
    
    randcoeff[["b_mu_asc1"]] = mu_asc1 + sig_asc1 * draws_asc1
    randcoeff[["b_mu_asc2"]] = mu_asc2 + sig_asc2 * draws_asc2
    randcoeff[["b_mu_natural"]] = mu_natural + sig_natural * draws_natural
    randcoeff[["b_mu_walking"]] = mu_walking + sig_walking * draws_walking
    randcoeff[["b_mu_rent"]] = -exp(mu_rent + sig_rent * draws_rent)
    
    return(randcoeff)
  }
<bytecode: 0x564c176bdf48>


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = b_mu_asc1 + b_mu_natural * Naturnähe_1 + b_mu_walking * Erreichbarkeit_1 + b_mu_rent * Miete_1
    
    V[['alt2']] = b_mu_asc2 + b_mu_natural * Naturnähe_2 + b_mu_walking * Erreichbarkeit_2 + b_mu_rent * Miete_2
    
    V[['alt3']] = b_mu_natural * Naturnähe_3 + b_mu_walking * Erreichbarkeit_3 + b_mu_rent * Miete_3
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x564c168daf50>
