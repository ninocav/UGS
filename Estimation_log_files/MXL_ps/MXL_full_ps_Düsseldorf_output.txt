Model run by idivnc71qaxa using Apollo 0.2.8 on R 4.2.2 for Linux.
www.ApolloChoiceModelling.com

Model name                                  : MXL_full_ps_Düsseldorf
Model description                           : PS_full_ Düsseldorf
Model run at                                : 2023-04-19 13:46:55
Estimation method                           : bfgs
Model diagnosis                             : successful convergence 
Number of individuals                       : 327
Number of rows in database                  : 3252
Number of modelled outcomes                 : 3252

Number of cores used                        :  31 
Number of inter-individual draws            : 2000 (sobol)

LL(start)                                   : -2250.26
LL at equal shares, LL(0)                   : -3572.69
LL at observed shares, LL(C)                : -2948.89
LL(final)                                   : -1979.89
Rho-squared vs equal shares                  :  0.4458 
Adj.Rho-squared vs equal shares              :  0.443 
Rho-squared vs observed shares               :  0.3286 
Adj.Rho-squared vs observed shares           :  0.3252 
AIC                                         :  3979.77 
BIC                                         :  4040.64 

Estimated parameters                        :  10
Time taken (hh:mm:ss)                       :  00:04:17.62 
     pre-estimation                         :  00:02:49.56 
     estimation                             :  00:00:25.88 
     post-estimation                        :  00:01:2.18 
Iterations                                  :  26  
Min abs eigenvalue of Hessian               :  18.55806 

Unconstrained optimisation.

These outputs have had the scaling used in estimation applied to them.
Estimates:
               Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
mu_asc1         -0.9338     0.13556      -6.888     0.15993        -5.839
mu_asc2         -0.8478     0.12554      -6.753     0.13815        -6.136
mu_natural       1.0463     0.07429      14.084     0.08757        11.948
mu_walking      -0.1204     0.01213      -9.927     0.01503        -8.015
mu_rent         -3.6217     0.19965     -18.140     0.22063       -16.415
sig_asc1         1.4334     0.16173       8.863     0.17585         8.151
sig_asc2         1.3479     0.14877       9.061     0.19023         7.086
sig_natural      0.7769     0.07004      11.092     0.07086        10.963
sig_walking     -0.1061     0.01105      -9.601     0.01272        -8.342
sig_rent         1.7176     0.14503      11.843     0.13416        12.803


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  3252.00 3252.00 3252.00
Times chosen                      559.00  623.00 2070.00
Percentage chosen overall          17.19   19.16   63.65
Percentage chosen when available   17.19   19.16   63.65


Classical covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        0.018375    0.004140  -1.796e-05 -3.5775e-04    0.004015   -0.007847   -0.001194 -5.9058e-04 -2.1632e-04
mu_asc2        0.004140    0.015759  -7.485e-05 -3.6531e-04    0.003449 -9.0331e-04   -0.005365  2.0073e-04 -2.3660e-04
mu_natural   -1.796e-05  -7.485e-05    0.005519 -3.3969e-04 -8.2104e-04    0.001234    0.001133    0.002692 -3.3056e-04
mu_walking  -3.5775e-04 -3.6531e-04 -3.3969e-04  1.4719e-04 -1.9157e-04  -5.761e-05  -7.625e-05 -2.5265e-04  1.1975e-04
mu_rent        0.004015    0.003449 -8.2104e-04 -1.9157e-04    0.039861    0.001441  3.6896e-04  5.7014e-04 -1.7113e-04
sig_asc1      -0.007847 -9.0331e-04    0.001234  -5.761e-05    0.001441    0.026156    0.007776  9.1570e-04  -8.951e-05
sig_asc2      -0.001194   -0.005365    0.001133  -7.625e-05  3.6896e-04    0.007776    0.022131    0.001051 -1.0286e-04
sig_natural -5.9058e-04  2.0073e-04    0.002692 -2.5265e-04  5.7014e-04  9.1570e-04    0.001051    0.004905 -2.1969e-04
sig_walking -2.1632e-04 -2.3660e-04 -3.3056e-04  1.1975e-04 -1.7113e-04  -8.951e-05 -1.0286e-04 -2.1969e-04  1.2213e-04
sig_rent      -0.002785   -0.002378    0.001122 -1.0326e-04   -0.019958  5.2843e-04    0.001018  4.1625e-04  -9.055e-05
               sig_rent
mu_asc1       -0.002785
mu_asc2       -0.002378
mu_natural     0.001122
mu_walking  -1.0326e-04
mu_rent       -0.019958
sig_asc1     5.2843e-04
sig_asc2       0.001018
sig_natural  4.1625e-04
sig_walking  -9.055e-05
sig_rent       0.021033

Robust covariance matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        0.025576    0.016212  9.3691e-04 -7.4165e-04    0.005900   -0.012994   -0.012031 -9.0793e-04 -4.3913e-04
mu_asc2        0.016212    0.019087  4.2661e-04 -5.7327e-04    0.002805   -0.005168   -0.007280   3.627e-06 -3.8002e-04
mu_natural   9.3691e-04  4.2661e-04    0.007669 -7.8913e-04  -3.008e-05 -7.9697e-04 -5.3581e-04    0.004415 -6.7177e-04
mu_walking  -7.4165e-04 -5.7327e-04 -7.8913e-04  2.2579e-04 -4.8426e-04  2.0640e-04  3.2502e-04 -4.7632e-04  1.8328e-04
mu_rent        0.005900    0.002805  -3.008e-05 -4.8426e-04    0.048678 -7.4792e-04   -0.005649  5.0165e-04 -3.4959e-04
sig_asc1      -0.012994   -0.005168 -7.9697e-04  2.0640e-04 -7.4792e-04    0.030923    0.024938   3.941e-05   2.930e-05
sig_asc2      -0.012031   -0.007280 -5.3581e-04  3.2502e-04   -0.005649    0.024938    0.036187  8.9050e-04   3.547e-05
sig_natural -9.0793e-04   3.627e-06    0.004415 -4.7632e-04  5.0165e-04   3.941e-05  8.9050e-04    0.005022 -4.2057e-04
sig_walking -4.3913e-04 -3.8002e-04 -6.7177e-04  1.8328e-04 -3.4959e-04   2.930e-05   3.547e-05 -4.2057e-04  1.6178e-04
sig_rent      -0.003385   -0.001660  8.9464e-04  -2.968e-05   -0.023492    0.002161    0.004874  6.9201e-04  -3.837e-05
               sig_rent
mu_asc1       -0.003385
mu_asc2       -0.001660
mu_natural   8.9464e-04
mu_walking   -2.968e-05
mu_rent       -0.023492
sig_asc1       0.002161
sig_asc2       0.004874
sig_natural  6.9201e-04
sig_walking  -3.837e-05
sig_rent       0.017999

Classical correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1        1.000000    0.243268   -0.001783    -0.21753     0.14834    -0.35792    -0.05921    -0.06221    -0.14440
mu_asc2        0.243268    1.000000   -0.008026    -0.23986     0.13761    -0.04449    -0.28726     0.02283    -0.17054
mu_natural    -0.001783   -0.008026    1.000000    -0.37689    -0.05536     0.10274     0.10256     0.51743    -0.40264
mu_walking    -0.217527   -0.239859   -0.376886     1.00000    -0.07909    -0.02936    -0.04225    -0.29734     0.89314
mu_rent        0.148342    0.137612   -0.055356    -0.07909     1.00000     0.04463     0.01242     0.04077    -0.07756
sig_asc1      -0.357920   -0.044493    0.102735    -0.02936     0.04463     1.00000     0.32321     0.08084    -0.05008
sig_asc2      -0.059205   -0.287264    0.102556    -0.04225     0.01242     0.32321     1.00000     0.10087    -0.06256
sig_natural   -0.062206    0.022831    0.517432    -0.29734     0.04077     0.08084     0.10087     1.00000    -0.28384
sig_walking   -0.144404   -0.170542   -0.402639     0.89314    -0.07756    -0.05008    -0.06256    -0.28384     1.00000
sig_rent      -0.141653   -0.130595    0.104124    -0.05869    -0.68928     0.02253     0.04719     0.04098    -0.05650
               sig_rent
mu_asc1        -0.14165
mu_asc2        -0.13059
mu_natural      0.10412
mu_walking     -0.05869
mu_rent        -0.68928
sig_asc1        0.02253
sig_asc2        0.04719
sig_natural     0.04098
sig_walking    -0.05650
sig_rent        1.00000

Robust correlation matrix:
                mu_asc1     mu_asc2  mu_natural  mu_walking     mu_rent    sig_asc1    sig_asc2 sig_natural sig_walking
mu_asc1         1.00000     0.73378    0.066899    -0.30862    0.167221   -0.462056    -0.39547   -0.080114    -0.21588
mu_asc2         0.73378     1.00000    0.035262    -0.27614    0.092022   -0.212706    -0.27699  3.7044e-04    -0.21626
mu_natural      0.06690     0.03526    1.000000    -0.59969   -0.001557   -0.051753    -0.03216    0.711450    -0.60311
mu_walking     -0.30862    -0.27614   -0.599692     1.00000   -0.146068    0.078112     0.11370   -0.447314     0.95896
mu_rent         0.16722     0.09202   -0.001557    -0.14607    1.000000   -0.019277    -0.13461    0.032085    -0.12457
sig_asc1       -0.46206    -0.21271   -0.051753     0.07811   -0.019277    1.000000     0.74549    0.003162     0.01310
sig_asc2       -0.39547    -0.27699   -0.032164     0.11370   -0.134606    0.745485     1.00000    0.066058     0.01466
sig_natural    -0.08011  3.7044e-04    0.711450    -0.44731    0.032085    0.003162     0.06606    1.000000    -0.46661
sig_walking    -0.21588    -0.21626   -0.603114     0.95896   -0.124574    0.013100     0.01466   -0.466611     1.00000
sig_rent       -0.15776    -0.08957    0.076149    -0.01472   -0.793639    0.091611     0.19098    0.072788    -0.02249
               sig_rent
mu_asc1        -0.15776
mu_asc2        -0.08957
mu_natural      0.07615
mu_walking     -0.01472
mu_rent        -0.79364
sig_asc1        0.09161
sig_asc2        0.19098
sig_natural     0.07279
sig_walking    -0.02249
sig_rent        1.00000

 20 worst outliers in terms of lowest average per choice prediction:
     ID Avg prob per choice
  18563           0.1760257
  15665           0.1876529
 179900           0.2129316
  19373           0.2154617
   3386           0.2174651
  14963           0.2210465
 330400           0.2242612
 241400           0.2254552
 181400           0.2264213
  16669           0.2339870
  20105           0.2375864
  17880           0.2398637
  16434           0.2468984
  17515           0.2474562
 268800           0.2518039
 307500           0.2543952
 460400           0.2545827
  18880           0.2573617
  18413           0.2595950
    514           0.2694378

Changes in parameter estimates from starting values:
                Initial    Estimate  Difference
mu_asc1         -1.0000     -0.9338     0.06622
mu_asc2         -1.0000     -0.8478     0.15222
mu_natural       1.0000      1.0463     0.04630
mu_walking      -0.2000     -0.1204     0.07957
mu_rent         -2.0000     -3.6217    -1.62167
sig_asc1         1.0000      1.4334     0.43336
sig_asc2         1.0000      1.3479     0.34790
sig_natural      1.0000      0.7769    -0.22314
sig_walking      0.5000     -0.1061    -0.60610
sig_rent         1.0000      1.7176     0.71759

Settings and functions used in model definition:

apollo_control
--------------
                       Value                       
modelName              "MXL_full_ps_Düsseldorf"    
modelDescr             "PS_full_ Düsseldorf"       
indivID                "id"                        
mixing                 "TRUE"                      
HB                     "FALSE"                     
nCores                 "31"                        
outputDirectory        "Estimation_results/MXL_ps/"
debug                  "FALSE"                     
workInLogs             "FALSE"                     
seed                   "13"                        
noValidation           "FALSE"                     
noDiagnostics          "FALSE"                     
calculateLLC           "TRUE"                      
panelData              "TRUE"                      
analyticGrad           "TRUE"                      
analyticGrad_manualSet "FALSE"                     

Hessian routines attempted
--------------
numerical jacobian of LL analytical gradient

Scaling in estimation
--------------
                Value
mu_asc1     0.9337758
mu_asc2     0.8477849
mu_natural  1.0462948
mu_walking  0.1204323
mu_rent     3.6216638
sig_asc1    1.4333615
sig_asc2    1.3478984
sig_natural 0.7768563
sig_walking 0.1061005
sig_rent    1.7175925

Scaling used in computing Hessian
--------------
                Value
mu_asc1     0.9337757
mu_asc2     0.8477846
mu_natural  1.0462955
mu_walking  0.1204322
mu_rent     3.6216747
sig_asc1    1.4333617
sig_asc2    1.3478972
sig_natural 0.7768560
sig_walking 0.1061005
sig_rent    1.7175929


apollo_randCoeff
----------------
function(apollo_beta, apollo_inputs){
    randcoeff = list()
    
    randcoeff[["b_mu_asc1"]] = mu_asc1 + sig_asc1 * draws_asc1
    randcoeff[["b_mu_asc2"]] = mu_asc2 + sig_asc2 * draws_asc2
    randcoeff[["b_mu_natural"]] = mu_natural + sig_natural * draws_natural
    randcoeff[["b_mu_walking"]] = mu_walking + sig_walking * draws_walking
    randcoeff[["b_mu_rent"]] = -exp(mu_rent + sig_rent * draws_rent)
    
    return(randcoeff)
  }
<bytecode: 0x564c176bdf48>


apollo_probabilities
--------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Function initialisation: do not change the following three commands
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    ### List of utilities (later integrated in mnl_settings below) as defined in the equation in the paper
    V = list()
    V[['alt1']] = b_mu_asc1 + b_mu_natural * Naturnähe_1 + b_mu_walking * Erreichbarkeit_1 + b_mu_rent * Miete_1
    
    V[['alt2']] = b_mu_asc2 + b_mu_natural * Naturnähe_2 + b_mu_walking * Erreichbarkeit_2 + b_mu_rent * Miete_2
    
    V[['alt3']] = b_mu_natural * Naturnähe_3 + b_mu_walking * Erreichbarkeit_3 + b_mu_rent * Miete_3
    
    
    ### Define settings for MNL model component
    mnl_settings = list(
      alternatives  = c(alt1=1, alt2=2, alt3=3),
      avail         = 1, # all alternatives are available in every choice
      choiceVar     = choice,
      V             = V#,  # tell function to use list vector defined above
      
    )
    
    ### Compute probabilities using MNL model
    P[['model']] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P = apollo_panelProd(P, apollo_inputs, functionality)
    
    ### Average across inter-individual draws - nur bei Mixed Logit!
    P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
  }
<bytecode: 0x564c168daf50>
